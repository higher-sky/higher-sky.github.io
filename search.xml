<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>buu wp</title>
      <link href="2021/0912undefined.html"/>
      <url>2021/0912undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、MD5"><a href="#1、MD5" class="headerlink" title="1、MD5"></a>1、MD5</h2><p>题目<br>e00cf25ad42683b3df678c61f42c6bda<br>解题过程<br>1、了解什么是MD5加密<br>2、粗略了解加密的过程及其特点<br>3、上百度搜索解密的网站<a href="https://www.cmd5.com/">md5</a><br><img src="/images/image-34.png" alt="Image text"><br>flag{admin1}</p><h2 id="2、一眼就解密"><a href="#2、一眼就解密" class="headerlink" title="2、一眼就解密"></a>2、一眼就解密</h2><p>题目<br>flag：ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=<br>解题过程<br>通过特征分析发现这是base类别的加密<br>所以<a href="http://ctf.ssleye.com/base64.html">base编码</a><br><img src="/images/image-35.png" alt="Image text"><br>flag{THE_FLAG_OF_THIS_STRING}</p><h2 id="3、Url编码"><a href="#3、Url编码" class="headerlink" title="3、Url编码"></a>3、Url编码</h2><p>题目<br>%66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d<br>解题过程<br>1、url编码是将一个字符的assci码编码成16进制的方式然后在前面加一个%<br>2、url的编码的特点为十六进制数前面加上%<br>3、可以用C语言或python，写个脚本这里我就不写了，直接找度娘了，解码网站在下面<a href="http://ctf.ssleye.com/url.html">URL编码</a><br><img src="/images/image-36.png" alt="Image text"></p><h2 id="4、看我回旋踢"><a href="#4、看我回旋踢" class="headerlink" title="4、看我回旋踢"></a>4、看我回旋踢</h2><p>题目<br>synt{5pq1004q-86n5-46q8-o720-oro5on0417r1}<br>解答过程<br>1、通过对常见密码的了解，可以猜测这是一个凯撒密码或者叫做移位密码<br>2、凯撒密码的介绍：<br><img src="/images/image-37.png" alt="Image text"><br>3、通过解密工具进行尝试解密恺撒解密<a href="https://tool.bugku.com/jiemi/">凯撒解密网站</a><br><img src="/images/image-38.png" alt="Image text"></p><h2 id="5、摩丝"><a href="#5、摩丝" class="headerlink" title="5、摩丝"></a>5、摩丝</h2><p>题目<br>.. .-.. — …- . -.– — ..-<br>解答过程<br>1、了解摩斯密码的加密方式<br>2、<img src="/images/image-39.png" alt="Image text"><br>3、<a href="https://tool.bugku.com/mosi/">摩斯密码</a><br><img src="/images/image-40.png" alt="Image text"></p><h2 id="6、password"><a href="#6、password" class="headerlink" title="6、password"></a>6、password</h2><p>题目<br>姓名：张三<br>生日：19900315<br>key格式为key{xxxxxxxxxx}<br>解题过程<br>通过过题目提示得到flag{xxxxxxxxxx}<br>根据题目信息联想尝试flag{ZS19900315}<br>所以flag就是上买你这个答案。</p><h2 id="7、变异凯撒"><a href="#7、变异凯撒" class="headerlink" title="7、变异凯撒"></a>7、变异凯撒</h2><p>题目<br>加密密文：afZ_r9VYfScOeO_UL^RWUc<br>格式：flag{ }<br>解答过程<br>1、<img src="/images/image-41.png" alt="Image text"><br>2、显然这里不是简单的凯撒加密，因为凯撒加密的对象为二十六个英文字母，看到_、^我们可以想到ASCll码<img src="/images/image-42.png" alt="Image text"><br>对照知道该字符串移位了5,解密脚本如下：</p><pre class=" language-python"><code class="language-python">m<span class="token operator">=</span><span class="token string">'afZ_r9VYfScOeO_UL^RWUc'</span>j<span class="token operator">=</span><span class="token number">5</span><span class="token keyword">for</span> i <span class="token keyword">in</span> m<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    j <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>flag{Caesar_variation}</p><h2 id="8、Quoted-printable"><a href="#8、Quoted-printable" class="headerlink" title="8、Quoted-printable"></a>8、Quoted-printable</h2><p>题目<br>=E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6<br>解题过程<br>1、通过百度查询题目知道这是一种编码方式<br>2、我这里提供一个网址在线解码方式<a href="http://ctf.ssleye.com/quoted.html">Quoted-printable编码</a><br><img src="/images/image-43.png" alt="Image text"><br>flag{那你也很棒哦}</p><h2 id="9、Rabbit"><a href="#9、Rabbit" class="headerlink" title="9、Rabbit"></a>9、Rabbit</h2><p>题目<br>U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI<br>解答过程<br>1、分析题目，通过度娘搜索得到Rabbit这是一种密码<br>2、然后我这里提供一个网址，在线解析得<a href="http://www.jsons.cn/rabbitencrypt/">Rabbit</a><br><img src="/images/image-44.png" alt="Image text"><br>flag{Cute_Rabbit}</p><h2 id="10、篱笆墙的影子"><a href="#10、篱笆墙的影子" class="headerlink" title="10、篱笆墙的影子"></a>10、篱笆墙的影子</h2><p>题目<br>felhaagv{ewtehtehfilnakgw}<br>解答<br>1、有题目形式可以看出这是一个栅栏密码<br>2、在线加密<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">栅栏解密</a><br>3、尝试解答<br><img src="/images/image-45.png" alt="Image text"><br>题目共有26个字母把26分解成因素1,2,13,26排除掉1和字符串长度，<br><img src="/images/image-46.png" alt="Image text"><br>flag{wethinkwehavetheflag}</p><h2 id="11、RSA"><a href="#11、RSA" class="headerlink" title="11、RSA"></a>11、RSA</h2><p>题目<br>在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17<br>求解出d作为flag提交<br>解题脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2p <span class="token operator">=</span> <span class="token number">473398607161</span>q <span class="token operator">=</span> <span class="token number">4511491</span>e <span class="token operator">=</span> <span class="token number">17</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span></code></pre><h2 id="12、丢失的MD5"><a href="#12、丢失的MD5" class="headerlink" title="12、丢失的MD5"></a>12、丢失的MD5</h2><p>题目<br><img src="/images/image-47.png" alt="Image text"><br>用python IDLE打开得到<br><img src="/images/image-48.png" alt="Image text"><br>直接改下脚本运行一下就出来了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            m <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            s <span class="token operator">=</span> <span class="token string">'TASC'</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'O3RJMV'</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'WDJKX'</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'ZM'</span>            m<span class="token punctuation">.</span>update<span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            des<span class="token operator">=</span>m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'e9032'</span> <span class="token keyword">in</span> des <span class="token operator">and</span> <span class="token string">'da'</span> <span class="token keyword">in</span> des <span class="token operator">and</span> <span class="token string">'911513'</span> <span class="token keyword">in</span> des<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>des<span class="token punctuation">)</span>                <span class="token keyword">break</span></code></pre><p>flag{e9032994dabac08080091151380478a2}</p><h2 id="13、Alice与Bob"><a href="#13、Alice与Bob" class="headerlink" title="13、Alice与Bob"></a>13、Alice与Bob</h2><p>题目<br>密码学历史中，有两位知名的杰出人物，Alice和Bob。他们的爱情经过置换和轮加密也难以混淆，即使是没有身份认证也可以知根知底。就像在数学王国中的素数一样，孤傲又热情。下面是一个大整数:98554799767,请分解为两个素数，分解后，小的放前面，大的放后面，合成一个新的数字，进行md5的32位小写哈希，提交答案。 注意：得到的 flag 请包上 flag{} 提交<br>解答过程<br>1、<a href="http://www.factordb.com/index.php">在线分解素数</a><br><img src="/images/image-49.png" alt="Image text"><br>2、<a href="https://www.cmd5.com/">md5在线解密</a><br><img src="/images/image-50.png" alt="Image text"><br>flag{ d450209323a847c8d01c6be47c81811a}</p><h2 id="14、rsarsa"><a href="#14、rsarsa" class="headerlink" title="14、rsarsa"></a>14、rsarsa</h2><p>Math is cool! Use the RSA algorithm to decode the secret message, c, p, q, and e are parameters for the RSA algorithm.</p><p>p =  9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483<br>q =  11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407<br>e =  65537<br>c =  83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</p><p>Use RSA to find the secret message<br>解题脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2p <span class="token operator">=</span>  <span class="token number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span>q <span class="token operator">=</span>  <span class="token number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span>e <span class="token operator">=</span>  <span class="token number">65537</span>c <span class="token operator">=</span>  <span class="token number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span>n <span class="token operator">=</span> p<span class="token operator">*</span>qphi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre><p>flag{5577446633554466577768879988}</p><h2 id="15、大帝的密码武器"><a href="#15、大帝的密码武器" class="headerlink" title="15、大帝的密码武器"></a>15、大帝的密码武器</h2><p>下载文件是一个没有文件后缀的文件，我们手动添加一个文件后缀zip。<br>密文：ComeChina<br>题目：<br>公元前一百年，在罗马出生了一位对世界影响巨大的人物，他生前是罗马三巨头之一。他率先使用了一种简单的加密函，因此这种加密方法以他的名字命名。<br>以下密文被解开后可以获得一个有意义的单词：FRPHEVGL<br>你可以用这个相同的加密向量加密附件中的密文，作为答案进行提交。<br>1、猜测是凯撒密码，先将题目中的密文进行解密<a href="https://tool.bugku.com/jiemi/">凯撒在线解密</a><br><img src="/images/image-51.png" alt="Image text"><br>发现题目中的密文通过密钥是13的凯撒加密得到了SECURITY。<br>所以密文ComeChina也通过密钥是13的凯撒加密得到PbzrPuvan<br>所以flag{PbzrPuvan}</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buu 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/0729undefined.html"/>
      <url>2021/0729undefined.html</url>
      
        <content type="html"><![CDATA[<p><strong>金三胖</strong><br>下载文件下来发现是一张动态图片，一闪而过好像发现了一些什么，话不多说直接上工具StegSlove<br><img src="/images/image-26.png" alt="Image text"><br><img src="/images/image-27.png" alt="Image text"><br><img src="/images/image-28.png" alt="Image text"><br><img src="/images/image-29.png" alt="Image text"><br>从而得到flag{hello hongke}</p><p><strong>二维码</strong><br>下载文件下来得到一张直接用QR research这个工具对图片进处理<img src="/images/image-30.png" alt="Image text">发现并没有发现有啥文件，然后用010 打开发现里面隐藏着压缩包、text文件，直接将文件拖入kali<img src="/images/image-31.png" alt="Image text">用binwalk 文件名 -e 提取<br><img src="/images/image-32.png" alt="Image text"><img src="/images/image-33.png" alt="Image text"><br>得到两个文件然后用zipper暴力破解的到密码7639解压得到CTF{vjpw_wnoei}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buu</title>
      <link href="2021/0715undefined.html"/>
      <url>2021/0715undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="2021-7-buu-刷题"><a href="#2021-7-buu-刷题" class="headerlink" title="[2021.7]buu 刷题"></a>[2021.7]buu 刷题</h1><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><p><strong>[GUET-CTF2019]NO SOS</strong></p><p>题目</p><p>..-.-.-.–…….–..-…-..-…–.-.-….-..-..–.-.-..-.-..—-</p><p>看着是摩斯密码但是一用在解密，解密不出来，后面发现题目中.和-不是完全正确的被人改过</p><p>所以我们应该先还原：..-.-.-.–…….–..-…-..-…–.-.-….-..-..–.-.-..-.-..—-，再通过<a href="https://ctftools.com/down/">在线解密网站</a></p><p>得到aababababbaaaaaaabbaabaaabaabaaabbababaaaabaabaabbababaababaabbbb</p><p>发现这个是培根密码再用另外一个<a href="http://ctf.ssleye.com/baconian.html">在线解密网站</a></p><p>得到flag</p><pre><code>flagisguetkkp</code></pre><p><strong>[QCTF2018]Xman-RSA</strong><br>题目<br>下载下来解压有四个文件用记事本打开<br>ciphertext:</p><p>1240198b148089290e375b999569f0d53c32d356b2e95f5acee070f016b3bef243d0b5e46d9ad7aa7dfe2f21bda920d0ac7ce7b1e48f22b2de410c6f391ce7c4347c65ffc9704ecb3068005e9f35cbbb7b27e0f7a18f4f42ae572d77aaa3ee189418d6a07bab7d93beaa365c98349d8599eb68d21313795f380f05f5b3dfdc6272635ede1f83d308c0fdb2baf444b9ee138132d0d532c3c7e60efb25b9bf9cb62dba9833aa3706344229bd6045f0877661a073b6deef2763452d0ad7ab3404ba494b93fd6dfdf4c28e4fe83a72884a99ddf15ca030ace978f2da87b79b4f504f1d15b5b96c654f6cd5179b72ed5f84d3a16a8f0d5bf6774e7fd98d27bf3c9839<br>129d5d4ab3f9e8017d4e6761702467bbeb1b884b6c4f8ff397d078a8c41186a3d52977fa2307d5b6a0ad01fedfc3ba7b70f776ba3790a43444fb954e5afd64b1a3abeb6507cf70a5eb44678a886adf81cb4848a35afb4db7cd7818f566c7e6e2911f5ababdbdd2d4ff9825827e58d48d5466e021a64599b3e867840c07e29582961f81643df07f678a61a9f9027ebd34094e272dfbdc4619fa0ac60f0189af785df77e7ec784e086cf692a7bf7113a7fb8446a65efa8b431c6f72c14bcfa49c9b491fb1d87f2570059e0f13166a85bb555b40549f45f04bc5dbd09d8b858a5382be6497d88197ffb86381085756365bd757ec3cdfa8a77ba1728ec2de596c5ab</p><p>encryption.encrypted</p><pre class=" language-python"><code class="language-python">gqhb jbkl2 pbkhqw pt_kqpbdgqhb ht pbkhqw zqreahbpbkhqw urtd64adg ulwdt_wh_ezb<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">:</span>    qdwzqe pew<span class="token punctuation">(</span>u<span class="token punctuation">.</span>dexhad<span class="token punctuation">(</span><span class="token string">'mdi'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    adg ezb_wh_ulwdt<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>    u <span class="token operator">=</span> mdi<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    u <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token operator">+</span> u pg yde<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> dytd u    qdwzqe u<span class="token punctuation">.</span>adxhad<span class="token punctuation">(</span><span class="token string">'mdi'</span><span class="token punctuation">)</span>adg jdw_r_kqpbd<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    qreahb_tdda <span class="token operator">=</span> zqreahb<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    ezb <span class="token operator">=</span> ulwdt_wh_ezb<span class="token punctuation">(</span>qreahb_tdda<span class="token punctuation">)</span>        fmpyd Tqzd<span class="token punctuation">:</span>        pg pt_kqpbd<span class="token punctuation">(</span>ezb<span class="token punctuation">)</span><span class="token punctuation">:</span>            uqdrv        ezb<span class="token operator">+=</span><span class="token number">1</span>    qdwzqe ezbadg dexqlkw<span class="token punctuation">(</span>t<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">:</span>    k <span class="token operator">=</span> ulwdt_wh_ezb<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    k <span class="token operator">=</span> khf<span class="token punctuation">(</span>k<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span>    qdwzqe ezb_wh_ulwdt<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>dexhad<span class="token punctuation">(</span><span class="token string">'mdi'</span><span class="token punctuation">)</span>    adg tdkrqrwd<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>    k <span class="token operator">=</span> e <span class="token operator">%</span> <span class="token number">4</span>    w <span class="token operator">=</span> <span class="token punctuation">(</span>k<span class="token operator">*</span>k<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span>    qdwzqe w <span class="token operator">==</span> <span class="token number">1</span>    g <span class="token operator">=</span> hkde<span class="token punctuation">(</span><span class="token string">'gyrj.wiw'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">)</span>gyrj <span class="token operator">=</span> g<span class="token punctuation">.</span>qdra<span class="token punctuation">(</span><span class="token punctuation">)</span>        btj1 <span class="token operator">=</span> <span class="token string">""</span>btj2 <span class="token operator">=</span> <span class="token string">""</span>ghq p pe qrejd<span class="token punctuation">(</span>yde<span class="token punctuation">(</span>gyrj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pg tdkrqrwd<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>        btj2 <span class="token operator">+=</span> gyrj<span class="token punctuation">[</span>p<span class="token punctuation">]</span>    dytd<span class="token punctuation">:</span>        btj1 <span class="token operator">+=</span> gyrj<span class="token punctuation">[</span>p<span class="token punctuation">]</span>k1 <span class="token operator">=</span> jdw_r_kqpbd<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>k2 <span class="token operator">=</span> jdw_r_kqpbd<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>k3 <span class="token operator">=</span> jdw_r_kqpbd<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>e1 <span class="token operator">=</span> k1<span class="token operator">*</span>k2e2 <span class="token operator">=</span> k1<span class="token operator">*</span>k3d <span class="token operator">=</span> 0i1001x1 <span class="token operator">=</span> dexqlkw<span class="token punctuation">(</span>btj1<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e1<span class="token punctuation">)</span>x2 <span class="token operator">=</span> dexqlkw<span class="token punctuation">(</span>btj2<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>kqpew<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>kqpew<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>d1 <span class="token operator">=</span> 0i1001d2 <span class="token operator">=</span> 0i101k4 <span class="token operator">=</span> jdw_r_kqpbd<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>k5 <span class="token operator">=</span> jdw_r_kqpbd<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>e3 <span class="token operator">=</span> k4<span class="token operator">*</span>k5x1 <span class="token operator">=</span> ezb_wh_ulwdt<span class="token punctuation">(</span>khf<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> d1<span class="token punctuation">,</span> e3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dexhad<span class="token punctuation">(</span><span class="token string">'mdi'</span><span class="token punctuation">)</span>x2 <span class="token operator">=</span> ezb_wh_ulwdt<span class="token punctuation">(</span>khf<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> e3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dexhad<span class="token punctuation">(</span><span class="token string">'mdi'</span><span class="token punctuation">)</span>kqpew<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>kqpew<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>kqpew<span class="token punctuation">(</span>urtd64<span class="token punctuation">.</span>u64dexhad<span class="token punctuation">(</span>ezb_wh_ulwdt<span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>kqpew<span class="token punctuation">(</span>urtd64<span class="token punctuation">.</span>u64dexhad<span class="token punctuation">(</span>ezb_wh_ulwdt<span class="token punctuation">(</span>e3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>n1.encrypted</p><p>2639c28e3609a4a8c953cca9c326e8e062756305ae8aee6efcd346458aade3ee8c2106ab9dfe5f470804f366af738aa493fd2dc26cb249a922e121287f3eddec0ed8dea89747dc57aed7cd2089d75c23a69bf601f490a64f73f6a583081ae3a7ed52238c13a95d3322065adba9053ee5b12f1de1873dbad9fbf4a50a2f58088df0fddfe2ed8ca1118c81268c8c0fd5572494276f4e48b5eb424f116e6f5e9d66da1b6b3a8f102539b690c1636e82906a46f3c5434d5b04ed7938861f8d453908970eccef07bf13f723d6fdd26a61be8b9462d0ddfbedc91886df194ea022e56c1780aa6c76b9f1c7d5ea743dc75cec3c805324e90ea577fa396a1effdafa3090<br>42ff1157363d9cd10da64eb4382b6457ebb740dbef40ade9b24a174d0145adaa0115d86aa2fc2a41257f2b62486eaebb655925dac78dd8d13ab405aef5b8b8f9830094c712193500db49fb801e1368c73f88f6d8533c99c8e7259f8b9d1c926c47215ed327114f235ba8c873af7a0052aa2d32c52880db55c5615e5a1793b690c37efdd5e503f717bb8de716303e4d6c4116f62d81be852c5d36ef282a958d8c82cf3b458dcc8191dcc7b490f227d1562b1d57fbcf7bf4b78a5d90cd385fd79c8ca4688e7d62b3204aeaf9692ba4d4e44875eaa63642775846434f9ce51d138ca702d907849823b1e86896e4ea6223f93fae68b026cfe5fa5a665569a9e3948a</p><p>n2&amp;n3</p><p>PVNHb2BfGAnmxLrbKhgsYXRwWIL9eOj6K0s3I0slKHCTXTAUtZh3T0r+RoSlhpO3+77AY8P7WETYz2Jzuv5FV/mMODoFrM5fMyQsNt90VynR6J3Jv+fnPJPsm2hJ1Fqt7EKaVRwCbt6a4BdcRoHJsYN/+eh7k/X+FL5XM7viyvQxyFawQrhSV79FIoX6xfjtGW+uAeVF7DScRcl49dlwODhFD7SeLqzoYDJPIQS+VSb3YtvrDgdV+EhuS1bfWvkkXRijlJEpLrgWYmMdfsYX8u/+Ylf5xcBGn3hv1YhQrBCg77AHuUF2w/gJ/ADHFiMcH3ux3nqOsuwnbGSr7jA6Cw==<br>TmNVbWUhCXR1od3gBpM+HGMKK/4ErfIKITxomQ/QmNCZlzmmsNyPXQBiMEeUB8udO7lWjQTYGjD6k21xjThHTNDG4z6C2cNNPz73VIaNTGz0hrh6CmqDowFbyrk+rv53QSkVKPa8EZnFKwGz9B3zXimm1D+01cov7V/ZDfrHrEjsDkgK4ZlrQxPpZAPl+yqGlRK8soBKhY/PF3/GjbquRYeYKbagpUmWOhLnF4/+DP33ve/EpaSAPirZXzf8hyatL4/5tAZ0uNq9W6T4GoMG+N7aS2GeyUA2sLJMHymW4cFK5l5kUvjslRdXOHTmz5eHxqIV6TmSBQRgovUijlNamQ==</p><p>从题目来看1、3、4的文件内容都是加密后的<br>所以解密要从第二文件入手第二个文件看起来像python加密脚本，但是好像经过什么加密，经观察和尝试得知该加密是凯撒（替换）加密<br>上脚本，解密脚本如下</p><pre class=" language-python"><code class="language-python">cpdic <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">:</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">:</span> <span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"q"</span><span class="token punctuation">:</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token string">"h"</span><span class="token punctuation">:</span> <span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"u"</span><span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"t"</span><span class="token punctuation">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">:</span> <span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"k"</span><span class="token punctuation">:</span> <span class="token string">"p"</span><span class="token punctuation">,</span>    <span class="token string">"w"</span><span class="token punctuation">:</span> <span class="token string">"t"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">:</span> <span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">:</span> <span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">:</span> <span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token string">"l"</span><span class="token punctuation">:</span> <span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">:</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token string">"m"</span><span class="token punctuation">:</span> <span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"j"</span><span class="token punctuation">:</span> <span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">:</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"v"</span><span class="token punctuation">:</span> <span class="token string">"k"</span><span class="token punctuation">}</span>f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"D:\\bandzip 解压\\Downloads\\encryption.encrypted"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> data1 <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>listdata1 <span class="token operator">=</span> list<span class="token punctuation">(</span>data1<span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> strindex <span class="token keyword">in</span> listdata1<span class="token punctuation">:</span>    <span class="token keyword">if</span> strindex <span class="token keyword">in</span> cpdic<span class="token punctuation">:</span>        listdata1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cpdic<span class="token punctuation">[</span>strindex<span class="token punctuation">]</span>    i <span class="token operator">+=</span> <span class="token number">1</span>s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>listdata1<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p>运行得到解密后的第二个文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> is_prime<span class="token keyword">from</span> os <span class="token keyword">import</span> urandom<span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">bytes_to_num</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> int<span class="token punctuation">(</span>b<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">num_to_bytes</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> hex<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    b <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token operator">+</span> b <span class="token keyword">if</span> len<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> b    <span class="token keyword">return</span> b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_a_prime</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    random_seed <span class="token operator">=</span> urandom<span class="token punctuation">(</span>l<span class="token punctuation">)</span>    num <span class="token operator">=</span> bytes_to_num<span class="token punctuation">(</span>random_seed<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> is_prime<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        num<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">return</span> num<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> bytes_to_num<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    p <span class="token operator">=</span> pow<span class="token punctuation">(</span>p<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">return</span> num_to_bytes<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">separate</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">4</span>    t <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span>    <span class="token keyword">return</span> t <span class="token operator">==</span> <span class="token number">1</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'flag.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        msg1 <span class="token operator">=</span> <span class="token string">""</span>msg2 <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> separate<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>        msg2 <span class="token operator">+=</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        msg1 <span class="token operator">+=</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span>p1 <span class="token operator">=</span> get_a_prime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> get_a_prime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>p3 <span class="token operator">=</span> get_a_prime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>n1 <span class="token operator">=</span> p1<span class="token operator">*</span>p2n2 <span class="token operator">=</span> p1<span class="token operator">*</span>p3e <span class="token operator">=</span> <span class="token number">0x1001</span>c1 <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>msg1<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n1<span class="token punctuation">)</span>c2 <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>msg2<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span>e1 <span class="token operator">=</span> <span class="token number">0x1001</span>e2 <span class="token operator">=</span> <span class="token number">0x101</span>p4 <span class="token operator">=</span> get_a_prime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>p5 <span class="token operator">=</span> get_a_prime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>n3 <span class="token operator">=</span> p4<span class="token operator">*</span>p5c1 <span class="token operator">=</span> num_to_bytes<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> n3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>c2 <span class="token operator">=</span> num_to_bytes<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> n3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>num_to_bytes<span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>num_to_bytes<span class="token punctuation">(</span>n3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>经过以上文件分析<br>写出脚本如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#python 2</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">bytes_to_num</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> int<span class="token punctuation">(</span>b<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">num_to_bytes</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> hex<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    b <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token operator">+</span> b <span class="token keyword">if</span> len<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> b    <span class="token keyword">return</span> b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>b1<span class="token operator">=</span><span class="token string">"PVNHb2BfGAnmxLrbKhgsYXRwWIL9eOj6K0s3I0slKHCTXTAUtZh3T0r+RoSlhpO3+77AY8P7WETYz2Jzuv5FV/mMODoFrM5fMyQsNt90VynR6J3Jv+fnPJPsm2hJ1Fqt7EKaVRwCbt6a4BdcRoHJsYN/+eh7k/X+FL5XM7viyvQxyFawQrhSV79FIoX6xfjtGW+uAeVF7DScRcl49dlwODhFD7SeLqzoYDJPIQS+VSb3YtvrDgdV+EhuS1bfWvkkXRijlJEpLrgWYmMdfsYX8u/+Ylf5xcBGn3hv1YhQrBCg77AHuUF2w/gJ/ADHFiMcH3ux3nqOsuwnbGSr7jA6Cw=="</span>b2<span class="token operator">=</span><span class="token string">"TmNVbWUhCXR1od3gBpM+HGMKK/4ErfIKITxomQ/QmNCZlzmmsNyPXQBiMEeUB8udO7lWjQTYGjD6k21xjThHTNDG4z6C2cNNPz73VIaNTGz0hrh6CmqDowFbyrk+rv53QSkVKPa8EZnFKwGz9B3zXimm1D+01cov7V/ZDfrHrEjsDkgK4ZlrQxPpZAPl+yqGlRK8soBKhY/PF3/GjbquRYeYKbagpUmWOhLnF4/+DP33ve/EpaSAPirZXzf8hyatL4/5tAZ0uNq9W6T4GoMG+N7aS2GeyUA2sLJMHymW4cFK5l5kUvjslRdXOHTmz5eHxqIV6TmSBQRgovUijlNamQ=="</span>n2<span class="token operator">=</span>bytes_to_num<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">)</span>n3<span class="token operator">=</span>bytes_to_num<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span>cn1<span class="token operator">=</span><span class="token number">0x2639c28e3609a4a8c953cca9c326e8e062756305ae8aee6efcd346458aade3ee8c2106ab9dfe5f470804f366af738aa493fd2dc26cb249a922e121287f3eddec0ed8dea89747dc57aed7cd2089d75c23a69bf601f490a64f73f6a583081ae3a7ed52238c13a95d3322065adba9053ee5b12f1de1873dbad9fbf4a50a2f58088df0fddfe2ed8ca1118c81268c8c0fd5572494276f4e48b5eb424f116e6f5e9d66da1b6b3a8f102539b690c1636e82906a46f3c5434d5b04ed7938861f8d453908970eccef07bf13f723d6fdd26a61be8b9462d0ddfbedc91886df194ea022e56c1780aa6c76b9f1c7d5ea743dc75cec3c805324e90ea577fa396a1effdafa3090</span>cn2<span class="token operator">=</span><span class="token number">0x42ff1157363d9cd10da64eb4382b6457ebb740dbef40ade9b24a174d0145adaa0115d86aa2fc2a41257f2b62486eaebb655925dac78dd8d13ab405aef5b8b8f9830094c712193500db49fb801e1368c73f88f6d8533c99c8e7259f8b9d1c926c47215ed327114f235ba8c873af7a0052aa2d32c52880db55c5615e5a1793b690c37efdd5e503f717bb8de716303e4d6c4116f62d81be852c5d36ef282a958d8c82cf3b458dcc8191dcc7b490f227d1562b1d57fbcf7bf4b78a5d90cd385fd79c8ca4688e7d62b3204aeaf9692ba4d4e44875eaa63642775846434f9ce51d138ca702d907849823b1e86896e4ea6223f93fae68b026cfe5fa5a665569a9e3948a</span>e1 <span class="token operator">=</span> <span class="token number">0x1001</span>e2 <span class="token operator">=</span> <span class="token number">0x101</span><span class="token keyword">def</span> <span class="token function">gongmogongji</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">egcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> a<span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> egcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span>            <span class="token keyword">return</span> y<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">//</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> y    s <span class="token operator">=</span> egcd<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>    s1 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    s2 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> s1 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        s1 <span class="token operator">=</span> <span class="token operator">-</span> s1        c1 <span class="token operator">=</span> invert<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">elif</span> s2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        s2 <span class="token operator">=</span> <span class="token operator">-</span> s2        c2 <span class="token operator">=</span> invert<span class="token punctuation">(</span>c2<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> pow<span class="token punctuation">(</span>c2<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n    <span class="token keyword">return</span> mresult <span class="token operator">=</span> gongmogongji<span class="token punctuation">(</span>n3<span class="token punctuation">,</span> cn1<span class="token punctuation">,</span> cn2<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>n1<span class="token operator">=</span>resultp1<span class="token operator">=</span>gcd<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span>p2<span class="token operator">=</span>n1<span class="token operator">//</span>p1p3<span class="token operator">=</span>n2<span class="token operator">//</span>p1phi1<span class="token operator">=</span><span class="token punctuation">(</span>p1<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p2<span class="token number">-1</span><span class="token punctuation">)</span>phi2<span class="token operator">=</span><span class="token punctuation">(</span>p1<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p3<span class="token number">-1</span><span class="token punctuation">)</span>c1<span class="token operator">=</span><span class="token string">"1240198b148089290e375b999569f0d53c32d356b2e95f5acee070f016b3bef243d0b5e46d9ad7aa7dfe2f21bda920d0ac7ce7b1e48f22b2de410c6f391ce7c4347c65ffc9704ecb3068005e9f35cbbb7b27e0f7a18f4f42ae572d77aaa3ee189418d6a07bab7d93beaa365c98349d8599eb68d21313795f380f05f5b3dfdc6272635ede1f83d308c0fdb2baf444b9ee138132d0d532c3c7e60efb25b9bf9cb62dba9833aa3706344229bd6045f0877661a073b6deef2763452d0ad7ab3404ba494b93fd6dfdf4c28e4fe83a72884a99ddf15ca030ace978f2da87b79b4f504f1d15b5b96c654f6cd5179b72ed5f84d3a16a8f0d5bf6774e7fd98d27bf3c9839"</span>c2<span class="token operator">=</span><span class="token string">"129d5d4ab3f9e8017d4e6761702467bbeb1b884b6c4f8ff397d078a8c41186a3d52977fa2307d5b6a0ad01fedfc3ba7b70f776ba3790a43444fb954e5afd64b1a3abeb6507cf70a5eb44678a886adf81cb4848a35afb4db7cd7818f566c7e6e2911f5ababdbdd2d4ff9825827e58d48d5466e021a64599b3e867840c07e29582961f81643df07f678a61a9f9027ebd34094e272dfbdc4619fa0ac60f0189af785df77e7ec784e086cf692a7bf7113a7fb8446a65efa8b431c6f72c14bcfa49c9b491fb1d87f2570059e0f13166a85bb555b40549f45f04bc5dbd09d8b858a5382be6497d88197ffb86381085756365bd757ec3cdfa8a77ba1728ec2de596c5ab"</span>e <span class="token operator">=</span> <span class="token number">0x1001</span>d1<span class="token operator">=</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi1<span class="token punctuation">)</span>d2<span class="token operator">=</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi2<span class="token punctuation">)</span>cipher1<span class="token operator">=</span>bytes_to_num<span class="token punctuation">(</span>c1<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cipher2<span class="token operator">=</span>bytes_to_num<span class="token punctuation">(</span>c2<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m1<span class="token operator">=</span>long_to_bytes<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>cipher1<span class="token punctuation">,</span>d1<span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token punctuation">)</span>m2<span class="token operator">=</span>long_to_bytes<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>cipher2<span class="token punctuation">,</span>d2<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> m1<span class="token punctuation">,</span>m2flag<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag<span class="token operator">+=</span>m1<span class="token punctuation">[</span>i<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">else</span> <span class="token punctuation">:</span>        flag<span class="token operator">+=</span>m2<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">print</span> flag<span class="token comment" spellcheck="true">#XMAN{CRYPT0_I5_50_Interestingvim rsa.py}</span></code></pre><p>得到flag这道题目不简单，运用古典加密中的凯撒加密，现代加密中的rsa,真的是满满的干货。<br><strong>[NPUCTF2020]认清形势，建立信心</strong><br>题目</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> flagp <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token comment" spellcheck="true"># Hidden</span>q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qm <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">.</span>strip<span class="token punctuation">(</span>b<span class="token string">"npuctf{"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span>b<span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c <span class="token operator">=</span> pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pow<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pow<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''169169912654178128509160179202518818742414340358553002064450'''</span></code></pre><p>这是rsa里面中建立方程来求解的题型。<br>c = 169169912654178<br>X = 2^e mod n = 128509160179202<br>Y = 4^e mod n = 518818742414340<br>Z = 8^e mod n = 358553002064450<br>根据上面的三个式子我们可以得到n和e，又因为n = p*q<br>所以解密脚本如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2<span class="token keyword">import</span> sympyc <span class="token operator">=</span> <span class="token number">169169912654178</span>x <span class="token operator">=</span> <span class="token number">128509160179202</span>y <span class="token operator">=</span> <span class="token number">518818742414340</span>z <span class="token operator">=</span> <span class="token number">358553002064450</span><span class="token keyword">print</span><span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span>y<span class="token punctuation">,</span>x<span class="token operator">*</span>y<span class="token operator">-</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span>n<span class="token operator">=</span><span class="token number">1054494004042394</span><span class="token operator">//</span><span class="token number">2</span>p<span class="token operator">=</span> <span class="token number">18195301</span>q<span class="token operator">=</span> <span class="token number">28977097</span>e<span class="token operator">=</span>sympy<span class="token punctuation">.</span>discrete_log<span class="token punctuation">(</span>n<span class="token punctuation">,</span>x<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>d<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{b'345y!}</span></code></pre><p><strong>[BJDCTF2020]伏羲六十四卦</strong><br>题目<br>ciphertext.txt:</p><pre><code>这是什么，怎么看起来像是再算64卦！！！密文:升随临损巽睽颐萃小过讼艮颐小过震蛊屯未济中孚艮困恒晋升损蛊萃蛊未济巽解艮贲未济观豫损蛊晋噬嗑晋旅解大畜困未济随蒙升解睽未济井困未济旅萃未济震蒙未济师涣归妹大有嗯？为什么还有个b呢?b=7flag：请按照格式BJD{}</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#我有没有用呢？</span><span class="token comment" spellcheck="true"># -- coding:UTF-8 --</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> flag<span class="token keyword">def</span> <span class="token function">encrpyt5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    enc<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">:</span>        enc<span class="token operator">+=</span>chr<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">*</span><span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token operator">+</span><span class="token number">97</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp<span class="token operator">=</span><span class="token string">''</span>    offset<span class="token operator">=</span><span class="token number">5</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp<span class="token operator">+=</span>chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>offset<span class="token operator">-</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span></code></pre><p>通过百度查询伏羲六十四卦的卦象代表的数字用二进制表示如下所示：<br>dic={‘坤’: ‘000000’, ‘剥’: ‘000001’, ‘比’: ‘000010’, ‘观’: ‘000011’, ‘豫’: ‘000100’, ‘晋’: ‘000101’, ‘萃’: ‘000110’, ‘否’: ‘000111’, ‘谦’: ‘001000’, ‘艮’: ‘001001’, ‘蹇’: ‘001010’, ‘渐’: ‘001011’, ‘小过’: ‘001100’, ‘旅’: ‘001101’, ‘咸’: ‘001110’, ‘遁’: ‘001111’, ‘师’: ‘010000’, ‘蒙’: ‘010001’, ‘坎’: ‘010010’, ‘涣’: ‘010011’, ‘解’: ‘010100’, ‘未济’: ‘010101’, ‘困’: ‘010110’, ‘讼’: ‘010111’, ‘升’: ‘011000’, ‘蛊’: ‘011001’, ‘井’: ‘011010’, ‘巽’: ‘011011’, ‘恒’: ‘011100’, ‘鼎’: ‘011101’, ‘大过’: ‘011110’, ‘姤’: ‘011111’, ‘复’: ‘100000’, ‘颐’: ‘100001’, ‘屯’: ‘100010’, ‘益’: ‘100011’, ‘震’: ‘100100’, ‘噬嗑’: ‘100101’, ‘随’: ‘100110’, ‘无妄’: ‘100111’, ‘明夷’: ‘101000’, ‘贲’: ‘101001’, ‘既济’: ‘101010’, ‘家人’: ‘101011’, ‘丰’: ‘101100’, ‘离’: ‘101101’, ‘革’: ‘101110’, ‘同人’: ‘101111’, ‘临’: ‘110000’, ‘损’: ‘110001’, ‘节’: ‘110010’, ‘中孚’: ‘110011’, ‘归妹’: ‘110100’, ‘睽’: ‘110101’, ‘兑’: ‘110110’, ‘履’: ‘110111’, ‘泰’: ‘111000’, ‘大畜’: ‘111001’, ‘需’: ‘111010’, ‘小畜’: ‘111011’, ‘大壮’: ‘111100’, ‘大有’: ‘111101’, ‘夬’: ‘111110’, ‘乾’: ‘111111’}<br>所以解题脚如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decrypt4</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token string">''</span>    offset <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp<span class="token operator">+=</span>chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>offset<span class="token operator">+</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> temp<span class="token keyword">def</span> <span class="token function">decrypt5</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        enc <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">:</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">97</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">+</span><span class="token number">26</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token operator">%</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    enc<span class="token operator">+=</span>chr<span class="token punctuation">(</span><span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">97</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">+</span><span class="token number">26</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token operator">//</span>a<span class="token operator">+</span><span class="token number">97</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span>s<span class="token operator">=</span><span class="token string">'升随临损巽睽颐萃小过讼艮颐小过震蛊屯未济中孚艮困恒晋升损蛊萃蛊未济巽解艮贲未济观豫损蛊晋噬嗑晋旅解大畜困未济随蒙升解睽未济井困未济旅萃未济震蒙未济师涣归妹大有'</span>dic<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'坤'</span><span class="token punctuation">:</span> <span class="token string">'000000'</span><span class="token punctuation">,</span> <span class="token string">'剥'</span><span class="token punctuation">:</span> <span class="token string">'000001'</span><span class="token punctuation">,</span> <span class="token string">'比'</span><span class="token punctuation">:</span> <span class="token string">'000010'</span><span class="token punctuation">,</span> <span class="token string">'观'</span><span class="token punctuation">:</span> <span class="token string">'000011'</span><span class="token punctuation">,</span> <span class="token string">'豫'</span><span class="token punctuation">:</span> <span class="token string">'000100'</span><span class="token punctuation">,</span> <span class="token string">'晋'</span><span class="token punctuation">:</span> <span class="token string">'000101'</span><span class="token punctuation">,</span> <span class="token string">'萃'</span><span class="token punctuation">:</span> <span class="token string">'000110'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">:</span> <span class="token string">'000111'</span><span class="token punctuation">,</span> <span class="token string">'谦'</span><span class="token punctuation">:</span> <span class="token string">'001000'</span><span class="token punctuation">,</span> <span class="token string">'艮'</span><span class="token punctuation">:</span> <span class="token string">'001001'</span><span class="token punctuation">,</span> <span class="token string">'蹇'</span><span class="token punctuation">:</span> <span class="token string">'001010'</span><span class="token punctuation">,</span> <span class="token string">'渐'</span><span class="token punctuation">:</span> <span class="token string">'001011'</span><span class="token punctuation">,</span> <span class="token string">'小过'</span><span class="token punctuation">:</span> <span class="token string">'001100'</span><span class="token punctuation">,</span> <span class="token string">'旅'</span><span class="token punctuation">:</span> <span class="token string">'001101'</span><span class="token punctuation">,</span> <span class="token string">'咸'</span><span class="token punctuation">:</span> <span class="token string">'001110'</span><span class="token punctuation">,</span> <span class="token string">'遁'</span><span class="token punctuation">:</span> <span class="token string">'001111'</span><span class="token punctuation">,</span> <span class="token string">'师'</span><span class="token punctuation">:</span> <span class="token string">'010000'</span><span class="token punctuation">,</span> <span class="token string">'蒙'</span><span class="token punctuation">:</span> <span class="token string">'010001'</span><span class="token punctuation">,</span> <span class="token string">'坎'</span><span class="token punctuation">:</span> <span class="token string">'010010'</span><span class="token punctuation">,</span> <span class="token string">'涣'</span><span class="token punctuation">:</span> <span class="token string">'010011'</span><span class="token punctuation">,</span> <span class="token string">'解'</span><span class="token punctuation">:</span> <span class="token string">'010100'</span><span class="token punctuation">,</span> <span class="token string">'未济'</span><span class="token punctuation">:</span> <span class="token string">'010101'</span><span class="token punctuation">,</span> <span class="token string">'困'</span><span class="token punctuation">:</span> <span class="token string">'010110'</span><span class="token punctuation">,</span> <span class="token string">'讼'</span><span class="token punctuation">:</span> <span class="token string">'010111'</span><span class="token punctuation">,</span> <span class="token string">'升'</span><span class="token punctuation">:</span> <span class="token string">'011000'</span><span class="token punctuation">,</span> <span class="token string">'蛊'</span><span class="token punctuation">:</span> <span class="token string">'011001'</span><span class="token punctuation">,</span> <span class="token string">'井'</span><span class="token punctuation">:</span> <span class="token string">'011010'</span><span class="token punctuation">,</span> <span class="token string">'巽'</span><span class="token punctuation">:</span> <span class="token string">'011011'</span><span class="token punctuation">,</span> <span class="token string">'恒'</span><span class="token punctuation">:</span> <span class="token string">'011100'</span><span class="token punctuation">,</span> <span class="token string">'鼎'</span><span class="token punctuation">:</span> <span class="token string">'011101'</span><span class="token punctuation">,</span> <span class="token string">'大过'</span><span class="token punctuation">:</span> <span class="token string">'011110'</span><span class="token punctuation">,</span> <span class="token string">'姤'</span><span class="token punctuation">:</span> <span class="token string">'011111'</span><span class="token punctuation">,</span> <span class="token string">'复'</span><span class="token punctuation">:</span> <span class="token string">'100000'</span><span class="token punctuation">,</span> <span class="token string">'颐'</span><span class="token punctuation">:</span> <span class="token string">'100001'</span><span class="token punctuation">,</span> <span class="token string">'屯'</span><span class="token punctuation">:</span> <span class="token string">'100010'</span><span class="token punctuation">,</span> <span class="token string">'益'</span><span class="token punctuation">:</span> <span class="token string">'100011'</span><span class="token punctuation">,</span> <span class="token string">'震'</span><span class="token punctuation">:</span> <span class="token string">'100100'</span><span class="token punctuation">,</span> <span class="token string">'噬嗑'</span><span class="token punctuation">:</span> <span class="token string">'100101'</span><span class="token punctuation">,</span> <span class="token string">'随'</span><span class="token punctuation">:</span> <span class="token string">'100110'</span><span class="token punctuation">,</span> <span class="token string">'无妄'</span><span class="token punctuation">:</span> <span class="token string">'100111'</span><span class="token punctuation">,</span> <span class="token string">'明夷'</span><span class="token punctuation">:</span> <span class="token string">'101000'</span><span class="token punctuation">,</span> <span class="token string">'贲'</span><span class="token punctuation">:</span> <span class="token string">'101001'</span><span class="token punctuation">,</span> <span class="token string">'既济'</span><span class="token punctuation">:</span> <span class="token string">'101010'</span><span class="token punctuation">,</span> <span class="token string">'家人'</span><span class="token punctuation">:</span> <span class="token string">'101011'</span><span class="token punctuation">,</span> <span class="token string">'丰'</span><span class="token punctuation">:</span> <span class="token string">'101100'</span><span class="token punctuation">,</span> <span class="token string">'离'</span><span class="token punctuation">:</span> <span class="token string">'101101'</span><span class="token punctuation">,</span> <span class="token string">'革'</span><span class="token punctuation">:</span> <span class="token string">'101110'</span><span class="token punctuation">,</span> <span class="token string">'同人'</span><span class="token punctuation">:</span> <span class="token string">'101111'</span><span class="token punctuation">,</span> <span class="token string">'临'</span><span class="token punctuation">:</span> <span class="token string">'110000'</span><span class="token punctuation">,</span> <span class="token string">'损'</span><span class="token punctuation">:</span> <span class="token string">'110001'</span><span class="token punctuation">,</span> <span class="token string">'节'</span><span class="token punctuation">:</span> <span class="token string">'110010'</span><span class="token punctuation">,</span> <span class="token string">'中孚'</span><span class="token punctuation">:</span> <span class="token string">'110011'</span><span class="token punctuation">,</span> <span class="token string">'归妹'</span><span class="token punctuation">:</span> <span class="token string">'110100'</span><span class="token punctuation">,</span> <span class="token string">'睽'</span><span class="token punctuation">:</span> <span class="token string">'110101'</span><span class="token punctuation">,</span> <span class="token string">'兑'</span><span class="token punctuation">:</span> <span class="token string">'110110'</span><span class="token punctuation">,</span> <span class="token string">'履'</span><span class="token punctuation">:</span> <span class="token string">'110111'</span><span class="token punctuation">,</span> <span class="token string">'泰'</span><span class="token punctuation">:</span> <span class="token string">'111000'</span><span class="token punctuation">,</span> <span class="token string">'大畜'</span><span class="token punctuation">:</span> <span class="token string">'111001'</span><span class="token punctuation">,</span> <span class="token string">'需'</span><span class="token punctuation">:</span> <span class="token string">'111010'</span><span class="token punctuation">,</span> <span class="token string">'小畜'</span><span class="token punctuation">:</span> <span class="token string">'111011'</span><span class="token punctuation">,</span> <span class="token string">'大壮'</span><span class="token punctuation">:</span> <span class="token string">'111100'</span><span class="token punctuation">,</span> <span class="token string">'大有'</span><span class="token punctuation">:</span> <span class="token string">'111101'</span><span class="token punctuation">,</span> <span class="token string">'夬'</span><span class="token punctuation">:</span> <span class="token string">'111110'</span><span class="token punctuation">,</span> <span class="token string">'乾'</span><span class="token punctuation">:</span> <span class="token string">'111111'</span><span class="token punctuation">}</span>li<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> k <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        k<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">continue</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        t<span class="token operator">=</span><span class="token string">''</span>        t<span class="token operator">=</span>t<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>        li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>        k<span class="token operator">=</span><span class="token number">1</span>ss<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span>enc<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    enc<span class="token operator">+=</span>chr<span class="token punctuation">(</span>eval<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token operator">+</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">import</span> base64<span class="token keyword">print</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span>x<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>x<span class="token operator">=</span>decrypt4<span class="token punctuation">(</span>x<span class="token punctuation">)</span>x<span class="token operator">=</span>decrypt5<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{bjdcongratulationsongettingtheflag}</span></code></pre><p><strong>[NPUCTF2020]共 模 攻 击</strong><br>题目<br>hint:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> hintm <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>hint<span class="token punctuation">)</span>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>c <span class="token operator">=</span> pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>p<span class="token punctuation">,</span> q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> getPrime<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qe1<span class="token punctuation">,</span> e2 <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> getPrime<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>c1<span class="token punctuation">,</span> c2 <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> c1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e2<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''10731697577128434210836295494509648970890030263373452094390528365528331853570968074920062199353352337222320248097844342932931723172828149786889317114239396296822243748702335879699607136383100687844154745350337807727661713204612815792303413961 17544211690361913917173092569380359609129411092068723748264445267330306960568217317081932701517598437808947506966426597954527875473550433453487141292177232622163991 1613454015951555289711148366977297613624544025937559371784736059448454437652633847111272619248126613500028992813732842041018588707201458398726700828844249'''</span></code></pre><p>task:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> flagflag <span class="token operator">=</span> flag<span class="token punctuation">.</span>strip<span class="token punctuation">(</span>b<span class="token string">"npuctf{"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span>b<span class="token string">"}"</span><span class="token punctuation">)</span>m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>p<span class="token punctuation">,</span> q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qe1<span class="token punctuation">,</span> e2 <span class="token operator">=</span> p<span class="token punctuation">,</span> qc1<span class="token punctuation">,</span> c2 <span class="token operator">=</span> pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span> pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''128205304743751985889679351195836799434324346996129753896234917982647254577214018524580290192396070591032007818847697193260130051396080104704981594190602854241936777324431673564677900773992273463534717009587530152480725448774018550562603894883079711995434332008363470321069097619786793617099517770260029108149968606542352752022173681301950898396080375583888845227375006111212715713351239815888079940438004685290021475706555976106396809777807794948803306694663897884970467103192133762283911380219763889251713077600300584569348987715894358362613172837439516145051368403646387069144244335667820449261116399556124121341989566853166416448316408476072940703716510748416699965603380497338943730666656667456274146023583837768495637484138572090891246105018219222267465595710692705776272469703739932909158740030049375350999465338363044226512016686534246611049299981674236577960786526527933966681954486377462298197949323271904405241585'''</span></code></pre><p>由题目得知该题目是rsa加密中的共模攻击的类型，所以直接根据以上加密脚本写解密脚本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> libnum <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> sympy <span class="token keyword">import</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">107316975771284342108362954945096489708900302633734520943905283655283318535709</span>e1 <span class="token operator">=</span> <span class="token number">2303413961</span>c1 <span class="token operator">=</span> <span class="token number">1754421169036191391717309256938035960912941109206872374826444526733030696056821731708193270151759843780894750696642659795452787547355043345348714129217723</span>e2 <span class="token operator">=</span> <span class="token number">2622163991</span>c2 <span class="token operator">=</span> <span class="token number">1613454015951555289711148366977297613624544025937559371784736059448454437652633847111272619248126613500028992813732842041018588707201458398726700828844249</span>n <span class="token operator">=</span>  <span class="token number">6807492006219935335233722232024809784434293293172317282814978688931711423939629682224374870233587969960713638310068784415474535033780772766171320461281579</span>s <span class="token operator">=</span> gcdext<span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span>c <span class="token operator">=</span> pow<span class="token punctuation">(</span>c1<span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">*</span>pow<span class="token punctuation">(</span>c2<span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#c = 19384002358725759679198917686763310349050988223627625096050800369760484237557</span>m <span class="token operator">=</span> nthroot_mod<span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>n2s<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>得到b’m.bit_length() &lt; 400’,看起来这并不是答案，所以的继续，</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> libnum <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span><span class="token operator">*</span>n <span class="token operator">=</span> <span class="token number">128205304743751985889679351195836799434324346996129753896234917982647254577214018524580290192396070591032007818847697193260130051396080104704981594190602854241936777324431673564677900773992273463534717009587530152480725448774018550562603894883079711995434332008363470321069097619786793617099517770260029108149</span>c1 <span class="token operator">=</span> <span class="token number">96860654235275202217368130195089839608037558388884522737500611121271571335123981588807994043800468529002147570655597610639680977780779494880330669466389788497046710319213376228391138021976388925171307760030058456934898771589435836261317283743951614505136840364638706914424433566782044926111639955612412134198</span>c2 <span class="token operator">=</span> <span class="token number">9566853166416448316408476072940703716510748416699965603380497338943730666656667456274146023583837768495637484138572090891246105018219222267465595710692705776272469703739932909158740030049375350999465338363044226512016686534246611049299981674236577960786526527933966681954486377462298197949323271904405241585</span>a <span class="token operator">=</span> c1<span class="token operator">+</span>c2b <span class="token operator">=</span> c1<span class="token operator">*</span>c2<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a = 106427507401691650533776606268030543324548306805584488340881108460215302001780649045082140067384306297497785054794169701530927082798998717147796265177082494273319180022953309137549878052025764276170773098393102683446915458123682447310617265418188192465923366892572673596378919944244343124060963227516817375783</span><span class="token comment" spellcheck="true"># b = 926651656671911333597022401968870409343942400492881255142377951759176631494915016941991504123810265329862246592861145719213675502795378053564904818765377025096483601036025012267103260702787555612216755188521913405305861451125814149409508425602231670292131422273268728629782633354498648021859614223672123489318899205627785426402597996319440198218774038390809403281952702730883306007226797632389267386912707857093556335846269954270572920361347019614365402744026533713442449916555425678184406380167614011131702418493073759816310890056281917310110034453007210415242707924141697749818907383248545179118594511927630223830</span><span class="token comment" spellcheck="true">#注意：这里用n2s会报错，因为py3编码的缘故，你用python2的long_to_bytes()就不会报错，在网上的在线工具先转16进制再转字符串也不会报错。</span>flag <span class="token operator">=</span> <span class="token number">4242839043019782000788118887372132807371568279472499477998758466224002905442227156537788110520335652385855</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{b'verrrrrrry_345yyyyyyy_rsaaaaaaa_righttttttt?'}</span></code></pre><p><strong>[SUCTF2019]MT</strong><br>题目<br>mt.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Random <span class="token keyword">import</span> random<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util <span class="token keyword">import</span> number<span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> m <span class="token operator">^</span> m <span class="token operator">>></span> <span class="token number">13</span>    m <span class="token operator">=</span> m <span class="token operator">^</span> m <span class="token operator">&lt;&lt;</span> <span class="token number">9</span> <span class="token operator">&amp;</span> <span class="token number">2029229568</span>    m <span class="token operator">=</span> m <span class="token operator">^</span> m <span class="token operator">&lt;&lt;</span> <span class="token number">17</span> <span class="token operator">&amp;</span> <span class="token number">2245263360</span>    m <span class="token operator">=</span> m <span class="token operator">^</span> m <span class="token operator">>></span> <span class="token number">19</span>    <span class="token keyword">return</span> m<span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> len<span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span>    new_message <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        block <span class="token operator">=</span> message<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">4</span> <span class="token punctuation">:</span> i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span>        block <span class="token operator">=</span> number<span class="token punctuation">.</span>bytes_to_long<span class="token punctuation">(</span>block<span class="token punctuation">)</span>        block <span class="token operator">=</span> convert<span class="token punctuation">(</span>block<span class="token punctuation">)</span>        block <span class="token operator">=</span> number<span class="token punctuation">.</span>long_to_bytes<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        new_message <span class="token operator">+=</span> block    <span class="token keyword">return</span> new_messagetransformed_flag <span class="token operator">=</span> transform<span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'transformed_flag:'</span><span class="token punctuation">,</span> transformed_flag<span class="token comment" spellcheck="true"># transformed_flag: 641460a9e3953b1aaa21f3a2</span></code></pre><p>题目告诉了我们加密算法，我们直接读懂这个脚本，然后写出解密脚本：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#python 2</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Random <span class="token keyword">import</span> random<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util <span class="token keyword">import</span> number<span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> m <span class="token operator">^</span> m <span class="token operator">>></span> <span class="token number">13</span>    m <span class="token operator">=</span> m <span class="token operator">^</span> m <span class="token operator">&lt;&lt;</span> <span class="token number">9</span> <span class="token operator">&amp;</span> <span class="token number">2029229568</span>    m <span class="token operator">=</span> m <span class="token operator">^</span> m <span class="token operator">&lt;&lt;</span> <span class="token number">17</span> <span class="token operator">&amp;</span> <span class="token number">2245263360</span>    m <span class="token operator">=</span> m <span class="token operator">^</span> m <span class="token operator">>></span> <span class="token number">19</span>    <span class="token keyword">return</span> m<span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> len<span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span>    new_message <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        block <span class="token operator">=</span> message<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">4</span> <span class="token punctuation">:</span> i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span>        block <span class="token operator">=</span> number<span class="token punctuation">.</span>bytes_to_long<span class="token punctuation">(</span>block<span class="token punctuation">)</span>        block <span class="token operator">=</span> convert<span class="token punctuation">(</span>block<span class="token punctuation">)</span>        block <span class="token operator">=</span> number<span class="token punctuation">.</span>long_to_bytes<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        new_message <span class="token operator">+=</span> block    <span class="token keyword">return</span> new_message<span class="token comment" spellcheck="true">#transformed_flag = transform(flag[5:-1].decode('hex')).encode('hex')</span><span class="token comment" spellcheck="true">#print 'transformed_flag:', transformed_flag</span><span class="token comment" spellcheck="true"># transformed_flag: 641460a9e3953b1aaa21f3a2</span>transformed_flag <span class="token operator">=</span> <span class="token string">"641460a9e3953b1aaa21f3a2"</span><span class="token keyword">def</span> <span class="token function">decodef</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> flag    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> t        t <span class="token operator">=</span> transform<span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> flag<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x            <span class="token keyword">break</span>        <span class="token keyword">print</span> decodef<span class="token punctuation">(</span>transformed_flag<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{84b45f89af22ce7e67275bdc}</span></code></pre><p><strong>[NCTF2019]Sore</strong><br>题目<br>ciphertext.text<br>nsfAIHFrMuLynuCApeEstxJOzniQuyBVfAChDEznppfAiEIDcyNFBsCjsLvGlDtqztuaHvHbCmuyGNsIMhGlDtbotCoDzDjhyBzHGfHGfoHsuhlssIMvwlixBHHGfDRjoCKrapNIwqNyuxIBACQhtMwCmMCfEBpsrzEuiLGBoMipTkxrznoHfAkqwzvxuzCzDbLyApCGvjpqxkuwpgsLrqsVfCRwzlFmtlyrhuyEiivruFRpCRjkEDrqEqthyGwgsLnQvHmtzwDEznopBpsDOxvgBGIKzurFQxwQxkptutxzmfeLFQoRpJRvrpHxilwqeqMeiiIGBsQpCCvrptAlHsDnuRltmHuCGFpsBcwnsEblsswEPwerNpIADpJRCvwQxrntJltNpfAuFBwRstytoyvcepwtwqNlmmNGFsJjsQvkyvrkrstxJOzniQvNvzdDUdyJzjqzsErqxEjguyFMNwtPjsDwjoDfCdxzvftNGyzKjCEjsDxjqsjGMqFpimGpIADpJRFkovHJlpthyHnpqyBOHhmDMmoosClwiehEzmffOGMvDxDSnnyLuXFlwYEPvosQxCrRxwCpDswHopxDruvEzsOgBsXxDLvvlMpezwpnOOsjrANzHDsLCnoqLCepgtaHNHfpysNHGfOMqkyvlozxHetJGfvNuCGKjIRnoDLAbpyxnJCpqeLxuBCuwCpGpOnkEywrEPrisHrItSiDQgvtLCipyJnDzwtxBnNoKxpWuCxwuiqwDmIJxffIqSGSbzGpqlDnXvNIwqNzoxBrQoXuDRjonsAozzHeBjweTBBypDtIGnvHGDiosItqGvusGrIFzoNRjsyykrExweMvDtsLGItVbAIkxrFnuEyDmuIzxMNBIyziDJfyqLqbmjAtqOEiivnwyNgwCtmzsCgFxIfEMEiiBrFzNgxRdEEKqbHtJltIEmiNzygGfHyknVwnmJtJrxvyewNBSCTsHCnptxHlFiDnJHtohmuyKztHRkvwKxopfImuWFurIGuGRpGCcCDzntlxqevJCfEHLQoXxtIgzEynqEnCgsGztiLnHrBmDQgBEGCephprHJFtiFnHrXpJAqEwvBqlwItECpbvNuuHMvIRAwFKrZtyplMvJttFnSGhuLyuzwsHfyldhcvCjicGJzzztBvrlLBXxjHoDBlcsOGzwEuNWgkCKjdzBweDdHbwuyCHSmtIknezjqDtCeDDnfxBvHuzcDSvmlJAlFxtlIOsfCuyQoXtEJcIEznplrtsEIrtMNuIIFiIRjonsAozzHeBRltgFBMsCjCRjoHAwqpwIiCzzmhjuIsAfHyknTLFXDywevDCtxNvGsRitNtknLrZlqAyIvteeHLNvHovqjoAJxYlgAyvJChsNFBsVbHQwzAGBboyDbuNzsiuGGslbNzglpujrDjxtIvCpyHqWvQjHRokDaBXtihhuyterNFuMzoNRjsyyFepsXsqDouluGmvDqGMdkmDHoprtmrzCfhMuyKztHSrzzKnaEtqeIJCfeNzyRNzDSykyLClrtuoHvCjhyBHwSJHyknTCwbHxweFMzcevySrHelFgxDzntlxptyIJmmNGFsJjsypnLDufpfCdTWlohcHMsCuDEqDzLqbAfGkMDEilyEMvDxpQokosklFyIhuxlsvIHMsKZDSeyFDmkElttxzCpjzGBsFpsBcwEzrkrNBtEJmjkMuyGzjsgvrzMpeExweMvDoxABCBFuDypCHwAjpgJtICpemxaIMNvGCpyEYxlyNAlMvtujIESofpDLKClAmTpBtruMthlNGBsQfIFgxeznopBtruvqfAEvxGQjsGpqzFrqxtHtBTGfvSyCHSmtIknDswalktwFvCfrNFQsQfLykDtFpXCtJntJFuwCqyGHuIGpqzFCepgtnsCpteHquzKXwyvSoAmtlxXwuIEvtNBNvDxxLfyHOqbCjIhuTDfpFGBsSjrIgDDswamtJgxOzmhjuIsAfpRkmvwCQsjCIwvGfmNGIvDshFgGlKBqlssiDBCjkBGHsWuIMooSwAbTxpitrljxuFyqNosRcupLqbCjHtEAJpyLqIIFiIMqSDLjoEjsgyQtokBrLHGfGCuDzxCepiDuwCDiixyyBSntwqEvwnmtyZeuKtujIEGsRitQcsolqbyxweIvtevCtBHzgICtGlJmMwjpsuosbxMqyDQfHQkxrOqbyxDmuwzeCMnSGOmtyuoEGHlFNBeqItgmNFjvNfqCqBDGvbmtsyjCluhyCLsRttBvrpzniwtJtEAxfFOGcDTuIFgnzMpemfrkyIxztIpEsSBGCpDJGDdzsCaHDofxIBMvDbHIgnxwbepBpsBJzlmHtuHLfHMtDzxorysNYEPnpyFqNsKmHFgGlKwqEtDsEMpbxGruBXnDPgWlQkbTBxlBOsfryKNHHntgnvHsCZsDpIIvteKIGSCTsIGeupLhbDLDaxzlexBrHWKmqCqxEzrpmjCcxMthlNBPsQitPgSwDFXEhwyqdHfrNBPsQbCBukEvxtytCtxDDciHpBoMeHFgGpFCXyivoJJyulypuFQpJQgvdzntlqzetvwmeLBOBCjIgoolFBepBplAzoprwruzKuwCykJsAlFssiJosfrMuyGzusMyxzFCetxqiwwCpAHoyoSvEJqyvAwdzqshEMDfXBrHHGfrytBzMBbwxIaHOpeeHqcKzurFgnswAdzfGoKIobrxnLCTosrjoCwFbCjDnBTlcsOGzwUfDPusIGCepwzitNzoxBrLwCfpLfDswBlylIhuxlsvIHMsKxpQrvlQrkrBpsiHzliarNGHonMwBPQnpTyLaIKwbCCAAwSwtPAtlRIvlssfKIyzEFyNvDlxBuupHCqCDxnwOzhvuozCQuwCiywvAfylpntNzxeMBFroiDCdolFmFHfHsEMEpjusLoHeHFgnqsuizkutxzrphxnGvNsHCdEEamfosIsqTloCNuCBFpGBqkyQCetsvTxzEimHtQwSizGfCtKrcEmtyMvyuxItLoAuwCiywvAfylNoKClwiNBFsSuwConzACXyiCoJNlzeHLNvHovghDswHclqAovAEiiSsuzKpuDdEEACpmfsivTzvwuLuBXuwGpqEGCeprlhuIEiiLvxsVbHMxoCKqbrtIovAsfvBBLGDbCBekxwxspwIoCzjpyLvxsNorCvyzLqfDyxmuNsfwuvxbNJAJlEDLFXEhwyqdEimHxczKkJQvGlLleTxpitdrbzyuyFRpBCoyCwxcsjGdEPriLyEyUDuHMooxGAbEnrkuODTlyGICJuwCfyFyqlqkBeYHypxGnxoSzDScxJExopxweIvteMEAIKgvGPAEALqbEmxnwNrprHnMHzsIyiktFcepsplBJqbwOqxsMtwCikGwvblpxsIosfrMuyvDmsFgBsswazzIaDyDbmxVNGQbxLkxraCpDyprJDyhxIEuwMJzLqGeznkHmptICpemxvNrznCLgkCCriwjsmuNsfvynwvDexLoInGjqAtrkuOlohNBIyNvIKABpvqryyxnwClueHqJISjIMpwJznXoIDnJTzvAuANwSJHyknjGDZlsLeqMtueQuCzDPzyARFJAvFuIhEPrirIJsCTstEqxysvfDxNoKMCjhylIIVpCRioEQxrCtLnxJCtiIEuBXuwGpqdznhpuIhqIrjrAnLCTosRjyFyqAtiNoKHpbrCGQvzuNMwClAmVzzGeqGwzeLrHHFpxLikHsHXyDLhuMpBvyLIIQfpJnIrGrkrmDmuvquiLJuFCtHFgkDCnaxjneqCTteCqcADbCRkDEGxFHfHnJGJjrAGIvDsXPgkwDHativoxJxfezGyFVbGBuRFJAvFuCoMdDbmxgBsSixLiCDLjoEnCgiCpseHnHrApJEjDswAqthzeJvyekIGvoBlDLvrpyxaofBcqMCpyMrFxTtIGpDtEnQsjCsxzHbpErxoKmIFgGlQjozzCdyOEjpFFBsFpIFgBzOwezwHervnlXBrHGGfvMvyyACPsjLaLzousGruBCJLyxootjZvGDyyOmfkuANCQbxLnsvwjYlxIaHyTofOpEsStXQyolJClRtsABGEiiJnLsMuHypnxGCepwHaDypwiLLvCCzLCpDzNnolsssJJzevCtBHTosCtDswAlzkDfJCpdeLEIIRfAQqDswHtzzAdDOrfxMBuyDeIMvrpKtfytGaDTEimHtvISJHRwmvsAlFssoDOsffyAwvEpGOwsEwjtsnAeYBzutLrNHXtDymsyyFbEjHpuxtbpFLGMMfrIcxoEHmlsIscTsvrNvHuGbIPgkwDHdlAtmuLFjxynFCSpuNtyEwlqttCiDvHbCvHNWFpIQqkvwmXyDLaOdojhHGwoQfIFqErzRcpqIsEylnrBnJDXbAJqpDMmapsIhuRlzsFqjvNfqCmoALpltsvaHJFohuAxoQpJLfSHsBalrCnuvCceQyCBFJuCnDDGmXxswaFKJjjSBOKzoIRquyGFqsjIrKOsJhIANyMpLUjITLFXDoJsJOsbxMuyzNpzCfCzvjjysxcuOsfAuLMvDltNvqzAwdlwDuDylohuEIIMexLjoCturphDaJvyeeFyaCCJLGurJGDZzzAdLzmfiHGBsQfiFcDDsuiTrvoyIrusNrFzzcDSvSnGDiouGorvmmCNrFzXpJUjkEamfofutuMTxiHGBCLfpLfrzORdzyHisFlohuyFoMeLFcDDuqlzqXmIPAqsMrxHNhDRqxpPCclqAavOpsMArNCTuDDjoCwkrENsoDOqfiFyCyDjIgtolDuvotCtjCluwNHztCptQpDtFCbCjHtCzEpsGHwvQjvFvxzOJizyDfFzzqpyrMDDdxynvJLqfDtCeFNJdlInHoKzHRiEJLqbJmpvuCpsiEryDRbHIkxrEnfqNBgEDyheJCFMLzHCnpHznkTlDbqxvusMpBCNmCCzDdwyqprqeHdEtwOpBoRuJNknBMnpEnDnyIxzsJvHwNoXKgkyzxtotNoKFypAQuuHXpJPgqzAwdEtsoJDwmCIHxCHuiFgkyKFbCnHyEPoprNVNvHozgcwmMCezBsoYFypAcFQszsxRukDLDmtiFuuNEjsHQVwRoIyullvjpEmtruNEpjNuyAAvIFgupwyplxziDBxfeFBNCErJCuDtGwpEtDHuyCpzyBPsQmpQvclLDoofNwyOsulCFYBFmxQjlltnqsfIsyIEimMAyKOjrRwBpznpHwxtyIrTlyJuGOstRvIlxobnytdrPEwiLLACNeAMqutFpxyDLaOJyfxCzyKGfCQjoHwwqEtIhuGlemyFLCNnLyADswqbwqsoMItoxBrIHGfGUkxrVKXDptdCzHieNVNvNvvFvkmGDqlqAtxDDtxOszWIvHRhsyABepiIeBGtokSBOoApJRKntvwqvsDwMCluxBrBsKmIMukJaovzzLaDOEpoHBQHGfIPwDsamlyyznERHieNVNvHozydyFLrqTrHoHMJJxIyxGNnpLAzpGyipfqoKOtuEvBOHzmAgmxzOrpTxDrJJqnmMFyJDsNzqnJaClwipbEPEFzyAIzCTIPcnwsCbCfCdQxvmiSsIFHoHRcxnwRqsnCkYzGfrGvMGSipRiyovjjXfJryxpJxMsOBMzSMpDpNnoEjAlqIJcsxLuBXuwGpqTxHlFiDyEPDueLGGwRtxLioGwAvmtsy<br>task.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> string <span class="token keyword">import</span> ascii_letters<span class="token keyword">from</span> flag <span class="token keyword">import</span> flagctoi <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> ascii_letters<span class="token punctuation">.</span>index<span class="token punctuation">(</span>x<span class="token punctuation">)</span>itoc <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> ascii_letters<span class="token punctuation">[</span>x<span class="token punctuation">]</span>key <span class="token operator">=</span> flag<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'NCTF{}'</span><span class="token punctuation">)</span>len_key <span class="token operator">=</span> len<span class="token punctuation">(</span>key<span class="token punctuation">)</span>plaintext <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'plaintext.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>plain <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>p <span class="token keyword">for</span> p <span class="token keyword">in</span> plaintext <span class="token keyword">if</span> p <span class="token keyword">in</span> ascii_letters<span class="token punctuation">)</span>cipher <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span> itoc<span class="token punctuation">(</span> <span class="token punctuation">(</span> ctoi<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">+</span> ctoi<span class="token punctuation">(</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> len_key<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">52</span> <span class="token punctuation">)</span>  <span class="token keyword">for</span> i<span class="token punctuation">,</span>p <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>plain<span class="token punctuation">)</span> <span class="token punctuation">)</span>open<span class="token punctuation">(</span><span class="token string">'ciphertext.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span></code></pre><p>从题目中分析该题目是维吉尼亚密码<a href="https://www.guballa.de/vigenere-solver">Vigenere Solver</a><br>得到key = ‘vlbeunuozbpycklsjxlfpaq’<br><img src="/images/image-25.png" alt="Image text"><br>最后要区分大小写，把x改成X就是flag（。。。草）<br>至于为什么只把’x’改成大写，当然可以以ascii_letters为字母表另外写一个爆破程序，但是大可不必<br>或者通过解密，使得明文是一段有意义的文本<br>但是，其实可以耍小聪明：<br>设x为原文中的某个字符，y为key中对应于x的字符，z为cipher中对应于x的字符<br>若y为大写字母，则26&lt;=ctoi(y)&lt;=51，那么ctoi(x)+ctoi(y)大概率（至少大于50%的概率）会大于52，则ctoi(z)会小于ctoi(y)，故ctoi(z)-ctoi(y)小于0的次数较多的y极有可能是key中的大写字母<br>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> string <span class="token keyword">import</span> ascii_lettersctoi <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> ascii_letters<span class="token punctuation">.</span>index<span class="token punctuation">(</span>x<span class="token punctuation">)</span>cipher <span class="token operator">=</span> <span class="token string">'nsfAIHFrMuLynuCApeEstxJOzniQuyBVfAChDEznppfAiEIDcyNFBsCjsLvGlDtqztuaHvHbCmuyGNsIMhGlDtbotCoDzDjhyBzHGfHGfoHsuhlssIMvwlixBHHGfDRjoCKrapNIwqNyuxIBACQhtMwCmMCfEBpsrzEuiLGBoMipTkxrznoHfAkqwzvxuzCzDbLyApCGvjpqxkuwpgsLrqsVfCRwzlFmtlyrhuyEiivruFRpCRjkEDrqEqthyGwgsLnQvHmtzwDEznopBpsDOxvgBGIKzurFQxwQxkptutxzmfeLFQoRpJRvrpHxilwqeqMeiiIGBsQpCCvrptAlHsDnuRltmHuCGFpsBcwnsEblsswEPwerNpIADpJRCvwQxrntJltNpfAuFBwRstytoyvcepwtwqNlmmNGFsJjsQvkyvrkrstxJOzniQvNvzdDUdyJzjqzsErqxEjguyFMNwtPjsDwjoDfCdxzvftNGyzKjCEjsDxjqsjGMqFpimGpIADpJRFkovHJlpthyHnpqyBOHhmDMmoosClwiehEzmffOGMvDxDSnnyLuXFlwYEPvosQxCrRxwCpDswHopxDruvEzsOgBsXxDLvvlMpezwpnOOsjrANzHDsLCnoqLCepgtaHNHfpysNHGfOMqkyvlozxHetJGfvNuCGKjIRnoDLAbpyxnJCpqeLxuBCuwCpGpOnkEywrEPrisHrItSiDQgvtLCipyJnDzwtxBnNoKxpWuCxwuiqwDmIJxffIqSGSbzGpqlDnXvNIwqNzoxBrQoXuDRjonsAozzHeBjweTBBypDtIGnvHGDiosItqGvusGrIFzoNRjsyykrExweMvDtsLGItVbAIkxrFnuEyDmuIzxMNBIyziDJfyqLqbmjAtqOEiivnwyNgwCtmzsCgFxIfEMEiiBrFzNgxRdEEKqbHtJltIEmiNzygGfHyknVwnmJtJrxvyewNBSCTsHCnptxHlFiDnJHtohmuyKztHRkvwKxopfImuWFurIGuGRpGCcCDzntlxqevJCfEHLQoXxtIgzEynqEnCgsGztiLnHrBmDQgBEGCephprHJFtiFnHrXpJAqEwvBqlwItECpbvNuuHMvIRAwFKrZtyplMvJttFnSGhuLyuzwsHfyldhcvCjicGJzzztBvrlLBXxjHoDBlcsOGzwEuNWgkCKjdzBweDdHbwuyCHSmtIknezjqDtCeDDnfxBvHuzcDSvmlJAlFxtlIOsfCuyQoXtEJcIEznplrtsEIrtMNuIIFiIRjonsAozzHeBRltgFBMsCjCRjoHAwqpwIiCzzmhjuIsAfHyknTLFXDywevDCtxNvGsRitNtknLrZlqAyIvteeHLNvHovqjoAJxYlgAyvJChsNFBsVbHQwzAGBboyDbuNzsiuGGslbNzglpujrDjxtIvCpyHqWvQjHRokDaBXtihhuyterNFuMzoNRjsyyFepsXsqDouluGmvDqGMdkmDHoprtmrzCfhMuyKztHSrzzKnaEtqeIJCfeNzyRNzDSykyLClrtuoHvCjhyBHwSJHyknTCwbHxweFMzcevySrHelFgxDzntlxptyIJmmNGFsJjsypnLDufpfCdTWlohcHMsCuDEqDzLqbAfGkMDEilyEMvDxpQokosklFyIhuxlsvIHMsKZDSeyFDmkElttxzCpjzGBsFpsBcwEzrkrNBtEJmjkMuyGzjsgvrzMpeExweMvDoxABCBFuDypCHwAjpgJtICpemxaIMNvGCpyEYxlyNAlMvtujIESofpDLKClAmTpBtruMthlNGBsQfIFgxeznopBtruvqfAEvxGQjsGpqzFrqxtHtBTGfvSyCHSmtIknDswalktwFvCfrNFQsQfLykDtFpXCtJntJFuwCqyGHuIGpqzFCepgtnsCpteHquzKXwyvSoAmtlxXwuIEvtNBNvDxxLfyHOqbCjIhuTDfpFGBsSjrIgDDswamtJgxOzmhjuIsAfpRkmvwCQsjCIwvGfmNGIvDshFgGlKBqlssiDBCjkBGHsWuIMooSwAbTxpitrljxuFyqNosRcupLqbCjHtEAJpyLqIIFiIMqSDLjoEjsgyQtokBrLHGfGCuDzxCepiDuwCDiixyyBSntwqEvwnmtyZeuKtujIEGsRitQcsolqbyxweIvtevCtBHzgICtGlJmMwjpsuosbxMqyDQfHQkxrOqbyxDmuwzeCMnSGOmtyuoEGHlFNBeqItgmNFjvNfqCqBDGvbmtsyjCluhyCLsRttBvrpzniwtJtEAxfFOGcDTuIFgnzMpemfrkyIxztIpEsSBGCpDJGDdzsCaHDofxIBMvDbHIgnxwbepBpsBJzlmHtuHLfHMtDzxorysNYEPnpyFqNsKmHFgGlKwqEtDsEMpbxGruBXnDPgWlQkbTBxlBOsfryKNHHntgnvHsCZsDpIIvteKIGSCTsIGeupLhbDLDaxzlexBrHWKmqCqxEzrpmjCcxMthlNBPsQitPgSwDFXEhwyqdHfrNBPsQbCBukEvxtytCtxDDciHpBoMeHFgGpFCXyivoJJyulypuFQpJQgvdzntlqzetvwmeLBOBCjIgoolFBepBplAzoprwruzKuwCykJsAlFssiJosfrMuyGzusMyxzFCetxqiwwCpAHoyoSvEJqyvAwdzqshEMDfXBrHHGfrytBzMBbwxIaHOpeeHqcKzurFgnswAdzfGoKIobrxnLCTosrjoCwFbCjDnBTlcsOGzwUfDPusIGCepwzitNzoxBrLwCfpLfDswBlylIhuxlsvIHMsKxpQrvlQrkrBpsiHzliarNGHonMwBPQnpTyLaIKwbCCAAwSwtPAtlRIvlssfKIyzEFyNvDlxBuupHCqCDxnwOzhvuozCQuwCiywvAfylpntNzxeMBFroiDCdolFmFHfHsEMEpjusLoHeHFgnqsuizkutxzrphxnGvNsHCdEEamfosIsqTloCNuCBFpGBqkyQCetsvTxzEimHtQwSizGfCtKrcEmtyMvyuxItLoAuwCiywvAfylNoKClwiNBFsSuwConzACXyiCoJNlzeHLNvHovghDswHclqAovAEiiSsuzKpuDdEEACpmfsivTzvwuLuBXuwGpqEGCeprlhuIEiiLvxsVbHMxoCKqbrtIovAsfvBBLGDbCBekxwxspwIoCzjpyLvxsNorCvyzLqfDyxmuNsfwuvxbNJAJlEDLFXEhwyqdEimHxczKkJQvGlLleTxpitdrbzyuyFRpBCoyCwxcsjGdEPriLyEyUDuHMooxGAbEnrkuODTlyGICJuwCfyFyqlqkBeYHypxGnxoSzDScxJExopxweIvteMEAIKgvGPAEALqbEmxnwNrprHnMHzsIyiktFcepsplBJqbwOqxsMtwCikGwvblpxsIosfrMuyvDmsFgBsswazzIaDyDbmxVNGQbxLkxraCpDyprJDyhxIEuwMJzLqGeznkHmptICpemxvNrznCLgkCCriwjsmuNsfvynwvDexLoInGjqAtrkuOlohNBIyNvIKABpvqryyxnwClueHqJISjIMpwJznXoIDnJTzvAuANwSJHyknjGDZlsLeqMtueQuCzDPzyARFJAvFuIhEPrirIJsCTstEqxysvfDxNoKMCjhylIIVpCRioEQxrCtLnxJCtiIEuBXuwGpqdznhpuIhqIrjrAnLCTosRjyFyqAtiNoKHpbrCGQvzuNMwClAmVzzGeqGwzeLrHHFpxLikHsHXyDLhuMpBvyLIIQfpJnIrGrkrmDmuvquiLJuFCtHFgkDCnaxjneqCTteCqcADbCRkDEGxFHfHnJGJjrAGIvDsXPgkwDHativoxJxfezGyFVbGBuRFJAvFuCoMdDbmxgBsSixLiCDLjoEnCgiCpseHnHrApJEjDswAqthzeJvyekIGvoBlDLvrpyxaofBcqMCpyMrFxTtIGpDtEnQsjCsxzHbpErxoKmIFgGlQjozzCdyOEjpFFBsFpIFgBzOwezwHervnlXBrHGGfvMvyyACPsjLaLzousGruBCJLyxootjZvGDyyOmfkuANCQbxLnsvwjYlxIaHyTofOpEsStXQyolJClRtsABGEiiJnLsMuHypnxGCepwHaDypwiLLvCCzLCpDzNnolsssJJzevCtBHTosCtDswAlzkDfJCpdeLEIIRfAQqDswHtzzAdDOrfxMBuyDeIMvrpKtfytGaDTEimHtvISJHRwmvsAlFssoDOsffyAwvEpGOwsEwjtsnAeYBzutLrNHXtDymsyyFbEjHpuxtbpFLGMMfrIcxoEHmlsIscTsvrNvHuGbIPgkwDHdlAtmuLFjxynFCSpuNtyEwlqttCiDvHbCvHNWFpIQqkvwmXyDLaOdojhHGwoQfIFqErzRcpqIsEylnrBnJDXbAJqpDMmapsIhuRlzsFqjvNfqCmoALpltsvaHJFohuAxoQpJLfSHsBalrCnuvCceQyCBFJuCnDDGmXxswaFKJjjSBOKzoIRquyGFqsjIrKOsJhIANyMpLUjITLFXDoJsJOsbxMuyzNpzCfCzvjjysxcuOsfAuLMvDltNvqzAwdlwDuDylohuEIIMexLjoCturphDaJvyeeFyaCCJLGurJGDZzzAdLzmfiHGBsQfiFcDDsuiTrvoyIrusNrFzzcDSvSnGDiouGorvmmCNrFzXpJUjkEamfofutuMTxiHGBCLfpLfrzORdzyHisFlohuyFoMeLFcDDuqlzqXmIPAqsMrxHNhDRqxpPCclqAavOpsMArNCTuDDjoCwkrENsoDOqfiFyCyDjIgtolDuvotCtjCluwNHztCptQpDtFCbCjHtCzEpsGHwvQjvFvxzOJizyDfFzzqpyrMDDdxynvJLqfDtCeFNJdlInHoKzHRiEJLqbJmpvuCpsiEryDRbHIkxrEnfqNBgEDyheJCFMLzHCnpHznkTlDbqxvusMpBCNmCCzDdwyqprqeHdEtwOpBoRuJNknBMnpEnDnyIxzsJvHwNoXKgkyzxtotNoKFypAQuuHXpJPgqzAwdEtsoJDwmCIHxCHuiFgkyKFbCnHyEPoprNVNvHozgcwmMCezBsoYFypAcFQszsxRukDLDmtiFuuNEjsHQVwRoIyullvjpEmtruNEpjNuyAAvIFgupwyplxziDBxfeFBNCErJCuDtGwpEtDHuyCpzyBPsQmpQvclLDoofNwyOsulCFYBFmxQjlltnqsfIsyIEimMAyKOjrRwBpznpHwxtyIrTlyJuGOstRvIlxobnytdrPEwiLLACNeAMqutFpxyDLaOJyfxCzyKGfCQjoHwwqEtIhuGlemyFLCNnLyADswqbwqsoMItoxBrIHGfGUkxrVKXDptdCzHieNVNvNvvFvkmGDqlqAtxDDtxOszWIvHRhsyABepiIeBGtokSBOoApJRKntvwqvsDwMCluxBrBsKmIMukJaovzzLaDOEpoHBQHGfIPwDsamlyyznERHieNVNvHozydyFLrqTrHoHMJJxIyxGNnpLAzpGyipfqoKOtuEvBOHzmAgmxzOrpTxDrJJqnmMFyJDsNzqnJaClwipbEPEFzyAIzCTIPcnwsCbCfCdQxvmiSsIFHoHRcxnwRqsnCkYzGfrGvMGSipRiyovjjXfJryxpJxMsOBMzSMpDpNnoEjAlqIJcsxLuBXuwGpqTxHlFiDyEPDueLGGwRtxLioGwAvmtsy'</span>key <span class="token operator">=</span> <span class="token string">'vlbeunuozbpycklsjxlfpaq'</span>c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>count <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token punctuation">[</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    count<span class="token punctuation">[</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token punctuation">[</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctoi<span class="token punctuation">(</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> ctoi<span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        count<span class="token punctuation">[</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{vlbeunuozbpycklsjXlfpaq}</span></code></pre><p><a href="https://blog.csdn.net/weixin_52446095/article/details/119003999">参考博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 2021.7刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协会平台题目</title>
      <link href="2021/0615undefined.html"/>
      <url>2021/0615undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="pyre"><a href="#pyre" class="headerlink" title="pyre"></a>pyre</h2><p>题目是一个pyc文件先反汇编一下，得到py文件。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Embedded file name: pyre.py</span><span class="token keyword">import</span> binasciikey <span class="token operator">=</span> <span class="token number">35</span>flag <span class="token operator">=</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>ans <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> c <span class="token keyword">in</span> flag<span class="token punctuation">:</span>    ans <span class="token operator">+=</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">^</span> key<span class="token punctuation">)</span><span class="token keyword">if</span> binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span>ans<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'1a124715424713110e464510130e171a16100e1a4011120e164045151312151a1a141242'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'you are right!!'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'incorrect!!'</span><span class="token punctuation">)</span></code></pre><p>由以上代码分析可得，flag是由键盘输入的，通过字符转16进制ord()函数再与key异或得到该’1a124715424713110e464510130e171a16100e1a4011120e164045151312151a1a141242’<br>所以解题脚本人如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> binascii<span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token operator">=</span><span class="token string">''</span>    a <span class="token operator">=</span> bytearray<span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>        x <span class="token operator">=</span> i        x <span class="token operator">=</span> x<span class="token operator">^</span><span class="token number">35</span>        s <span class="token operator">+=</span>chr<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> sb <span class="token operator">=</span> <span class="token string">'1a124715424713110e464510130e171a16100e1a4011120e164045151312151a1a141242'</span>flag<span class="token operator">=</span>decode<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#hosectf{91d6ad02-ef30-4953-9c21-5cf60169971a}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界(crypto)</title>
      <link href="2021/0603undefined.html"/>
      <url>2021/0603undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="bsae64"><a href="#bsae64" class="headerlink" title="bsae64"></a>bsae64</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=crypto&amp;number=5&amp;grade=0&amp;id=5109&amp;page=1">题目链接</a><br>题目内容：<br>Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9<br>直接在线解密<a href="http://ctf.ssleye.com/base64.html">base编码</a><br><img src="/images/image-16.png" alt="image text"></p><h2 id="Caesar"><a href="#Caesar" class="headerlink" title="Caesar"></a>Caesar</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=crypto&amp;number=5&amp;grade=0&amp;id=5110&amp;page=1">题目链接</a><br>题目内容：<br>oknqdbqmoq{kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz}<br>猜测是凯撒加密或者栅栏加密<br><a href="https://www.qqxiuzi.cn/bianma/kaisamima.php?ivk_sa=1024320u">凯撒密码加密解密</a><br>cyberpeace{you_have_learned_caesar_encryption}<br>偏移量为12<br>或者用下面的脚本解密个人比较喜欢用脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">casearDecrypt</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> source_char<span class="token punctuation">,</span> destination_char<span class="token punctuation">,</span> list_all<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> list_all <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> offset <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            convertChar<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        offset <span class="token operator">=</span>  ord<span class="token punctuation">(</span>destination_char<span class="token punctuation">)</span> <span class="token operator">-</span> ord<span class="token punctuation">(</span>source_char<span class="token punctuation">)</span>        convertChar<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">convertChar</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">:</span>    chars <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz"</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> ciphertext<span class="token punctuation">:</span>                 is_upper_flag <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> char<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            char <span class="token operator">=</span> char<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>            is_upper_flag <span class="token operator">=</span> <span class="token number">1</span>                 <span class="token keyword">if</span> char <span class="token operator">not</span> <span class="token keyword">in</span> chars<span class="token punctuation">:</span>            outputChar<span class="token punctuation">(</span>is_upper_flag<span class="token punctuation">,</span> char<span class="token punctuation">)</span>            <span class="token keyword">continue</span>                 tempchar_ascii <span class="token operator">=</span> ord<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">+</span> offset        tempchar <span class="token operator">=</span>chr<span class="token punctuation">(</span>tempchar_ascii<span class="token punctuation">)</span>        <span class="token keyword">if</span> tempchar <span class="token operator">not</span> <span class="token keyword">in</span> chars<span class="token punctuation">:</span>            <span class="token keyword">if</span> offset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                tempchar_ascii <span class="token operator">+=</span> len<span class="token punctuation">(</span>chars<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tempchar_ascii <span class="token operator">-=</span> len<span class="token punctuation">(</span>chars<span class="token punctuation">)</span>        tempchar <span class="token operator">=</span> chr<span class="token punctuation">(</span>tempchar_ascii<span class="token punctuation">)</span>        outputChar<span class="token punctuation">(</span>is_upper_flag<span class="token punctuation">,</span> tempchar<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">outputChar</span><span class="token punctuation">(</span>is_upper_flag<span class="token punctuation">,</span> char<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> is_upper_flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>char<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>ciphertext <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Please input ciphertext:\n"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    operation <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"List all results?y/n:"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> operation <span class="token operator">==</span> <span class="token string">'y'</span> <span class="token operator">or</span> operation <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">:</span>        casearDecrypt<span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">elif</span> operation <span class="token operator">==</span> <span class="token string">'n'</span> <span class="token operator">or</span> operation <span class="token operator">==</span> <span class="token string">'N'</span><span class="token punctuation">:</span>        des_char <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Please input destination_char:\n"</span><span class="token punctuation">)</span>        sors_char <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Please input source_char:\n"</span><span class="token punctuation">)</span>        casearDecrypt<span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> sors_char<span class="token punctuation">,</span> des_char<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Input error! Please input y/n:"</span><span class="token punctuation">)</span></code></pre><h2 id="Morse"><a href="#Morse" class="headerlink" title="Morse"></a>Morse</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=crypto&amp;number=5&amp;grade=0&amp;id=5111&amp;page=1">题目链接</a><br>题目内容：<br>11 111 010 000 0 1010 111 100 0 00 000 000 111 00 10 1 0 010 0 000 1 00 10 110<br>由题目可知这是摩斯密码，所以<a href="http://www.txttool.com/t/?id=Mzg1">摩斯密码</a><br><img src="/images/image-17.png" alt="image text"><br>再把字母转小写就行了</p><h2 id="幂数加密"><a href="#幂数加密" class="headerlink" title="幂数加密"></a>幂数加密</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=crypto&amp;number=5&amp;grade=0&amp;id=5120&amp;page=1">题目链接</a><br>题目内容：<br>8842101220480224404014224202480122<br>先百度了解下什么是幂数加密<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%B9%82%E6%95%B0%E5%8A%A0%E5%AF%86%E6%B3%95/2410151?fr=aladdin">幂数加密</a></p><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"88421"</span><span class="token punctuation">,</span><span class="token string">"0122"</span><span class="token punctuation">,</span><span class="token string">"048"</span><span class="token punctuation">,</span><span class="token string">"02244"</span><span class="token punctuation">,</span><span class="token string">"04"</span><span class="token punctuation">,</span><span class="token string">"0142242"</span><span class="token punctuation">,</span><span class="token string">"0248"</span><span class="token punctuation">,</span><span class="token string">"0122"</span><span class="token punctuation">]</span> flag<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     str <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span>     list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>     sum<span class="token operator">=</span><span class="token number">0</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> str<span class="token punctuation">:</span>         list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>         length <span class="token operator">=</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>         sum<span class="token operator">+=</span>int<span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     flag<span class="token operator">+=</span>chr<span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">+</span>sum<span class="token punctuation">)</span> <span class="token keyword">print</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#WELLDONE</span></code></pre><h2 id="Railfence"><a href="#Railfence" class="headerlink" title="Railfence"></a>Railfence</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=crypto&amp;number=5&amp;grade=0&amp;id=5112&amp;page=1">题目连接</a><br>题目内容：<br>ccehgyaefnpeoobe{lcirg}epriec_ora_g<br>猜测是凯撒密码或者栅栏密码<br><img src="/images/image-18.png" alt="image text"><br>但是用脚本没有得到相应的结果<br>所以又跑去用栅栏加密脚本</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#   e = </span><span class="token triple-quoted-string string">'''KYsd3js2E{a2jda}'''</span><span class="token keyword">def</span> <span class="token function">zhalan</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>    elen <span class="token operator">=</span> len<span class="token punctuation">(</span>e<span class="token punctuation">)</span>    field<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>elen<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>elen<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            field<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> f <span class="token keyword">in</span> field<span class="token punctuation">:</span>        b <span class="token operator">=</span> elen <span class="token operator">/</span> f        result <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token string">''</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>elen<span class="token punctuation">)</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> i <span class="token operator">%</span> b<span class="token punctuation">;</span>            result<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span>result<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        d <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>            d <span class="token operator">=</span> d <span class="token operator">+</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">print</span> d<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    e <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">"please input the strings:\n"</span><span class="token punctuation">)</span>    zhalan<span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p>发现还是不对但是在栅栏密码中发现了像flag的字符串，百度搜了下原来还有栅栏密码的变种w形式的栅栏密码<br><a href="www.atoolbox.net/Tool.php?Id=777.com">W形式栅栏密码</a><br>栏目为5<br><img src="/images/image-19.png" alt="image text"></p><h2 id="不仅仅是Morse"><a href="#不仅仅是Morse" class="headerlink" title="不仅仅是Morse"></a>不仅仅是Morse</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=crypto&amp;number=5&amp;grade=0&amp;id=5117&amp;page=1">题目连接</a><br>题目内容：<br>–/.-/-.–/..–.-/-…/./..–.-/…./.-/…-/./..–.-/.-/-./—/-/…././.-./..–.-/-.././-.-./—/-.././…./…./…./…./.-/.-/.-/.-/.-/-…/.-/.-/-…/-…/-…/.-/.-/-…/-…/.-/.-/.-/.-/.-/.-/.-/.-/-…/.-/.-/-…/.-/-…/.-/.-/.-/.-/.-/.-/.-/-…/-…/.-/-…/.-/.-/.-/-…/-…/.-/.-/.-/-…/-…/.-/.-/-…/.-/.-/.-/.-/-…/.-/-…/.-/.-/-…/.-/.-/.-/-…/-…/.-/-…/.-/.-/.-/-…/.-/.-/.-/-…/.-/.-/-…/.-/-…/-…/.-/.-/-…/-…/-…/.-/-…/.-/.-/.-/-…/.-/-…/.-/-…/-…/.-/.-/.-/-…/-…/.-/-…/.-/.-/.-/-…/.-/.-/-…/.-/.-/-…/.-/.-/.-/.-/-…/-…/.-/-…/-…/.-/.-/-…/-…/.-/.-/-…/.-/.-/-…/.-/.-/.-/-…/.-/.-/-…/.-/.-/-…/.-/.-/-…/.-/-…/.-/.-/-…/-…/.-/-…/.-/.-/.-/.-/-…/-…/.-/-…/.-/.-/-…/-…/.-<br><a href="http://www.txttool.com/t/?id=Mzg1">摩斯密码</a><br><img src="/images/image-20.png" alt="image text"><br>发现还存在一个加密从形式上可以看出是培根密码<a href="http://ctf.ssleye.com/baconian.html">Baconian Cipher</a><br><img src="/images/image-21.png" alt="image text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc</title>
      <link href="2021/0602undefined.html"/>
      <url>2021/0602undefined.html</url>
      
        <content type="html"><![CDATA[<p>##[湖南科技学院2021]lsb<br>把题目文件下载下来，直接拖入Stegsolve<br><img src="/images/image-23.png" alt="Image text"><br>然后用010editor查看的到flag<br><img src="/images/image-24.png" alt="Image text"></p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>古典密码</title>
      <link href="2021/0602undefined.html"/>
      <url>2021/0602undefined.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 古典密码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古典密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA</title>
      <link href="2021/0602undefined.html"/>
      <url>2021/0602undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-公钥解析，签名加密"><a href="#1-公钥解析，签名加密" class="headerlink" title="1.公钥解析，签名加密"></a>1.公钥解析，签名加密</h2><p>如果题目给了文件后缀名pem或者题干文件带有KEY的文件，就可以使用Linux自带的工具openssl,提取出n和e。</p><pre><code>openssl rsa -pubin -text -modulus -in warmup -in pubkey.pem</code></pre><p>还有一个就是用在线的公钥解析<a href="http://ctf.ssleye.com/pub_asys.html">公钥解析</a><br>得到n和e之后，用在线分解的网站<a href="http://www.factordb.com/index.php">factordb</a><br>得到p,q<br>然后密文c可能是一个flag.enc的文件直接用winhex或者010把密文转化成16进制。<br>一般解题脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span>n <span class="token operator">=</span>e <span class="token operator">=</span>c <span class="token operator">=</span> p <span class="token operator">=</span>q <span class="token operator">=</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#计算出私钥</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#计算出明文m</span>flag<span class="token operator">=</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><p>2021萌新赛–凛冬以至</p><h2 id="2-利用公约数求解"><a href="#2-利用公约数求解" class="headerlink" title="2.利用公约数求解"></a>2.利用公约数求解</h2><p>如果题目提供两次公钥解密过程使用的n1和n2具有相同的素数因子，可以利用欧几里得算法的到一个公约数p，然后就可以把n1和n2分解了</p><pre class=" language-python"><code class="language-python">p<span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#gmpy2的gcd，用于求最大公约数。</span></code></pre><p>自定义函数gcd()欧几里得算法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a<span class="token operator">&lt;</span>b<span class="token punctuation">:</span>        a<span class="token punctuation">,</span>b <span class="token operator">=</span> b<span class="token punctuation">,</span>a    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> a<span class="token operator">%</span>b        a <span class="token operator">=</span> b        b <span class="token operator">=</span> temp    <span class="token keyword">return</span> a</code></pre><h2 id="3-分解N得到多个相同的P"><a href="#3-分解N得到多个相同的P" class="headerlink" title="3.分解N得到多个相同的P"></a>3.分解N得到多个相同的P</h2><p>1.欧拉函数的性质：<br>p为素数，n=p^a 所以 φ(n)=(p−1)∗p^(a−1)=p^a−p^(a−1)<br>φ(n)=(p1-1) * (p2-1)* (p3-1)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes n<span class="token operator">=</span> e<span class="token operator">=</span> c<span class="token operator">=</span> p1 <span class="token operator">=</span> p2 <span class="token operator">=</span> p3 <span class="token operator">=</span> phi <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p2<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p3<span class="token number">-1</span><span class="token punctuation">)</span>  d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>  m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token keyword">print</span> （long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> RSA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凛冬以至</title>
      <link href="2021/0531undefined.html"/>
      <url>2021/0531undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a><strong>签到</strong></h2><p>  题目：NTQ1NjcwNTg1MjMwNGU2MTRkN2E0ZTUwNTQ2YzU2NTg1NDdhNGU1NDRlMzAzNTQ3NTc0NTU5MzI0ZTQ2NTI0YjU0NTQ1NjU2NTM0NTZiMzM1MzU0MzAzZA%3D%3D<br>  %3D在URL里面为=<br>  所以这是一个base64加密下面一个在线解密的网站:<br>  <a href="http://ctf.ssleye.com/base64.html">base64</a><br>  <img src="/images/image-13.png" alt="Image text"><br>  得到一串16进制字符串5456705852304e614d7a4e50546c5658547a4e544e303547574559324e46524b5454565653456b335354303d<br>  然后用16进制转字符串在线网站<br>  <a href="https://zixuephp.net/tool-str-hex.html">16进制字符串</a><br>  <img src="/images/image-14.png" alt="Image text"><br>  得到TVpXR0NaMzNPTlVXTzNTN05GWEY2NFRKTTVVSEk3ST0=然后在base64，在base32都到flag{sign_in_right}</p><h2 id="rsa256"><a href="#rsa256" class="headerlink" title="rsa256"></a><strong>rsa256</strong></h2><p>  下载得到一个压缩包直接上脚本</p><pre class=" language-python"><code class="language-python">c1 <span class="token operator">=</span> <span class="token number">0x0B39CC1B6127D3BBED2BC045148C911D467985A94B147EDE80750F95A360D47A</span>c2 <span class="token operator">=</span> <span class="token number">0x9AFB1CDC1986D3BB53A3425B396C83618EFAAA81C14C965C813415E5C54FCE4B</span>c3 <span class="token operator">=</span> <span class="token number">0x0F04B3B67EF230F80BB518D26DED38AF84B6C8D87BA80C09EBF1D865123082FA</span>n <span class="token operator">=</span> <span class="token number">98432079271513130981267919056149161631892822707167177858831841699521774310891</span>p <span class="token operator">=</span> <span class="token number">302825536744096741518546212761194311477</span>q <span class="token operator">=</span> <span class="token number">325045504186436346209877301320131277983</span>e <span class="token operator">=</span> <span class="token number">65537</span><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>phi<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(d)</span>m1 <span class="token operator">=</span> pow<span class="token punctuation">(</span>c1<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>m2 <span class="token operator">=</span> pow<span class="token punctuation">(</span>c2<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>m3 <span class="token operator">=</span> pow<span class="token punctuation">(</span>c3<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{3b6d3806-4b2b-11e7-95a0-000c29d7e93d}</span></code></pre><h2 id="big-exponent"><a href="#big-exponent" class="headerlink" title="big exponent"></a><strong>big exponent</strong></h2><p>题目一个压缩包里面有三个公钥文件、一个py文件、一个flag.enc文件<br><img src="/images/image-15.png" alt="image text"><br>然后三个公钥文件直接在线解密<br><a href="http://ctf.ssleye.com/pub_asys.html">公钥解析</a><br>然后得到<br>e1 = 1602756013062112843744042848696751291734328877359431629694202442970213958619662519632912193714465417475466815521066706941763237747867361186913306445129211826325418293180840491906582168046775011902187128141553876554027713566535166942445716391472657244732048178191442990104179346452453955565791601538034168571296789315804768285499137885434524729333086995652263390337079371130206550240700066939844703584472188151540022021010493776597423277845220640999153544739230286588525750509153214472224408941595500917168173154237309301590704927373355915044693214928571732630774782699886200158926633708423762013924971588111846040637913518589837132640710389683172084726417372521165973166248965018352226577610296331263536718335546936698363703546273609914679582318416258368128209310517101158271088467767872409470829124988064340805991237546597067227179804849995209190941225949426623192206566609053871819997087958681298608926214864605144946630018633964330698142294342646806166413223615564901058200767400412658431809514870082489588903686687244605745555051646530519595510577875446720832450864212827938087056696786030988058247078944886916082594200248708750492466227915219311120228702916717634212959658361246513056518215813568863758319903741132911625511</p><p>n 1= </p><pre class=" language-python"><code class="language-python"><span class="token number">1038997220248847443438564705725653697094452215469936659327465900</span><span class="token number">6962946119149578322524182527610365274630374823513225511576566970</span><span class="token number">0842197265711121714987654684549920920320989687915812513639812733</span><span class="token number">3535171636602639550913775792032068470548425607104716490965949335</span><span class="token number">2078954931917152094605722917224289566534793783961520549197586345</span><span class="token number">5506878996650717808257188103959553347748525290176681466341888363</span><span class="token number">8071830555234712073859315649908120135977221104650051416219748315</span><span class="token number">1522501404569451950489266441212978454319065210389542615479438368</span><span class="token number">3058397628437202621595196747392141094607350146897968465061107886</span><span class="token number">8318449094865132316130315506605346747085923431120000484502980083</span><span class="token number">4717834050659163269482118990403483214933192284752677787379935884</span><span class="token number">7448292980557245985856226017202068372494261479321030720827948410</span><span class="token number">3571579213942209374398373184610887478901904548713015544238556778</span><span class="token number">3453353134728022801984465689809769641368264999340835632297409830</span><span class="token number">8690388953028828327997137590326248817774960535402880287516147947</span><span class="token number">9791086931289611280730945368726194963218905927025387729495682354</span><span class="token number">4426958058484838008690369213989176715919832284260911094734592168</span><span class="token number">2602990217846020997412112817363494815388349894694169404503065689</span><span class="token number">9591169150440666299010443827956197750797179041705612561156982050</span><span class="token number">2961491952589</span></code></pre><p>e2 = 2904058618957347796124806709844284214100347303482285059334842732156837427829028418920870968317177518028202483477549514212955602692003773329471277987963666941967413171313415800413419035946782664102531583332702813106576020585616653743371004518451826620196955977231854966488359561580200233096295646666641174918511109948768573194092566999584870294045886424642762432262548742357989212451404702164775093450442502101704487267578537521568104803212351617897518360418816225241353834568549073742928755460051553731472149086328300601631382240404345064443429825021218866893595330304773327331625471097046963602134853969990771813467918989638459534586121489116502696806243321935512681823926215427247490383579587683616800665676470585563938390230514312532088869777318211152869729889605399179012809125224288902698315984031292176410078299624068706977744884534372985229093509461309044283036222251451629256507078267852271542419681478299549238667404075635069223260077018992991699204691169927302219293706248235790806563798411283016548214931544796004828252360169451578597816847440083848623571457419977424379075036672826539077109974259972227306009381651363948380296783778147092953371690519222478858048155676852084473468114026565915661459803106941095015763</p><p>n 2=  </p><pre class=" language-python"><code class="language-python"><span class="token number">2947099132768432239262140325489012008136562359786164146900132065</span><span class="token number">8749438743102148451478865489139274928976381180800827334647598716</span><span class="token number">1097216166109639313571126720848946609299157496083280390743239382</span><span class="token number">2522054842671146687216826758961986352293587044309465017950910137</span><span class="token number">1425848147532465131964502204205438062565226241230114203012053778</span><span class="token number">2743980709058687150290447690092273119094192260249147234169109994</span><span class="token number">8406959589435264602346525356951434483133228448982018806919026427</span><span class="token number">7962387019530493740432404270651143799124007614018353822316441648</span><span class="token number">9092720922904542023283887701490105957077106395100234966794823868</span><span class="token number">4003020817629602614271587804803350183809313620245659299022506108</span><span class="token number">1994229430097099961625355563665863640712070306243527891650126904</span><span class="token number">8172692641065498810900329484294939222325516926525604023033377754</span><span class="token number">0771236826373527806129949567064986986248005230506249577950447427</span><span class="token number">2554161971619449782256952809438129767318694173596497173782086247</span><span class="token number">4394925076326970969559125934976698580151627209910973224093497012</span><span class="token number">9506348663036316833397070269529278378508785318832239680957227443</span><span class="token number">2080245224918137683065479557191975153136010911375315466804487257</span><span class="token number">6198908105116969808540334406913795516807039999674325041930176306</span><span class="token number">2376596262269956472939379607564392703925189842964212071831556905</span><span class="token number">393561597209</span></code></pre><p>e3 = 65537</p><p>n3 =</p><pre class=" language-python"><code class="language-python"><span class="token number">1492295977578406649931652893531632582514001120887183062765319154</span><span class="token number">9546959775167708525042423039865322548420928571524120743831693550</span><span class="token number">1235634939817979509128958934762004470833865493533360868990649218</span><span class="token number">7858207434679132010410613996501048061487959235779305334257785076</span><span class="token number">1108944086318475849882440272688246818022209356852924215237481460</span><span class="token number">2293775442972249838870266692228859873230823240446458830709162434</span><span class="token number">3952180970267429546925372361667724576224249447858780740268847417</span><span class="token number">6102093482019417118703747411862420536240611089529331148684440513</span><span class="token number">9346094128849410916515948615306060869821748624617396047053544165</span><span class="token number">87503836130151492937714365614194583664241</span></code></pre><p>p = 101762447604961968347497011921099322367324119881977823223715806843654916018223203152717441386396615480134613864942068489600487206751473112264495957512819776729786840027245275219664091321087832913341367749452671938119115622233015167030327196487127307195872792552039408988207189866115101567965404039921455793363</p><p>q =146645055489569596158773422326511843870914610026045288623162173369449741025994927278359852181645222010216728295790096211969513458244344811852179454305768973973420398459241985170762812039623053792853389316411927678494740679905048052776274447299638217155556426312374908963757267001415016478005573936685580868907</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token number">14922959775784066499316528935316325825140011208871830627653191549546959775167708525042423039865322548420928571524120743831693550123563493981797950912895893476200447083386549353336086899064921878582074346791320104106139965010480614879592357793053342577850761108944086318475849882440272688246818022209356852924215237481460229377544297224983887026669222885987323082324044645883070916243439521809702674295469253723616677245762242494478587807402688474176102093482019417118703747411862420536240611089529331148684440513934609412884941091651594861530606086982174862461739604705354416587503836130151492937714365614194583664241</span>e <span class="token operator">=</span> <span class="token number">65537</span>p <span class="token operator">=</span> <span class="token number">101762447604961968347497011921099322367324119881977823223715806843654916018223203152717441386396615480134613864942068489600487206751473112264495957512819776729786840027245275219664091321087832913341367749452671938119115622233015167030327196487127307195872792552039408988207189866115101567965404039921455793363</span>q <span class="token operator">=</span> <span class="token number">146645055489569596158773422326511843870914610026045288623162173369449741025994927278359852181645222010216728295790096211969513458244344811852179454305768973973420398459241985170762812039623053792853389316411927678494740679905048052776274447299638217155556426312374908963757267001415016478005573936685580868907</span>c <span class="token operator">=</span> <span class="token number">0x6BA3E02E5B09958B082962C011D7EEC896FC61A34020E2D3AB2550CCA700943ED7FC330BA185BA5D487C75DD0E2796C4E273BCF4D294D7C9197CCFF7FAE38198CDAA190DDDC47C9DA4C418DAFE71A4F233EFBF36FBA23C8A31D0C9AC8F3E44AF6194224E4F5AFFF1D8933EEA38D932945D07A5B3766C3EA165F2CB52DD5873BF47B5E96FCE855D1BD2A96E9BA3A2C7A40BCAF1E7367354E21B4D1EAF1729DA9F9435340CBA17EC59B25255480D4C4C8E4528644C780B2FC24DB5D25C7B45FF0FEC0F4D6345A14D650CAEFA212CB887EC7F3FD8CCBCBBAB0E0B7091AC8BEB110A2550E6D5BF51DB68DB4269FF32DE71BD53B907F16A452F382B1D59801FCD70FD</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{welcome_to_2th_compettion_2021}</span></code></pre><h2 id="字符串和字节"><a href="#字符串和字节" class="headerlink" title="字符串和字节"></a>字符串和字节</h2><p>题目文件的到两组二进数<br>010101100100010101110101010001010100010001000101010101100100011001010110011001000100010001000110011001100110010001100100010101100100010001010101010101010101010101000110 </p><p>101010101001101111011001101101011011011101000100100100110110010010010101001101101010011101000011010101010101010000110111100001000101101010000110101010011000101001001111</p><p>这道密码学题，在比赛中一直没有思路直到看了题解才知道怎么写原来是这两组数据的奇数位和偶数位分别相加，用Python写的脚本如下：</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'010101100100010101110101010001010100010001000101010101100100011001010110011001000100010001000110011001100110010001100100010101100100010001010101010101010101010101000110'</span>t <span class="token operator">=</span> <span class="token string">'101010101001101111011001101101011011011101000100100100110110010010010101001101101010011101000011010101010101010000110111100001000101101010000110101010011000101001001111'</span><span class="token keyword">import</span> binasciiflag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">print</span> binascii<span class="token punctuation">.</span>a2b_hex<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>int<span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{ce3e502c-48c9-4d50-9990-5b81db6fcbf0}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 萌新比赛题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 凛冬以至(crypto) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界</title>
      <link href="2021/0530undefined.html"/>
      <url>2021/0530undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h1><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="新手练习区"><a href="#新手练习区" class="headerlink" title="新手练习区"></a>新手练习区</h3><h2 id="instanity"><a href="#instanity" class="headerlink" title="instanity"></a><strong>instanity</strong></h2><p>直接把题目文件拖入IDA用shift+F12就看到flag了</p><p><img src="/images/image-3.png" alt="Image text"></p><h2 id="python-trade"><a href="#python-trade" class="headerlink" title="python-trade"></a><strong>python-trade</strong></h2><p>题目是一个pyc文件，我用的是Easy Python Decompiler是它变成py文件，用python IDE 打开如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Embedded file name: 1.py</span><span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> message<span class="token punctuation">:</span>        x <span class="token operator">=</span> ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">32</span>        x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">16</span>        s <span class="token operator">+=</span> chr<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>s<span class="token punctuation">)</span>correct <span class="token operator">=</span> <span class="token string">'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">print</span> <span class="token string">'Input flag:'</span>flag <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> encode<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">==</span> correct<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'correct'</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'wrong'</span></code></pre><p>一看这是一个简单的逻辑运算加密，解密脚本如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>    imessage <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> imessage<span class="token punctuation">:</span>        x <span class="token operator">=</span>  i<span class="token operator">-</span> <span class="token number">16</span>        x <span class="token operator">=</span> x <span class="token operator">^</span> <span class="token number">32</span>        s <span class="token operator">+=</span> chr<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> scorrect <span class="token operator">=</span> <span class="token string">'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'</span>flag <span class="token operator">=</span> decode<span class="token punctuation">(</span>correct<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#nctf{d3c0mpil1n9_PyC}</span></code></pre><h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a><strong>re1</strong></h2><p>题目是一个EXE可执行文件，常规题目直接拖入IDA进行分析</p><p><img src="/images/image-4.png" alt="Image text"></p><p>用IDA打开是选择binary file，在此模式下不会进行反汇编</p><p><img src="/images/image-5.png" alt="Image text"></p><h2 id="game"><a href="#game" class="headerlink" title="game"></a><strong>game</strong></h2><p>题目又是一个exe可执行文件，打开一看</p><p><img src="/images/image-6.png" alt="Image text"></p><p>话不多说直接拖入IDA</p><p><img src="/images/image-7.png" alt="Image text"></p><p>通过这里看大只有灯全部亮了，才回跳转到sub_457AB4()<br><img src="/images/image-8.png" alt="Image text"></p><p>得到这个flag的ASCII码，但是要有一个简单的逻辑运算，编写一个脚本转化</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span>        <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span>        <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span>        <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span>        <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>str <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    b<span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">+</span> i<span class="token punctuation">]</span>    b<span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">0x13</span>    str <span class="token operator">=</span> str <span class="token operator">+</span> chr<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#zsctf{T9is_tOpic_1s_v5ry_int7resting_b6t_others_are_n0t}</span></code></pre><p>还有一个方法就是玩这个游戏使得它灯全部变亮就会出现flag了</p><h2 id="Hello-CTF"><a href="#Hello-CTF" class="headerlink" title="Hello, CTF"></a><strong>Hello, CTF</strong></h2><p>题目也是一个可执行文件EXE,打开一看</p><p><img src="/images/image-9.png" alt="Image text"></p><p>用IDA打开，再用shift+F12的到</p><p><img src="/images/image-10.png" alt="Image text"></p><p>再根据上边exe打开要求的答案是字符串所以将IDA里面的16进制转字符串<a href="https://www.sojson.com/hexadecimal.html">16进制转字符</a></p><p><img src="/images/image-11.png" alt="Image text"></p><p><img src="/images/image-12.png" alt="Image text"></p><p>所做flag是CrackMeJustForFun</p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>G1CTF</title>
      <link href="2021/0527undefined.html"/>
      <url>2021/0527undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="G1CTF-协会内部测试"><a href="#G1CTF-协会内部测试" class="headerlink" title="G1CTF(协会内部测试)"></a>G1CTF(协会内部测试)</h1><h2 id="Deal-Breaking"><a href="#Deal-Breaking" class="headerlink" title="Deal Breaking"></a>Deal Breaking</h2><p>题目</p><p>cnenprgnzbysbeurnqnpur </p><p>解题</p><p> [在线ROT加密] (<a href="https://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php">https://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php</a>) </p><p> <img src="/images/image-1.png" alt="Image text"></p><p> 在MD5编码就得到flag</p><p>MD5 在线加密网站<a href="https://md5jiami.bmcx.com/">md5</a></p><p><img src="/images/image-2.png" alt="Image text"></p><h2 id="baby-rsa"><a href="#baby-rsa" class="headerlink" title="baby_rsa"></a>baby_rsa</h2><p>普通的RSA加密但多了一次pow 运算</p><p>解密脚本如下</p><pre class=" language-python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">18166111488983638423176654225038910650374178404043258136863317940757240374883045318227630220114908148002528619687208976201483203446705228237820608531034600157346418730110800833894198105113069673034318791074080878803821797374439187892933762426303490171060652425319592687318992422979831460606780689490127157122450326817694644127955168509718422226505201308410281564018832558025316135527711604948983206569045881358071837726506411561445950018434181828539749068924458242255898899889941894373420604283541696070823346969159662074221543706652525690955057870664198106495869582165707721782854117610672456879034154898769471938117</span>e <span class="token operator">=</span> <span class="token number">65537</span>c <span class="token operator">=</span> <span class="token number">16557540364154395713558646669072741937615342260542036031952182998548657011824978776677484944354752850867643908247704032511389420321541306432748843707416654616686046776804432102455821985542337552330254302403535524234293479604198963438410959320502344078024576646316377856554837978984863667052517437922967926155676374386985386995490935331458679889799199387332376735566839929210890931308968597230699243910342515468179185950859704753759493976488271753912140439374347388198468842216991965867366259721821413872154269673724400345270897275549939948544776957761650034569256088810092045614520316608497052245790834163200510667772</span>p <span class="token operator">=</span><span class="token number">130456283857645025762691023898845608928710362686294851221450093824533197549806631148867242691844441160576320773904432512838379590127986113818416101086695539425149571612979342889778360825402727498529748702035429662584726706609716114370652011043194792995908818094170934656989995629482678233000685983090325365549</span>q <span class="token operator">=</span><span class="token number">139250566947059823453625463016686669261826444361819002282335838853816828667839799789393680821194880353192071200076880361361848345889074292932450446910930443112614763933390287115641256150843558712707320218852675477962227409197464100372762134803009018827495653979157431219931338408129724157546988493768646375033</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2phi<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m<span class="token operator">=</span>pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(long_to_bytes(m))</span><span class="token comment" spellcheck="true">#没有加后面的pow</span>a<span class="token operator">=</span>pow<span class="token punctuation">(</span><span class="token number">0x1337</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x18a39cb09e40671788a6b9221371e3f5455bbde2aff984e491c85f4f3ad309613</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="easyRSA"><a href="#easyRSA" class="headerlink" title="easyRSA"></a>easyRSA</h2><p>这道题主要考察扩展欧几里得算法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a<span class="token operator">&lt;</span>b<span class="token punctuation">:</span>        a<span class="token punctuation">,</span>b <span class="token operator">=</span> b<span class="token punctuation">,</span>a    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> a<span class="token operator">%</span>b        a <span class="token operator">=</span> b        b <span class="token operator">=</span> temp    <span class="token keyword">return</span> a</code></pre><p>解题代码如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2<span class="token keyword">import</span> libnum<span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a<span class="token operator">&lt;</span>b<span class="token punctuation">:</span>        a<span class="token punctuation">,</span>b <span class="token operator">=</span> b<span class="token punctuation">,</span>a    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> a<span class="token operator">%</span>b        a <span class="token operator">=</span> b        b <span class="token operator">=</span> temp    <span class="token keyword">return</span> an1 <span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">14343453794367092515497895137902168386296417319247146730459319881802140334698737189342973812146465828660342012946910653192803473600595707696472591504951198563603709181626005658184116684367802758344031386496658458264959969692044879175628783605186867276515694784082482043436473458055894723810140516689141599152195984714148210638833797638255124702611899073506190942745515704802064433300261613781916198106074829630095538317067848424354570246167013526201728488570271571071978289748473886089178585249674489547064957622989808178007470483946536987289341591847349128538928294808117443145097551386826012131775390678998400121889</span><span class="token punctuation">)</span>n2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">20308195943065789251817446829863883469272602304751753219641822206296872340042055615695828234875654938558065292577939692476866300109337008636927498617655004089261030659132847752508448477243753135984370110439693105967818735745420000128069178972088161949286955900852997852216281385776262449633762670014571643311788609943581805728189446261833834354199480558854660930835489848639377800962143545608517015172667287024378681310097239827666867592226542748876958241795640727126418223939447294264460580825913526549434716100031432143671503937393640601052321015919112419872256052688412078974604159554387677255024728801489704260363</span><span class="token punctuation">)</span>c1 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">7060913174371289769309763235647638447135191122575239829016360331184038730172940927388867110734381358453407989806140634011350721798160713053621896705641720212112551788757319365520015847374673960320334248580560205413153114427654784961710348834514336159373193900583620653085765067165174133038800649323672785585501521017885631280303551697739951014696330327670228229605047676440962916067564193271247936974843751339372847625153953559941840547748375919498892051841063000432368600158512968060459462404612866403066205167176313042517873197370743936042865113128112591367582742396193149320607077649094903691975739181219359076265</span><span class="token punctuation">)</span>c2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span> <span class="token number">20148610260208170593289118672038891818770076647095364134619069654881479351996793675661468921299369828610961411535098751945943055486021096222646490248098261096267277133140141311947840921090893680970207588861087220137922905797128028172779716663247976566807484416436273763735289602135279810958841816837092253309070217739840320870090502512130142015671736882941916450932012952894134313348115440744061809508935802755106889882605495521669026118538807594430799171795521056652204797565525565412195933084030518258900930049905119086640401568596910662117008862676917676436361632490924908191898958534522611573541581472875515834526</span><span class="token punctuation">)</span>e<span class="token operator">=</span><span class="token number">65537</span>p<span class="token operator">=</span>gcd<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span>q<span class="token operator">=</span>n1<span class="token operator">//</span>pphi<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d1 <span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m1 <span class="token operator">=</span> pow<span class="token punctuation">(</span>c1<span class="token punctuation">,</span>d1<span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="Asymmetric-task"><a href="#Asymmetric-task" class="headerlink" title="Asymmetric task"></a>Asymmetric task</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>sysos<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">import</span> base64<span class="token keyword">from</span> libnum <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSAflag<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">'enc_flag.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>keys<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'public_private.enc'</span><span class="token punctuation">,</span><span class="token string">'rt'</span><span class="token punctuation">)</span>public<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>keys<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>private<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>keys<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>key<span class="token operator">=</span>RSA<span class="token punctuation">.</span>import_key<span class="token punctuation">(</span>private<span class="token punctuation">)</span>c<span class="token operator">=</span>s2n<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>m<span class="token operator">=</span>pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>key<span class="token punctuation">.</span>d<span class="token punctuation">,</span>key<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>n2s<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>参考着ctftime的<a href="https://szymanski.ninja/en/ctfwriteups/2021/securebug-odin/asymmetricjob/">wp</a></p><h2 id="ONE-Piece"><a href="#ONE-Piece" class="headerlink" title="ONE Piece"></a>ONE Piece</h2><p><a href="https://en.wikipedia.org/wiki/International_maritime_signal_flags">解题网站</a><br>flag{0n1_p1ece}</p><p>##[G1CTF2021]sign_in<br>题目是一个可执行文件直接用IDA打开分析的<br><img src="/images/image-22.png" alt="Image text"><br>然后直接上python脚本</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'sdhfuiasdfhxckjcxklvjzidsoifujoa'</span>str2 <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x34</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x2b</span><span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0xe</span><span class="token punctuation">,</span><span class="token number">0x5f</span><span class="token punctuation">,</span><span class="token number">0xc</span><span class="token punctuation">,</span><span class="token number">0x1e</span><span class="token punctuation">,</span><span class="token number">0x4</span><span class="token punctuation">,</span><span class="token number">0x5c</span><span class="token punctuation">,</span><span class="token number">0xe</span><span class="token punctuation">,</span><span class="token number">0x5</span><span class="token punctuation">,</span><span class="token number">0x1f</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span><span class="token number">0x5</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x1d</span><span class="token punctuation">,</span><span class="token number">0x3</span><span class="token punctuation">,</span><span class="token number">0xf</span><span class="token punctuation">,</span><span class="token number">0x1f</span><span class="token punctuation">,</span><span class="token number">0x1c</span><span class="token punctuation">,</span><span class="token number">0xd</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x5c</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x1c</span><span class="token punctuation">]</span>flag<span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token operator">=</span>ord<span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span>str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    flag<span class="token operator">+=</span>chr<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#G1CTF{sfj9dfg7dfg8dszgjklsd7667}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 协会测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
