<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Bugku-reverse</title>
      <link href="2021/0927undefined.html"/>
      <url>2021/0927undefined.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1、入门逆向"><a href="#1、入门逆向" class="headerlink" title="1、入门逆向"></a>1、入门逆向</h2><p>题目<br><img src="/reverse/1.png" alt="题目"></p><p>解题过程<br>1、做逆向啥也不说先直接将exe可执行文件拖入IDA进行分析，但是这道题木比较简单直接拖入IDA就看见flag了<br><img src="/reverse/2.png" alt="IDA分析"><br>所以flag{Re_1s_S0_C0OL}</p><h2 id="2、signin"><a href="#2、signin" class="headerlink" title="2、signin"></a>2、signin</h2><p>题目<br><img src="/reverse/3.png" alt="题目"></p><p>解题过程<br>1、<strong>知识点</strong>：学习reverse()、toString()两个Java函数的作用</p><ul><li>reverse():方法用于颠倒数组中元素的顺序。</li><li>toString() :方法用于返回以一个字符串表示的 Number 对象值。如果方法使用了原生的数据类型作为参数，返回原生数据类型的 String 对象值。如果方法有两个参数， 返回用第二个参数指定基数表示的第一个参数的字符串表示形式。</li></ul><p>2、因为题目是一个apk文件下载下来用JEB反编译找到看MainActivity<br><img src="/reverse/4.png" alt="JEB分析"><br>991YiZWOz81ZhFjZfJXdwk3X1k2XzlXZlt3ZhxmZ<br>3、写脚本</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">'991YiZWOz81ZhFjZfJXdwk3X1k2XzIXZIt3ZhxmZ'</span>L <span class="token operator">=</span> list<span class="token punctuation">(</span>a<span class="token punctuation">)</span>L<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> letter <span class="token keyword">in</span> L<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>letter<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#ZmxhZ3tIZXIzX2k1X3kwdXJfZjFhZ18zOWZiY199</span></code></pre><p>base64在线解密<a href="http://ctf.ssleye.com/base64.html">base64</a><br><img src="/reverse/5.png" alt="base64"><br>所以flag{Her3_i5_y0ur_f1ag_39fbc_}</p><h2 id="3、Easy-Re"><a href="#3、Easy-Re" class="headerlink" title="3、Easy_Re"></a>3、Easy_Re</h2><p>题目<br><img src="/reverse/6.png" alt="题目"></p><p>解题过程<br>1、直接把可执行软件EXE拖入IDA进行分析，找到主函数main<br>选中 3074656D30633165577B465443545544h 这个变量，然后在键盘上按  a  ，就可以显示字符串~<br><img src="/reverse/7.png" alt="ida"><br>所以flag是DUTCTF{We1c0met0DUTCTF}</p><h2 id="4、游戏过关"><a href="#4、游戏过关" class="headerlink" title="4、游戏过关"></a>4、游戏过关</h2><p>题目<br><img src="/reverse/8.png" alt="题目"></p><p>解题过程<br>1、常规操作直接放进ida里进行分析按Shift+F12<br><img src="/reverse/9.png" alt="IDA"><br>找到flag<br>再点击<img src="/reverse/10.png" alt="ida">找到flag的函数<br>再按F5转成C找到关键函数<img src="/reverse/11.png" alt="ida">得到flag是两个数组异或再和0x13异或得到的<br>2、根据上面的信息写python脚本</p><pre class=" language-python"><code class="language-python">ss4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x5</span><span class="token punctuation">,</span><span class="token number">0x2</span><span class="token punctuation">,</span><span class="token number">0x4</span><span class="token punctuation">,</span><span class="token number">0x6</span><span class="token punctuation">,</span><span class="token number">0x3</span><span class="token punctuation">,</span><span class="token number">0x6</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x4E</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token number">0x39</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x3</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x9</span><span class="token punctuation">,</span><span class="token number">0x4</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x3</span><span class="token punctuation">,</span><span class="token number">0x5</span><span class="token punctuation">,</span><span class="token number">0x4</span><span class="token punctuation">,</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token number">0x2</span><span class="token punctuation">,</span><span class="token number">0x3</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x4E</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x36</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x34</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x59</span><span class="token punctuation">,</span><span class="token number">0x2D</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x0</span><span class="token punctuation">]</span> ss8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x7B</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x29</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x7D</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x6F</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token punctuation">,</span><span class="token number">0x5E</span><span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x6</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x6E</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x5F</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">,</span><span class="token number">0x63</span><span class="token punctuation">,</span><span class="token number">0x7B</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x6B</span><span class="token punctuation">,</span><span class="token number">0x47</span><span class="token punctuation">,</span><span class="token number">0x5C</span><span class="token punctuation">,</span><span class="token number">0x1D</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">,</span><span class="token number">0x6B</span><span class="token punctuation">,</span><span class="token number">0x5A</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x2B</span><span class="token punctuation">,</span><span class="token number">0x4C</span><span class="token punctuation">,</span><span class="token number">0x56</span><span class="token punctuation">,</span><span class="token number">0x0D</span><span class="token punctuation">,</span><span class="token number">0x72</span><span class="token punctuation">,</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x0</span><span class="token punctuation">]</span> flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">+=</span> chr<span class="token punctuation">(</span>ss4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>ss8<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span><span class="token number">0x13</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#zsctf{T9is_tOpic_1s_v5ry_int7resting_b6t_others_are_n0t}</span></code></pre><p>3、也可以直接玩这个游戏，15786234\12345678<br><img src="/reverse/12.png" alt="玩游戏"></p>]]></content>
      
      
      <categories>
          
          <category> reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bugku</title>
      <link href="2021/0923undefined.html"/>
      <url>2021/0923undefined.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1、抄错的字符"><a href="#1、抄错的字符" class="headerlink" title="1、抄错的字符"></a>1、抄错的字符</h2><p>题目<br>老师让小明抄写一段话，结果粗心的小明把部分数字抄成了字母，还因为强迫症把所有字母都换成大写。你能帮小明恢复并解开答案吗：QWIHBLGZZXJSXZNVBZW<br>解题过程：<br>1、根据题目,这串字符有数字别抄成了小写字母<br>可能是i=&gt;1,g=&gt;9,z=&gt;2 s=&gt;5<br>部分字母改为小写<br>然后又有是部分数字转化而来的，那我观察加猜测它是<br>QW1hbl92ZXJ5X2Nvb2w<br>2、用<a href="https://ctf.bugku.com/tool/base64">base64</a>在线解密<br><img src="/picture/image-1.png" alt="base64"><br>所以flag{Aman_very_cool}<br>还可以用网上的PHP脚本解题</p><h2 id="2、"><a href="#2、" class="headerlink" title="2、/.-"></a>2、/.-</h2><p>题目<br> ..-./.-../.-/–./—-.–/-../…–/..-./-.-./-…/..-./.—-/–…/..-./—-./…–/—-./—-./…../—–/….-/—–.-<br>解题过程<br>1、一看特点就知道是摩斯密码<br>2、摩斯密码在线解密<a href="https://tool.bugku.com/mosi/">morse</a><br><img src="/picture/image-2.png" alt="morse"><br>FLAG%u7bD3FCBF17F9399504%u7d<br>3、%u7b=&gt;{、%u7d=&gt;}<br>所以flag{D3FCBF17F9399504}</p><h2 id="3、聪明的小羊"><a href="#3、聪明的小羊" class="headerlink" title="3、聪明的小羊"></a>3、聪明的小羊</h2><p>题目<br>一只小羊翻过了2个栅栏 fa{fe13f590lg6d46d0d0}<br>解题过程<br>1、根据题目提示这个是栅栏密码<br>2、直接上在线解密<a href="https://ctftools.com/down/">栅栏密码</a><br><img src="/picture/image-3.png" alt="栅栏解密"><br>flag{6fde4163df05d900}</p><h2 id="4、ok"><a href="#4、ok" class="headerlink" title="4、ok"></a>4、ok</h2><p>file.txt</p><pre><code>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook!Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook?Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook!Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook! Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook?Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook?Ook. Ook? Ook! Ook. Ook? Ook! Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook.Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook!Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook!Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook! Ook. Ook? Ook. </code></pre><p>解题过程<br>1、Ook应该是一种编码方式<br><strong>知识点</strong>：</p><pre><code>Brainfuck是一种极小化的计算机语言，它是由Urban Müller在1993年创建的。由于fuck在英语中是脏话，这种语言有时被称为brainf*ck或brainf**k，甚至被简称为BF02加密原理原理：brainfuck语言用&gt; &lt; + - . , [ ]八种符号来替换C语言的各种语法和命令：例如： +++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++03 Ook密码 ook密码中有大量ook，加上一些符号；Ook! has only three distinct syntax elements:Ook.Ook?Ook!这种就是ook密码</code></pre><p> 2、直接在线解密<a href="https://www.splitbrain.org/services/ook">Ook</a><br> <img src="/picture/image-4.png" alt="Ook"><br> flag{0a394df55312c51a}</p><h2 id="5、-lt-gt"><a href="#5、-lt-gt" class="headerlink" title="5、[+-<>]"></a>5、[+-&lt;&gt;]</h2><p> 题目<br>  +++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++.+ +++++ .&lt;+++ [-&gt;– -&lt;]&gt;- -.+++ +++.&lt; ++++[ -&gt;+++ +&lt;]&gt;+ +++.&lt; +++++ +++[- &gt;—- —-&lt; ]&gt;— —– —.&lt; +++++ ++[-&gt; +++++ ++&lt;]&gt; +++.&lt; +++++ +[-&gt;- —– &lt;]&gt;– —– -.–. —-. –.++ +++++ +.&lt;++ ++++[ -&gt;+++ +++&lt;] &gt;++++ +.++. &lt;++++ ++[-&gt; —– -&lt;]&gt;- —– —-. -.&lt;++ +++++ [-&gt;++ +++++ &lt;]&gt;+. —-. ++++. &lt;++++ +++[- &gt;—- —&lt;] &gt;—- .+.&lt;+ +++++ ++[-&gt; +++++ +++&lt;] &gt;++++ +++++ ++.&lt;<br>解题过程<br>1、上一题的续写<br>原理：brainfuck语言用&gt; &lt; + - . , [ ]八种符号来替换C语言的各种语法和命令：例如： +++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++<br>2、直接在线解密<a href="https://ctf.bugku.com/tool/brainfuck">+-&lt;&gt;</a><br><img src="/picture/image-5.png" alt="+-<>"></p><h2 id="6、把猪困在猪圈里"><a href="#6、把猪困在猪圈里" class="headerlink" title="6、把猪困在猪圈里"></a>6、把猪困在猪圈里</h2><p>题目</p><pre><code></code></pre><p>解题过程<br>1、根据文本得知这是base64加密<br>2、再将base64转图片得到猪圈密码，[base64转图片])(<a href="https://tool.jisuapi.com/base642pic.html">https://tool.jisuapi.com/base642pic.html</a>)<br><img src="/picture/image-6.png" alt="base64转图片"><br>3、在线解密<a href="http://ctf.ssleye.com/pigpen.html">猪圈密码</a><br><img src="/picture/image-7.png" alt="猪圈密码"><br>所以flag{thisispigpassword}</p><h2 id="7、你喜欢下棋吗"><a href="#7、你喜欢下棋吗" class="headerlink" title="7、你喜欢下棋吗"></a>7、你喜欢下棋吗</h2><p>题目<br>你喜欢下棋吗？<br>解压密码为小写<br>4423244324433534315412244543<br>解题过程<br>1、根据题目提示这是棋盘密码(波利比奥斯方阵)<br><img src="/picture/image-8.png" alt="棋盘密码对照表"><br>44 23 24 43 24 43 35 34 31 54 12 24 45 43<br>在根据这密码表对上面的密文进行解密thisispolybius<br>在对flag文件进行解压<br>flag.txt</p><pre><code>一种5bit的编码bugku里面的内容为小写bugku{11111 11001 00011 00111 01001 11011 10110 11111 10000 01110 11011 10110 11111 01001 00001}</code></pre><p>得知bugku里面的密码是博多密码<a href="https://www.boxentriq.com/code-breaking/baudot-code">在线解密</a><br><img src="/picture/image-9.png" alt="博多密码"><br>BAUD0TC0DE<br>bugku{baud0tc0de}</p><h2 id="8、小山丘的秘密"><a href="#8、小山丘的秘密" class="headerlink" title="8、小山丘的秘密"></a>8、小山丘的秘密</h2><p>题目<br><img src="/picture/image-10.png" alt="小山丘的秘密"><br>flag.txt<br>bugku{PLGTGBQHM}<br>其中A=1，flag全为小写</p><p>解题过程<br>1、根据提示知道这是希尔（hill）密码<a href="http://www.atoolbox.net/Tool.php?Id=914&amp;ac=csdn">在线解密</a><br>根据flag.txt中A=1,一般希尔密码是A=0,B=1,C=2…所以字母表改成Z=0,A=1,B=2…<br>2、发现希尔密码还缺少密钥，密钥肯定在图片中，密钥根据小山丘的秘密的图片可以得到<img src="/picture/image-11.png" alt="密钥"><br>3、<img src="/picture/image-12.png" alt="希尔密码"><br>bugku{whatahill}</p><h2 id="9、EN-气泡"><a href="#9、EN-气泡" class="headerlink" title="9、EN-气泡"></a>9、EN-气泡</h2><p>题目<br>EN-气泡.txt</p><pre><code>xivak-notuk-cupad-tarek-zesuk-zupid-taryk-zesak-cined-tetuk-nasuk-zoryd-tirak-zysek-zaryd-tyrik-nisyk-nenad-tituk-nysil-hepyd-tovak-zutik-cepyd-toral-husol-henud-titak-hesak-nyrud-tarik-netak-zapad-tupek-hysek-zuned-tytyk-zisuk-hyped-tymik-hysel-hepad-tomak-zysil-nunad-tytak-nirik-copud-tevok-zasyk-nypud-tyruk-niryk-henyd-tityk-zyral-nyred-taryk-zesek-corid-tipek-zysek-nunad-tytal-hitul-hepod-tovik-zurek-hupyd-tavil-hesuk-zined-tetuk-zatel-hopod-tevul-haruk-cupod-tavuk-zesol-ninid-tetok-nasyl-hopid-teryl-nusol-heped-tovuk-hasil-nenod-titek-zyryl-hiped-tivyk-cosok-zorud-tirel-hyrel-hinid-tetok-hirek-zyped-tyrel-hitul-nyrad-tarak-hotok-cuvux</code></pre><p>1、根据题目得知这是BubbleBabble加密<br>2、在线解密<a href="http://ctf.ssleye.com/bubble.html">BubbleBabble</a><br>俄罗斯套娃套了三层<br><img src="/picture/image-13.png" alt="EN-气泡"><br>bugku{th1s_1s_A_Bubb13}</p><h2 id="10、你以为是md5吗"><a href="#10、你以为是md5吗" class="headerlink" title="10、你以为是md5吗"></a>10、你以为是md5吗</h2><p>题目<br>bci177a7a9c7udf69c248647b4dfc6fd84o</p><p>解题过程<br>1、<strong>知识点</strong>：128位2进制（0 1）代码，然后用16进制显示的，就是32位（128/4=32）。包含0-9a-f共16个字符<br>2、所以要把题目中的i、o、u,手动删除在进行在线解密bc177a7a9c7df69c248647b4dfc6fd84<br><a href="https://www.cmd5.com/">md5</a><br><img src="/picture/image-14.png" alt="md5"><br>flag{666666666666}</p><h2 id="11、Math-amp-English"><a href="#11、Math-amp-English" class="headerlink" title="11、Math&amp;English"></a>11、Math&amp;English</h2><p>题目<br>你会数学和英语吗?<br>3×7=<br>11×3=<br>sin(Π/6)+sin(Π/6)=<br>2×11=<br>3×cos(2Π)=<br>22×2=<br>6×9=<br>2.5×2=<br>tan(Π) + 1 =<br>5×7=<br>7×9-9=<br>ln(e) + 2 =<br>(6×6)-1= 35<br>4×10 + cos(0) =<br>26×2 =<br>ln(e) × 10 +3 =</p><p>解题过程<br>1、先将题目中的数学题目计算出来，得到一串数组21 33 1 22 3 44 54 5 1 35 54 3 35 41 52 13<br>2、发现数组都是由1 2 3 4 5构成的，根据题目提示发现是元音密码<br><img src="/picture/image-15.png" alt="元音密码表"><br>根据密码表解密得到明文：FLAG IS YUANYINPWD<br>所以flag是bugku{yuanyinpwd}</p><h2 id="12、easy-crypto"><a href="#12、easy-crypto" class="headerlink" title="12、easy_crypto"></a>12、easy_crypto</h2><p>题目<br>0010 0100 01 110 1111011 11 11111 010 000 0 001101 1010 111 100 0 001101 01111 000 001101 00 10 1 0 010 0 000 1 01111 10 11110 101011 1111101</p><p>解题过程<br>1、根据题目提示，猜测是二进制编码或者01摩斯电码<br>2、尝试解密<a href="https://tool.bugku.com/mosi/">摩斯</a><br><img src="/picture/image-16.png" alt="morse"><br>得到flag虽然图片里还有url的编码猜测就是{}<br>FLAG%u7bM0RSE_CODE_1S_INTEREST1N9!%u7d<br>所以flag{m0rse_code_1s_interest1n9!}</p><h2 id="12、黄道十二宫"><a href="#12、黄道十二宫" class="headerlink" title="12、黄道十二宫"></a>12、黄道十二宫</h2><p>题目<br><img src="/picture/image-17.png" alt="黄道十二宫"></p><p>解题过程<br>1、<strong>知识点</strong>：黄道十二宫杀手密码<a href="http://www.elecfans.com/d/1449230.html">详解</a><br>2、根据知识点将图片中的字符转成文本</p><pre><code>%..@*&gt;@?==%88%5.@%#@@90-7$^=*@17.(&gt;()1@##-$40~.*6?#%#8#=75+1(*@*1%#&gt;.0@5)%?%*^=)&amp;&gt;=1%.+7&amp;#8681(+8*@@(.@@@#*=#$3*#%.#%%.3.*+7.7+@===+)61</code></pre><p>大佬提示跟黄道十二宫杀手有关，搜索相关信息，需要用到AZdecrypt软件。<br>第一部分，第一个字符H，随后再向下移动一格，在向左移动两个，得到第二个字符+，以此类推。<br>pythonJ脚本实现</p><pre class=" language-python"><code class="language-python">_sec <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>r<span class="token string">"黄道十二宫杀手密码.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    _sec <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">assert</span> len<span class="token punctuation">(</span>_sec<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> _sec_lines <span class="token operator">=</span> _sec<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>_line_num <span class="token operator">=</span> len<span class="token punctuation">(</span>_sec_lines<span class="token punctuation">)</span>_line_ch_cnt <span class="token operator">=</span> len<span class="token punctuation">(</span>_sec_lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>_tmp <span class="token operator">=</span> <span class="token string">""</span> <span class="token keyword">for</span> _i <span class="token keyword">in</span> range<span class="token punctuation">(</span>_line_ch_cnt<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> _j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _line_num<span class="token punctuation">)</span><span class="token punctuation">:</span>        _tmp <span class="token operator">+=</span> _sec_lines<span class="token punctuation">[</span>_j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> _j <span class="token operator">+</span> _i<span class="token punctuation">)</span> <span class="token operator">%</span> _line_ch_cnt<span class="token punctuation">]</span> _reformat_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> _i <span class="token keyword">in</span> range<span class="token punctuation">(</span>_line_num<span class="token punctuation">)</span><span class="token punctuation">:</span>    _reformat_<span class="token punctuation">.</span>append<span class="token punctuation">(</span>_tmp<span class="token punctuation">[</span>_i <span class="token operator">*</span> _line_ch_cnt<span class="token punctuation">:</span><span class="token punctuation">(</span>_i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> _line_ch_cnt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> _key <span class="token keyword">in</span> _reformat_<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>_key<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>%%&gt;%;.@3*.#(#0+@#+.@)8@7@*7@@1#5&amp;8=.*9@=)#6#7&gt;0#7%%8$+@-#5?*13@?7-+(^(*==$$1*=+#==^4~@)8%=%=0.*&amp;*.+8*1*1&gt;@#)8@76%=@%6%..?#1(%15@(#&gt;%...</code></pre><p>解密软件<a href="https://www.majorgeeks.com/files/details/azdecrypt.html">AZdecrypt下载</a><br><img src="/picture/image-18.png" alt="AZdecrypt 解密"><br>FLAG ALPHAN ANKE<br>所以flag{alphananke}</p><h2 id="13、给你私钥吧"><a href="#13、给你私钥吧" class="headerlink" title="13、给你私钥吧"></a>13、给你私钥吧</h2><p>题目<br><img src="/picture/image-19.png" alt="题目"></p><p>解题过程<br><strong>知识点</strong><a href="https://www.jianshu.com/p/f3a364a880d7">知识点</a><br>1、这是rsa经典的类型可以用在线网站就公钥进行转化也可以用Linux进行转化<br>我这里提供在线转换<a href="http://ctf.ssleye.com/pub_asys.html">公钥解析</a><br><img src="/picture/image-20.png" alt="public key"><br>得到</p><pre><code>e = 65537n = 26405201714915839490865227813246218372938736243516916108608439705738170543023112509150522274284238701776297205717958250714972924576706985074311737321016048409831557758205687745692399643151467933196930799657476449865271038382866908177517793954543176769652784274788769353482450910551831498252972857285424471782215525406445071432588374802623485148684255853068532820859835479998199886719945699488858505070686919320144576280217196858823521754407597888769668827432569034617434944912323704501156532854074083408527717809315663187405585840074689387865750105223058720511199252150772925124516509254841404742306560035497627834727</code></pre><p>2、在线分解n<a href="http://www.factordb.com/index.php">分解大素数</a><br><img src="/picture/image-21.png" alt="n分解"></p><pre><code>p = 157790417717035275943197904823645145281147085252905247447260034051878691034747684303715336348507267921249655103263347914128144476912685213431110454636244692224328066884510063590700506729345331153483633231327359450199822698241355428609085077662488946173655043172957247264543259611018596088670385591091710018977q = 167343506005974003380506069679607737381940204686173214188860057004909006055220516074283090160430833007424970980655748310232878462615469792561310560310363430669700009093597847018287568821792168143170329382585883857083334915378884054389878477389765792275111293420203613159303898365894897865177093362621517279751</code></pre><p>3、计算phi = (p - 1) * (q - 1)，d = invmod(e, phi)，u = invmod(p, q)</p><pre><code>d = libnum.invmod(e, (p - 1) * (q - 1))u = libnum.invmod(p, q)</code></pre><p>构造privatekey</p><pre><code>private_key = RSA.construct((n, e, d, p, q, u))</code></pre><p>恢复明文</p><pre><code>with open(r"./tmp/flag.enc", "rb") as f:    cipher_txt = f.read()cipher_txt = base64.decodebytes(cipher_txt)decipher = PKCS1_OAEP.new(private_key)flag = decipher.decrypt(cipher_txt)print(flag)</code></pre><p>4、写Python脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> PKCS1_OAEP<span class="token keyword">import</span> base64<span class="token keyword">import</span> libnum  <span class="token keyword">def</span> <span class="token function">decrypt_rsa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token number">26405201714915839490865227813246218372938736243516916108608439705738170543023112509150522274284238701776297205717958250714972924576706985074311737321016048409831557758205687745692399643151467933196930799657476449865271038382866908177517793954543176769652784274788769353482450910551831498252972857285424471782215525406445071432588374802623485148684255853068532820859835479998199886719945699488858505070686919320144576280217196858823521754407597888769668827432569034617434944912323704501156532854074083408527717809315663187405585840074689387865750105223058720511199252150772925124516509254841404742306560035497627834727</span>    e <span class="token operator">=</span> <span class="token number">65537</span>    q <span class="token operator">=</span> <span class="token number">157790417717035275943197904823645145281147085252905247447260034051878691034747684303715336348507267921249655103263347914128144476912685213431110454636244692224328066884510063590700506729345331153483633231327359450199822698241355428609085077662488946173655043172957247264543259611018596088670385591091710018977</span>    p <span class="token operator">=</span> <span class="token number">167343506005974003380506069679607737381940204686173214188860057004909006055220516074283090160430833007424970980655748310232878462615469792561310560310363430669700009093597847018287568821792168143170329382585883857083334915378884054389878477389765792275111293420203613159303898365894897865177093362621517279751</span>     d <span class="token operator">=</span> libnum<span class="token punctuation">.</span>invmod<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    u <span class="token operator">=</span> libnum<span class="token punctuation">.</span>invmod<span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>    private_key <span class="token operator">=</span> RSA<span class="token punctuation">.</span>construct<span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">,</span> d<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">with</span> open<span class="token punctuation">(</span>r<span class="token string">"D:\\BugKu\\Crypto\\给你私钥吧\\flag.enc"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        cipher_txt <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    cipher_txt <span class="token operator">=</span> base64<span class="token punctuation">.</span>decodebytes<span class="token punctuation">(</span>cipher_txt<span class="token punctuation">)</span>    decipher <span class="token operator">=</span> PKCS1_OAEP<span class="token punctuation">.</span>new<span class="token punctuation">(</span>private_key<span class="token punctuation">)</span>    flag <span class="token operator">=</span> decipher<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher_txt<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>  <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    decrypt_rsa<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true">#bugku{tw0_Tig3rs_l0V3_d4nc1ng~ei!}</span></code></pre><h2 id="14、一段新闻"><a href="#14、一段新闻" class="headerlink" title="14、一段新闻"></a>14、一段新闻</h2><p>题目<br>一段新闻.txt</p><pre><code>近日，教育部、财政部印发《关于实施中小学幼儿园教师国家级培训计划（2021—2025年）的通知》（以下简称《通知》），明确“十四五”期间“国培计划”实施思路、支持方向、工作重点，推进教师培训提质增效，助力教师队伍高质量发展。‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‍‌‍‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‍‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‌‌‍‍​‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‍‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‌‌‍‍​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌‌‍‍‍​‌‌‌‍‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‍‌‌‌‌​‌‌‍‌​‍‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‍‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌​‍‍‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‍‌‌‌​‌‌‌‌‍​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‍‌‍‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‍‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌‌‌‌‌​‌‌‌‍‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‍‍​‍‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‍‌‌‌​‍‌‍‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‍‌​‌‌‌‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌‌‌‌‌​‌‌‌‍‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌‌‌‌‌​‌‌‌‍‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌​‍‍‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‍‌‌‌​‌‌‌‌‍​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌​‍‍‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‍‌‌‌​‌‌‌‌‍​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‍‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌​‍‍‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‍‌‌‌​‌‌‌‌‍​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌​‍‍‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‍‌‌‌​‌‌‌‌‍​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌​‍‍‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‍‌‌‌​‌‌‌‌‍​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌​‍‍‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‍‌‌‌​‌‌‌‌‍​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌‌‌‌‌​‌‌‌‍‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌‌​‍‍‍‍‍​‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‍‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌​‍‍‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‍‌‌‌​‌‌‌‌‍​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌​‍‍‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‍‌‌‌​‌‌‌‌‍​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌‌‌‌‌​‌‌‌‍‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‍‍​‍‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‍‌‌‌​‍‌‍‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‍‌​‌‌‌‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌​‍‍‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‍‌‌‌​‌‌‌‌‍​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌​‍‍‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‍‌‌‌​‌‌‌‌‍​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌​‍‍‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‍‌‌‌​‌‌‌‌‍​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‍‌‍‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌‌‍‍‍​‌‌‌‍‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‍‌‌‌‌​‌‌‍‌​‍‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌‌‌‌‌​‌‌‌‍‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌​‍‍‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‍‌‌‌​‌‌‌‌‍​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌‌​‍‍‍‍‍​‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‍‍​‍‍‍‍‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌‌‌‌‌​‌‌‌‍‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‍‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‌‌‍‍​‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌‌‌‌‌​‌‌‌‍‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌‌‌‌‌​‌‌‌‍‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌​‍‍‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‍‌‌‌​‌‌‌‌‍​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌​‍‍‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‍‌‌‌​‌‌‌‌‍​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‍‍​‍‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‍‌‍‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‍‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‍‍​‍‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‍‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‍‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‌‌‍‍​‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‍‍​‍‍‍‍‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‍‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‌‌‍‍​‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‍‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‍‍​‍‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‍‌‍‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‍‍​‍‍‍‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌​‍‍‌‌‌​‌‌‌‍‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‍‌‌‌​‌‌‌‌‍​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‍‌​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‍‌​‌‍‍‍‍​‍‍‍‍‍《通知》要求，“十四五”期间，要重点支持中西部欠发达地区农村义务教育学校、幼儿园骨干教师、校园长和培训者深度培训；实现巩固拓展教育脱贫攻坚成果同乡村振兴有效衔接，支持国家乡村振兴重点帮扶县教师校长能力整体提升；辐射带动省、市、县、校级教师培训，实现教师培训全覆盖。 《通知》从培训内容体系、机制改革、能力建设、监管评价4个方面明确10项重点工作。在内容方面，强调要突出教师核心素养培养，将思想政治和师德师风作为必修内容。在机制改革方面，强调要实行分层分类精准培训，建立教师自主发展机制；创新教师发展协同机制，深入实施教师发展“一对一”精准帮扶；推动人工智能与教师培训融合，探索“智能+教师培训”，形成人工智能支持教师终身学习、持续发展的机制。在能力建设方面，强调要完善教师专业发展支持服务体系，加强市县教师发展机构专业化建设，建强专业化教师培训队伍，加强培训资源和平台建设，实现优质资源全面覆盖、全体共享。在监管评价方面，强调强化培训实施的监管评价，对教师学习过程和效果进行综合评价，适时提供反馈和跟踪指导。</code></pre><p>解题过程<br>1、先用010editor打开一段新闻.txt<br><img src="/picture/image-22.png" alt="一段新闻"><br>发现空白的地方也存在字符，而且还是特殊字符<br>这就让我想到了隐藏字符加密<a href="http://www.atoolbox.net/Tool.php?Id=829">隐藏字符加接解密</a><br><img src="/picture/image-23.png" alt="解密"></p><pre><code>公正公正公正友善公正公正民主公正法治法治诚信民主法治法治公正爱国法治敬业平等友善敬业公正自由和谐富强公正诚信自由法治自由平等诚信平等法治敬业公正诚信平等法治平等平等诚信平等法治自由法治文明法治敬业平等诚信平等法治自由和谐富强平等诚信平等法治平等公正友善爱国公正自由公正平等法治文明法治和谐法治自由公正民主公正诚信自由公正自由平等诚信平等法治和谐公正友善敬业公正和谐公正敬业公正民主和谐民主公正敬业法治和谐公正友善法治和谐诚信平等法治诚信和谐</code></pre><p>2、再用社会主义核心价值观解码<a href="http://www.hiencode.com/cvencode.html">核心价值观编码</a><br><img src="/picture/image-24.png" alt="解密"><br>flag{why_d0nt_you_try_t0_understand_socia1ism?}</p>]]></content>
      
      
      <categories>
          
          <category> BugKu-Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bugku </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu wp</title>
      <link href="2021/0912undefined.html"/>
      <url>2021/0912undefined.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1、MD5"><a href="#1、MD5" class="headerlink" title="1、MD5"></a>1、MD5</h2><p>题目<br>e00cf25ad42683b3df678c61f42c6bda<br>解题过程<br>1、了解什么是MD5加密<br>2、粗略了解加密的过程及其特点<br>3、上百度搜索解密的网站<a href="https://www.cmd5.com/">md5</a><br><img src="/images/image-34.png" alt="Image text"><br>flag{admin1}</p><h2 id="2、一眼就解密"><a href="#2、一眼就解密" class="headerlink" title="2、一眼就解密"></a>2、一眼就解密</h2><p>题目<br>flag：ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=<br>解题过程<br>通过特征分析发现这是base类别的加密<br>所以<a href="http://ctf.ssleye.com/base64.html">base编码</a><br><img src="/images/image-35.png" alt="Image text"><br>flag{THE_FLAG_OF_THIS_STRING}</p><h2 id="3、Url编码"><a href="#3、Url编码" class="headerlink" title="3、Url编码"></a>3、Url编码</h2><p>题目<br>%66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d<br>解题过程<br>1、url编码是将一个字符的assci码编码成16进制的方式然后在前面加一个%<br>2、url的编码的特点为十六进制数前面加上%<br>3、可以用C语言或python，写个脚本这里我就不写了，直接找度娘了，解码网站在下面<a href="http://ctf.ssleye.com/url.html">URL编码</a><br><img src="/images/image-36.png" alt="Image text"></p><h2 id="4、看我回旋踢"><a href="#4、看我回旋踢" class="headerlink" title="4、看我回旋踢"></a>4、看我回旋踢</h2><p>题目<br>synt{5pq1004q-86n5-46q8-o720-oro5on0417r1}<br>解答过程<br>1、通过对常见密码的了解，可以猜测这是一个凯撒密码或者叫做移位密码<br>2、凯撒密码的介绍：<br><img src="/images/image-37.png" alt="Image text"><br>3、通过解密工具进行尝试解密恺撒解密<a href="https://tool.bugku.com/jiemi/">凯撒解密网站</a>33<br><img src="/images/image-38.png" alt="Image text"></p><h2 id="5、摩丝"><a href="#5、摩丝" class="headerlink" title="5、摩丝"></a>5、摩丝</h2><p>题目<br>.. .-.. — …- . -.– — ..-<br>解答过程<br>1、了解摩斯密码的加密方式<br>2、<img src="/images/image-39.png" alt="Image text"><br>3、<a href="https://tool.bugku.com/mosi/">摩斯密码</a><br><img src="/images/image-40.png" alt="Image text"></p><h2 id="6、password"><a href="#6、password" class="headerlink" title="6、password"></a>6、password</h2><p>题目<br>姓名：张三<br>生日：19900315<br>key格式为key{xxxxxxxxxx}<br>解题过程<br>通过过题目提示得到flag{xxxxxxxxxx}<br>根据题目信息联想尝试flag{ZS19900315}<br>所以flag就是上买你这个答案。</p><h2 id="7、变异凯撒"><a href="#7、变异凯撒" class="headerlink" title="7、变异凯撒"></a>7、变异凯撒</h2><p>题目<br>加密密文：afZ_r9VYfScOeO_UL^RWUc<br>格式：flag{ }<br>解答过程<br>1、<img src="/images/image-41.png" alt="Image text"><br>2、显然这里不是简单的凯撒加密，因为凯撒加密的对象为二十六个英文字母，看到_、^我们可以想到ASCll码<img src="/images/image-42.png" alt="Image text"><br>对照知道该字符串移位了5,解密脚本如下：</p><pre class=" language-python"><code class="language-python">m<span class="token operator">=</span><span class="token string">'afZ_r9VYfScOeO_UL^RWUc'</span>j<span class="token operator">=</span><span class="token number">5</span><span class="token keyword">for</span> i <span class="token keyword">in</span> m<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    j <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>flag{Caesar_variation}</p><h2 id="8、Quoted-printable"><a href="#8、Quoted-printable" class="headerlink" title="8、Quoted-printable"></a>8、Quoted-printable</h2><p>题目<br>=E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6<br>解题过程<br>1、通过百度查询题目知道这是一种编码方式<br>2、我这里提供一个网址在线解码方式<a href="http://ctf.ssleye.com/quoted.html">Quoted-printable编码</a><br><img src="/images/image-43.png" alt="Image text"><br>flag{那你也很棒哦}</p><h2 id="9、Rabbit"><a href="#9、Rabbit" class="headerlink" title="9、Rabbit"></a>9、Rabbit</h2><p>题目<br>U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI<br>解答过程<br>1、分析题目，通过度娘搜索得到Rabbit这是一种密码<br>2、然后我这里提供一个网址，在线解析得<a href="http://www.jsons.cn/rabbitencrypt/">Rabbit</a><br><img src="/images/image-44.png" alt="Image text"><br>flag{Cute_Rabbit}</p><h2 id="10、篱笆墙的影子"><a href="#10、篱笆墙的影子" class="headerlink" title="10、篱笆墙的影子"></a>10、篱笆墙的影子</h2><p>题目<br>felhaagv{ewtehtehfilnakgw}<br>解答<br>1、有题目形式可以看出这是一个栅栏密码<br>2、在线加密<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">栅栏解密</a><br>3、尝试解答<br><img src="/images/image-45.png" alt="Image text"><br>题目共有26个字母把26分解成因素1,2,13,26排除掉1和字符串长度，<br><img src="/images/image-46.png" alt="Image text"><br>flag{wethinkwehavetheflag}</p><h2 id="11、RSA"><a href="#11、RSA" class="headerlink" title="11、RSA"></a>11、RSA</h2><p>题目<br>在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17<br>求解出d作为flag提交<br>解题脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2p <span class="token operator">=</span> <span class="token number">473398607161</span>q <span class="token operator">=</span> <span class="token number">4511491</span>e <span class="token operator">=</span> <span class="token number">17</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span></code></pre><h2 id="12、丢失的MD5"><a href="#12、丢失的MD5" class="headerlink" title="12、丢失的MD5"></a>12、丢失的MD5</h2><p>题目<br><img src="/images/image-47.png" alt="Image text"><br>用python IDLE打开得到<br><img src="/images/image-48.png" alt="Image text"><br>直接改下脚本运行一下就出来了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            m <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            s <span class="token operator">=</span> <span class="token string">'TASC'</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'O3RJMV'</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'WDJKX'</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'ZM'</span>            m<span class="token punctuation">.</span>update<span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            des<span class="token operator">=</span>m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'e9032'</span> <span class="token keyword">in</span> des <span class="token operator">and</span> <span class="token string">'da'</span> <span class="token keyword">in</span> des <span class="token operator">and</span> <span class="token string">'911513'</span> <span class="token keyword">in</span> des<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>des<span class="token punctuation">)</span>                <span class="token keyword">break</span></code></pre><p>flag{e9032994dabac08080091151380478a2}</p><h2 id="13、Alice与Bob"><a href="#13、Alice与Bob" class="headerlink" title="13、Alice与Bob"></a>13、Alice与Bob</h2><p>题目<br>密码学历史中，有两位知名的杰出人物，Alice和Bob。他们的爱情经过置换和轮加密也难以混淆，即使是没有身份认证也可以知根知底。就像在数学王国中的素数一样，孤傲又热情。下面是一个大整数:98554799767,请分解为两个素数，分解后，小的放前面，大的放后面，合成一个新的数字，进行md5的32位小写哈希，提交答案。 注意：得到的 flag 请包上 flag{} 提交<br>解答过程<br>1、<a href="http://www.factordb.com/index.php">在线分解素数</a><br><img src="/images/image-49.png" alt="Image text"><br>2、<a href="https://www.cmd5.com/">md5在线解密</a><br><img src="/images/image-50.png" alt="Image text"><br>flag{ d450209323a847c8d01c6be47c81811a}</p><h2 id="14、rsarsa"><a href="#14、rsarsa" class="headerlink" title="14、rsarsa"></a>14、rsarsa</h2><p>Math is cool! Use the RSA algorithm to decode the secret message, c, p, q, and e are parameters for the RSA algorithm.</p><p>p =  9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483<br>q =  11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407<br>e =  65537<br>c =  83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</p><p>Use RSA to find the secret message<br>解题脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2p <span class="token operator">=</span>  <span class="token number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span>q <span class="token operator">=</span>  <span class="token number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span>e <span class="token operator">=</span>  <span class="token number">65537</span>c <span class="token operator">=</span>  <span class="token number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span>n <span class="token operator">=</span> p<span class="token operator">*</span>qphi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre><p>flag{5577446633554466577768879988}</p><h2 id="15、大帝的密码武器"><a href="#15、大帝的密码武器" class="headerlink" title="15、大帝的密码武器"></a>15、大帝的密码武器</h2><p>下载文件是一个没有文件后缀的文件，我们手动添加一个文件后缀zip。<br>密文：ComeChina<br>题目：<br>公元前一百年，在罗马出生了一位对世界影响巨大的人物，他生前是罗马三巨头之一。他率先使用了一种简单的加密函，因此这种加密方法以他的名字命名。<br>以下密文被解开后可以获得一个有意义的单词：FRPHEVGL<br>你可以用这个相同的加密向量加密附件中的密文，作为答案进行提交。<br>1、猜测是凯撒密码，先将题目中的密文进行解密<a href="https://tool.bugku.com/jiemi/">凯撒在线解密</a><br><img src="/images/image-51.png" alt="Image text"><br>发现题目中的密文通过密钥是13的凯撒加密得到了SECURITY。<br>所以密文ComeChina也通过密钥是13的凯撒加密得到PbzrPuvan<br>所以flag{PbzrPuvan}</p><h2 id="16、Windows系统密码"><a href="#16、Windows系统密码" class="headerlink" title="16、Windows系统密码"></a>16、Windows系统密码</h2><p>题目<br>Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>ctf:1002:06af9108f2e1fecf144e2e8adef09efd:a7fcb22a88038f35a8f39d503e7f0062:::<br>Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>SUPPORT_388945a0:1001:aad3b435b51404eeaad3b435b51404ee:bef14eee40dffbc345eeb3f58e290d56:::<br>解答过程<br>1、可以用在线解密进行尝试<a href="https://www.cmd5.com/">在线解密</a>将题目中的hash代码段进行尝试解密<br><img src="/images/image-52.png" alt="Image text"><br>也可以将文件拖入kali中，用kali的工具破解<br>john pass.hash<br>john –show –format=LM pass.hash<br><img src="/images/image-53.png" alt="Image text"><br>所以flag{GOOD-LUCK}</p><h2 id="17、信息化时代的步伐"><a href="#17、信息化时代的步伐" class="headerlink" title="17、信息化时代的步伐"></a>17、信息化时代的步伐</h2><p>题目<br>606046152623600817831216121621196386<br>解答过程<br>1、先对题目数据进行分析发现数值都是o-9试一下16进制转化发现没用<br>2、后面通过题目提示中发现要把数值转化成中文<br><img src="/images/image-54.png" alt="Image text"><br>发现这是中文电码<a href="http://code.mcdvisa.com/">在线转化</a><br><img src="/images/image-55.png" alt="Image text"><br>得到flag{计算机要从娃娃抓起}</p><h2 id="18、传统知识-古典加密"><a href="#18、传统知识-古典加密" class="headerlink" title="18、传统知识+古典加密"></a>18、传统知识+古典加密</h2><p>题目<br>小明某一天收到一封密信，信中写了几个不同的年份<br>          辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳。<br>          信的背面还写有“+甲子”，请解出这段密文。</p><p>key值：CTF{XXX}<br>解答过程<br>了解天干地支和六十一甲子<a href="http://114.xixik.com/tiangandizhi/">传统知识</a><br><img src="/images/image-56.png" alt="Image text"><br><img src="/images/image-57.png" alt="Image text"><br><img src="/images/image-58.png" alt="Image text"><br>所以辛卯-28、癸巳-30、丙戌-23、辛未-8、庚辰-17、癸酉-10、己卯-16、癸巳-30。<br>把这个值再加一甲子也就是+60得到ASCII码，就88 90 83 68 77 70 76 90，ASCII码为XZSDMFLZ，然后看字符传猜测这是一个栅栏密码或者替换密码然后<a href="https://ctftools.com/down/">在线解密</a><br><img src="/images/image-83.png" alt="Image text"><br>所以flag{shuangyu}</p><h2 id="19、凯撒？替换？呵呵"><a href="#19、凯撒？替换？呵呵" class="headerlink" title="19、凯撒？替换？呵呵!"></a>19、凯撒？替换？呵呵!</h2><p>题目<br>MTHJ{CUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO}<br>解答过程<br>1、直接爆破<a href="https://quipqiup.com/">在线爆破</a><br><img src="/images/image-59.png" alt="Image text"><br>FLAG{SUBSTITUTIOVCIPHERMECRYPTIOVISALWAYSEASYJUSTLIKEAPIECEOFCAKE}</p><h2 id="20、RSA1"><a href="#20、RSA1" class="headerlink" title="20、RSA1"></a>20、RSA1</h2><p>题目<br>p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229<br>q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469<br>dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929<br>dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041<br>c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852<br>解题过程<br>类型：dp+dq+p+q+c = m<br>1、了解RSA中<strong>dp</strong>、<strong>dq</strong>泄露攻击<br>首先了解一下什么是<strong>dp</strong>：<br><strong>dp=d%(p-1)</strong><br>与之对应的还有<strong>dq</strong>：<br><strong>dq=d%(q-1)</strong><br>2、了解中国剩余定理<br>mp=c ^ dp ( mod p)<br>mq=c ^ dq ( mod q)<br>3、求明文 m = (((mp-mq)*I)%p)*q+mq <strong>乘法逆元：I=invert(q,p)</strong><br>解题脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span> q <span class="token operator">=</span> <span class="token number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span> dp <span class="token operator">=</span> <span class="token number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span> dq <span class="token operator">=</span> <span class="token number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span> c <span class="token operator">=</span> <span class="token number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span><span class="token comment" spellcheck="true">#n = p * q</span>I <span class="token operator">=</span> invert<span class="token punctuation">(</span>q<span class="token punctuation">,</span>p<span class="token punctuation">)</span>mp <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>dp<span class="token punctuation">,</span>p<span class="token punctuation">)</span>mq <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>dq<span class="token punctuation">,</span>q<span class="token punctuation">)</span>m<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mp<span class="token operator">-</span>mq<span class="token punctuation">)</span><span class="token operator">*</span>I<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">*</span>q<span class="token operator">+</span>mq<span class="token comment" spellcheck="true">#m = m % n如果m很大就加上这个</span>flag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##noxCTF{W31c0m3_70_Ch1n470wn}</span></code></pre><h2 id="21、萌萌哒的八戒"><a href="#21、萌萌哒的八戒" class="headerlink" title="21、萌萌哒的八戒"></a>21、萌萌哒的八戒</h2><p>题目<br><img src="/images/image-60.jpg" alt="Image text"><br>解题过程<br>1、这是一个猪圈密码直接<a href="http://www.metools.info/code/c90.html">在线解密</a><br><img src="/images/image-60.png" alt="Image text"><br>flag{whenthepigwanttoeat}</p><h2 id="22、old-fashion"><a href="#22、old-fashion" class="headerlink" title="22、old-fashion"></a>22、old-fashion</h2><p>题目<br>Os drnuzearyuwn, y jtkjzoztzoes douwlr oj y ilzwex eq lsdexosa kn pwodw tsozj eq ufyoszlbz yrl rlufydlx pozw douwlrzlbz, ydderxosa ze y rlatfyr jnjzli; mjy gfbmw vla xy wbfnsy symmyew (mjy vrwm qrvvrf), hlbew rd symmyew, mebhsymw rd symmyew, vbomgeyw rd mjy lxrzy, lfk wr dremj. Mjy eyqybzye kyqbhjyew mjy myom xa hyedrevbfn lf bfzyewy wgxwmbmgmbrf. Wr mjy dsln bw f1_2jyf-k3_jg1-vb-vl_l<br>解题过程<br>1、刚开始尝试用凯撒密码解密，发现解密不出来应该是文本太大了<a href="https://tool.bugku.com/jiemi/"></a><br><img src="/images/image-61.png" alt="Image text"><br>2、后面还是选择词频分析<a href="https://quipqiup.com/">在线爆破</a><br><img src="/images/image-62.png" alt="Image text"></p><h2 id="23、权限获得第一步"><a href="#23、权限获得第一步" class="headerlink" title="23、权限获得第一步"></a>23、权限获得第一步</h2><p>题目<br>Administrator:500:806EDC27AA52E314AAD3B435B51404EE:F4AD50F57683D4260DFD48AA351A17A8:::</p><p>直接用MD5<a href="https://www.cmd5.com/">在线解密</a>就得到flag<br><img src="/images/image-63.png" alt="Image text"><br>flag{3617656}</p><h2 id="24、世上无难事"><a href="#24、世上无难事" class="headerlink" title="24、世上无难事"></a>24、世上无难事</h2><p>题目<br>VIZZB IFIUOJBWO NVXAP OBC XZZ UKHVN IFIUOJBWO HB XVIXW XAW VXFI X QIXN VBD KQ IFIUOJBWO WBKAH NBWXO VBD XJBCN NKG QLKEIU DI XUI VIUI DKNV QNCWIANQ XN DXPIMKIZW VKHV QEVBBZ KA XUZKAHNBA FKUHKAKX XAW DI VXFI HBN QNCWIANQ NCAKAH KA MUBG XZZ XEUBQQ XGIUKEX MUBG PKAWIUHXUNIA NVUBCHV 12NV HUXWI XAW DI XUI SCQN QB HZXW NVXN XZZ EBCZW SBKA CQ NBWXO XAW DI DXAN NB NVXAP DXPIMKIZW MBU JIKAH QCEV XA BCNQNXAWKAH VBQN HKFI OBCUQIZFIQ X JKH UBCAW BM XLLZXCQI XAW NVI PIO KQ 640I11012805M211J0XJ24MM02X1IW09</p><p>解题分析<br>1、先用词频分析<a href="https://quipqiup.com/">在线爆破</a><br><img src="/images/image-64.png" alt="Image text"><br>2、在把大写转小写<a href="https://www.bejson.com/convert/uplowercase/">在线转化</a><br><img src="/images/image-65.png" alt="Image text"></p><h2 id="25、RSA3"><a href="#25、RSA3" class="headerlink" title="25、RSA3"></a>25、RSA3</h2><p>题目</p><pre><code>c1=22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361n=22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801e1=11187289c2=18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397e2=9647291</code></pre><p>解答过程<br><strong>知识点</strong>（欠缺）<br>1、这RSA加密类型中的共模攻击<br>扩展欧几里得</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    g<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">=</span> exgcd<span class="token punctuation">(</span>b <span class="token operator">%</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>g<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token punctuation">(</span>b <span class="token operator">//</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre><p>解密脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2c1<span class="token operator">=</span><span class="token number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span>n<span class="token operator">=</span><span class="token number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span>e1<span class="token operator">=</span><span class="token number">11187289</span>c2<span class="token operator">=</span><span class="token number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span>e2<span class="token operator">=</span><span class="token number">9647291</span><span class="token keyword">def</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    g<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">=</span> exgcd<span class="token punctuation">(</span>b <span class="token operator">%</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>g<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token punctuation">(</span>b <span class="token operator">//</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> y<span class="token punctuation">)</span>s <span class="token operator">=</span> exgcd<span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c1<span class="token punctuation">,</span>s<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">*</span>pow<span class="token punctuation">(</span>c2<span class="token punctuation">,</span>s<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">%</span>nflag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># flag{49d91077a1abcb14f1a9d546c80be9ef}</span></code></pre><h2 id="26、RSA2"><a href="#26、RSA2" class="headerlink" title="26、RSA2"></a>26、RSA2</h2><p>题目</p><pre><code>e = 65537n = 248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113dp = 905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657c = 140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</code></pre><p>解题过程<br>1、这是RSA中的dp泄露的攻击类型<br>dp = d%(p-1)<br><img src="/images/image-66.png" alt="Image text"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">65538</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token operator">*</span>e<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">%</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dp<span class="token operator">*</span>e<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dp<span class="token operator">*</span>e<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>            q<span class="token operator">=</span>n<span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dp<span class="token operator">*</span>e<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>            d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span><span class="token operator">%</span>phi</code></pre><p>2、根据上面的原理写脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2e <span class="token operator">=</span> <span class="token number">65537</span>n <span class="token operator">=</span> <span class="token number">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span>dp <span class="token operator">=</span> <span class="token number">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span>c <span class="token operator">=</span> <span class="token number">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">*</span>dp<span class="token operator">%</span>x<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token operator">*</span>dp<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">//</span>x<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>p<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        q<span class="token operator">=</span>n<span class="token operator">//</span>p        phi <span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>        d<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>        m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>flag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><h2 id="27、异性相吸"><a href="#27、异性相吸" class="headerlink" title="27、异性相吸"></a>27、异性相吸</h2><p>题目<br>key.txt:<br>asadsasdasdasdasdasdasdasdasdasdqwesqf<br>密文。txt：<br>ἇ̀Ј唒ဃ塔屋䩘卖剄䐃堂ن䝔嘅均ቄ䩝ᬔ</p><p>解答过程<br>1、打开文件发现两串毫无联系的密文<br>2、通过题目名称怀疑是异或，所以用010editor打开两个文件发现两个长度是一样的<br><img src="/images/image-67.png" alt="Image text"><br><img src="/images/image-68.png" alt="Image text"><br>直接写解题脚本</p><pre class=" language-python"><code class="language-python">key <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"D:/bandzip 解压/b8c1caee-43d6-42ee-aecc-d72502a5ade2/key.txt"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>cipher <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"D:/bandzip 解压/b8c1caee-43d6-42ee-aecc-d72502a5ade2/密文.txt"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>result <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    result <span class="token operator">+=</span> chr<span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>flag{ea1bc0988992276b7f95b54a7435e89e}</p><h2 id="28、还原大师"><a href="#28、还原大师" class="headerlink" title="28、还原大师"></a>28、还原大师</h2><p>题目<br>我们得到了一串神秘字符串：TASC?O3RJMV?WDJKX?ZM,问号部分是未知大写字母，为了确定这个神秘字符串，我们通过了其他途径获得了这个字串的32位MD5码。但是我们获得它的32位MD5码也是残缺不全，E903???4DAB????08?????51?80??8A?,请猜出神秘字符串的原本模样，并且提交这个字串的32位MD5码作为答案<br>解题过程<br>只能用python写脚本爆破了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token comment" spellcheck="true">#print hashlib.md5(s).hexdigest().upper()</span>k <span class="token operator">=</span> <span class="token string">'TASC?O3RJMV?WDJKX?ZM'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp1 <span class="token operator">=</span> k<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">65</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp2 <span class="token operator">=</span> temp1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">,</span>chr<span class="token punctuation">(</span><span class="token number">65</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp3 <span class="token operator">=</span> temp2<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">,</span>chr<span class="token punctuation">(</span><span class="token number">65</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>            s <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>temp3<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'E903'</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># flag{E9032994DABAC08080091151380478A2}</span></code></pre><h2 id="29、Unencode"><a href="#29、Unencode" class="headerlink" title="29、Unencode"></a>29、Unencode</h2><p>题目<br>89FQA9WMD&lt;V1A&lt;V1S83DY.#&lt;W3$Q,2TM]<br>通过题目可以看出这是一种加密方式直接<a href="http://ctf.ssleye.com/uu.html">在线解密</a><br><img src="/images/image-69.png" alt="Image text"></p><p>flag{dsdasdsa99877LLLKK}</p><h2 id="30、RSA"><a href="#30、RSA" class="headerlink" title="30、RSA"></a>30、RSA</h2><p>题目<br><img src="/images/image-70.png" alt="Image text"><br>解题过程<br>1、题目是一个明文文件和一个公钥<br><img src="/images/image-71.png" alt="Image text"><br><img src="/images/image-72.png" alt="Image text"><br>2、<a href="http://ctf.ssleye.com/pub_asys.html">在线公钥解析</a><br><img src="/images/image-73.png" alt="Image text"><br>3、写Python脚本<br>在线把n分解成p、q<a href="http://www.factordb.com/index.php">在线分解</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Cryto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2n <span class="token operator">=</span> <span class="token number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span>c <span class="token operator">=</span> <span class="token number">29666689760194689065394649908301285751747553295673979512822807815563732622178</span>e <span class="token operator">=</span> <span class="token number">65537</span>p <span class="token operator">=</span> <span class="token number">285960468890451637935629440372639283459</span>q <span class="token operator">=</span> <span class="token number">304008741604601924494328155975272418463</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>flag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{decrypt_256}</span></code></pre><h2 id="31、-AFCTF2018-Morse"><a href="#31、-AFCTF2018-Morse" class="headerlink" title="31、[AFCTF2018]Morse"></a>31、[AFCTF2018]Morse</h2><p>题目<br>-…./.—-/-…./-…./-…./…–/–…/….-/-…./-…./–…/-…/…–/.—-/–…/…–/..—/–…/–…/….-/…../..-./–…/…–/…–/—–/…../..-./…–/…–/…–/….-/…–/…../–…/—-./–…/-..<br>解答过程<br>直接在线解密<a href="https://tool.bugku.com/mosi/">摩斯网站</a><br><img src="/images/image-74.png" alt="Image text"><br>flag{61666374667B317327745F73305F333435797D}</p><h2 id="32、RSAROLL"><a href="#32、RSAROLL" class="headerlink" title="32、RSAROLL"></a>32、RSAROLL</h2><p>题目<br>RSA roll！roll！roll！<br>Only number and a-z<br>（don’t use editor<br>which MS provide）<br>data.txt</p><pre><code>{920139713,19}70479679275221115227470416418414022368270835483295235263072905459788476483295235459788476663551792475206804459788476428313374475206804459788476425392137704796792458265677341524652483295235534149509425392137428313374425392137341524652458265677263072905483295235828509797341524652425392137475206804428313374483295235475206804459788476306220148</code></pre><p>解题过程<br>1、RSA类型中的按行加密<br>2、在线把N分解成p、q<br><img src="/images/image-75.png" alt="Image text"><br>直接用脚本解密</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token number">920139713</span>e <span class="token operator">=</span> <span class="token number">19</span>p <span class="token operator">=</span> <span class="token number">18443</span>q <span class="token operator">=</span> <span class="token number">49891</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"D:\\python 脚本\\RSAROLL.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        line<span class="token operator">=</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#去掉列表中每一个元素的换行符</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>int<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{13212je2ue28fy71w8u87y31r78eu1e2}</span></code></pre><h2 id="33、robomunication"><a href="#33、robomunication" class="headerlink" title="33、robomunication"></a>33、robomunication</h2><p>题目<br><img src="/images/image-76.png" alt="Image text"></p><p>解题过程<br>这是一个MP3音频文件用Audacity听，发现是摩斯密码<br>听完整理一下就是…. . .-.. .-.. — .– …. .- - .. … - …. . -.- . -.– .. - .. … -… — — .–. -… . . .–.<br>再用摩斯在线解密<a href="https://tool.bugku.com/mosi/">摩斯网站</a><br><img src="/images/image-77.png" alt="Image text"><br>flag{HELLOWHATISTHEKEYITISBOOPBEEP}</p><h2 id="34、Cipher"><a href="#34、Cipher" class="headerlink" title="34、Cipher"></a>34、Cipher</h2><p>题目<br>还能提示什么呢？公平的玩吧（密钥自己找） Dncnoqqfliqrpgeklwmppu</p><p>解题过程<br>1、根据题目提示来了解这个是一个Playfair Cipher 加密的密文<br>2、因为没有密钥只能选择在线解密尝试密钥key:playfair<a href="http://rumkin.com/tools/cipher/playfair.php">Playfair Cipher</a><br><img src="/images/image-78.png" alt="Image text"><br>flag{itisnotaproblemhavefun}</p><h2 id="35、Dangerous-RSA"><a href="#35、Dangerous-RSA" class="headerlink" title="35、Dangerous RSA"></a>35、Dangerous RSA</h2><p>题目<br>#n:  0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793L<br>#e:  0x3<br>#c:0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365<br>so,how to get the message?</p><p>解题过程<br>1、通过尝试分解n发现分解不了<br>所以这是低加密指数攻击：<br>所谓低加密指数指的就是e非常小的情况下，通常为3。<br>这种题目通常有两种类型，一种直接爆破，另外一种是低指数广播攻击。</p><p>先介绍比较简单的情况。假设e=3, e很小，但是n很大。<br>回顾RSA加密公式： C=M^e % n (C密文，M明文)<br>解题脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> iroot<span class="token keyword">import</span> libnumn <span class="token operator">=</span> <span class="token number">0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793</span>c <span class="token operator">=</span> <span class="token number">0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    res<span class="token operator">=</span>iroot<span class="token punctuation">(</span>c<span class="token operator">+</span>k<span class="token operator">*</span>n<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>libnum<span class="token punctuation">.</span>n2s<span class="token punctuation">(</span>int<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    k<span class="token operator">=</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token comment" spellcheck="true">#flag{25df8caf006ee5db94d48144c33b2c3b}</span></code></pre><h2 id="36、-HDCTF2019-basic-rsa"><a href="#36、-HDCTF2019-basic-rsa" class="headerlink" title="36、[HDCTF2019]basic rsa"></a>36、[HDCTF2019]basic rsa</h2><p>题目</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> binascii <span class="token keyword">import</span> a2b_hex<span class="token punctuation">,</span>b2a_hexflag <span class="token operator">=</span> <span class="token string">"*****************"</span>p <span class="token operator">=</span> <span class="token number">262248800182277040650192055439906580479</span>q <span class="token operator">=</span> <span class="token number">262854994239322828547925595487519915551</span>e <span class="token operator">=</span> <span class="token number">65533</span>n <span class="token operator">=</span> p<span class="token operator">*</span>qc <span class="token operator">=</span> pow<span class="token punctuation">(</span>int<span class="token punctuation">(</span>b2a_hex<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#pow(x,y,z)->x^y%z</span><span class="token keyword">print</span> c<span class="token comment" spellcheck="true"># 27565231154623519221597938803435789010285480123476977081867877272451638645710</span></code></pre><p>解题过程<br>1、直接写脚本解题</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">262248800182277040650192055439906580479</span>q <span class="token operator">=</span> <span class="token number">262854994239322828547925595487519915551</span>e <span class="token operator">=</span> <span class="token number">65533</span>c <span class="token operator">=</span> <span class="token number">27565231154623519221597938803435789010285480123476977081867877272451638645710</span>n <span class="token operator">=</span> p<span class="token operator">*</span>qphi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{B4by_Rs4}</span></code></pre><h2 id="37、-GXYCTF2019-CheckIn"><a href="#37、-GXYCTF2019-CheckIn" class="headerlink" title="37、[GXYCTF2019]CheckIn"></a>37、[GXYCTF2019]CheckIn</h2><p>题目<br>dikqTCpfRjA8fUBIMD5GNDkwMjNARkUwI0BFTg==<br>解题过程<br>1、尝试base64解码<br><img src="/images/image-79.png" alt="Image text"><br>得到：v)<em>L</em>_F0&lt;}@H0&gt;F49023@FE0#@EN<br>2、再用ROT加密<br><img src="/images/image-80.png" alt="Image text"><br>flag{Y0u_kNow_much_about_Rot}</p><h2 id="38、-GUET-CTF2019-BabyRSA"><a href="#38、-GUET-CTF2019-BabyRSA" class="headerlink" title="38、[GUET-CTF2019]BabyRSA"></a>38、[GUET-CTF2019]BabyRSA</h2><p>题目<br>p+q : 0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea<br>(p+1)(q+1) : 0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740<br>e : 0xe6b1bee47bd63f615c7d0a43c529d219<br>d : 0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5<br>enc_flag : 0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a</p><p>解题脚本</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#p+q : 0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea</span><span class="token comment" spellcheck="true">#(p+1)(q+1) : 0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740</span><span class="token comment" spellcheck="true">#e : 0xe6b1bee47bd63f615c7d0a43c529d219</span><span class="token comment" spellcheck="true">#d : 0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5</span><span class="token comment" spellcheck="true">#enc_flag : 0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a</span><span class="token keyword">import</span> libnuma <span class="token operator">=</span> <span class="token number">0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea</span>b <span class="token operator">=</span> <span class="token number">0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740</span>e <span class="token operator">=</span> <span class="token number">0xe6b1bee47bd63f615c7d0a43c529d219</span>d <span class="token operator">=</span> <span class="token number">0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5</span>c<span class="token operator">=</span> <span class="token number">0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a</span>n <span class="token operator">=</span> b<span class="token operator">-</span>a<span class="token number">-1</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>libnum<span class="token punctuation">.</span>n2s<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#（n2s将数值转化为字符串）</span><span class="token comment" spellcheck="true">#flag{cc7490e-78ab-11e9-b422-8ba97e5da1fd}</span></code></pre><h2 id="39、达芬奇密码"><a href="#39、达芬奇密码" class="headerlink" title="39、达芬奇密码"></a>39、达芬奇密码</h2><p>题目<br>达芬奇隐藏在蒙娜丽莎中的数字列:1 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711<br>记录在达芬奇窗台口的神秘数字串:36968853882116725547342176952286</p><p>解题过程<br>1、通过研究数列发现这个数列是斐波那契数列移位打乱了。</p><pre><code>0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 , 89 , 144 , 233 , 377 , 610 , 987 , 1597 , 2584 , 4181 , 6765 , 10946 , 17711 , 28657 , 46368 , 75025 , 121393 , 196418 , 317811 , 514229 , 832040 , 1346269</code></pre><p>2、然后发现数列是32位，数字串也是32位，写解密脚本</p><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">233</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2584</span><span class="token punctuation">,</span><span class="token number">1346269</span><span class="token punctuation">,</span><span class="token number">144</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">196418</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">1597</span><span class="token punctuation">,</span><span class="token number">610</span><span class="token punctuation">,</span><span class="token number">377</span><span class="token punctuation">,</span><span class="token number">10946</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">514229</span><span class="token punctuation">,</span><span class="token number">987</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">6765</span><span class="token punctuation">,</span><span class="token number">2178309</span><span class="token punctuation">,</span><span class="token number">121393</span><span class="token punctuation">,</span><span class="token number">317811</span><span class="token punctuation">,</span><span class="token number">46368</span><span class="token punctuation">,</span><span class="token number">4181</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">832040</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">28657</span><span class="token punctuation">,</span><span class="token number">75025</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">17711</span><span class="token punctuation">]</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">144</span><span class="token punctuation">,</span><span class="token number">233</span><span class="token punctuation">,</span><span class="token number">377</span><span class="token punctuation">,</span><span class="token number">610</span><span class="token punctuation">,</span><span class="token number">987</span><span class="token punctuation">,</span><span class="token number">1597</span><span class="token punctuation">,</span><span class="token number">2584</span><span class="token punctuation">,</span><span class="token number">4181</span><span class="token punctuation">,</span><span class="token number">6765</span><span class="token punctuation">,</span><span class="token number">10946</span><span class="token punctuation">,</span><span class="token number">17711</span><span class="token punctuation">,</span><span class="token number">28657</span><span class="token punctuation">,</span><span class="token number">46368</span><span class="token punctuation">,</span><span class="token number">75025</span><span class="token punctuation">,</span><span class="token number">121393</span><span class="token punctuation">,</span><span class="token number">196418</span><span class="token punctuation">,</span><span class="token number">317811</span><span class="token punctuation">,</span><span class="token number">514229</span><span class="token punctuation">,</span><span class="token number">832040</span><span class="token punctuation">,</span><span class="token number">1346269</span><span class="token punctuation">,</span><span class="token number">2178309</span><span class="token punctuation">]</span>c<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>is<span class="token operator">=</span><span class="token string">"36968853882116725547342176952286"</span>d<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    d<span class="token operator">+=</span>s<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{37995588256861228614165223347687}</span></code></pre><ul><li>还需要去补足一下达芬奇密码<h2 id="40、rsa2"><a href="#40、rsa2" class="headerlink" title="40、rsa2"></a>40、rsa2</h2>题目<br>```python<br>N = 101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471<br>e = 46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</li></ul><p>import hashlib<br>flag = “flag{“ + hashlib.md5(hex(d)).hexdigest() + “}”</p><pre><code>解密过程：* **知识点**：https://www.cnblogs.com/Web-Fresher/p/13553171.html1、rsa类型中维纳（低解密指数）攻击2、解题脚本```python from RSAwienerHacker import hack_RSAimport libnume=46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085n=101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471d=hack_RSA(e,n)if d:    print(d)</code></pre><pre class=" language-python"><code class="language-python">N <span class="token operator">=</span> <span class="token number">101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span>e <span class="token operator">=</span> <span class="token number">46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span>d<span class="token operator">=</span><span class="token number">8920758995414587152829426558580025657357328745839747693739591820283538307445</span><span class="token keyword">import</span> hashlibflag <span class="token operator">=</span> <span class="token string">"flag{"</span> <span class="token operator">+</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"}"</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''注意：题目中给的代码要在py2中运行，d进行数的运算。如果在py3中进行哈希的话，会报错提示你要先将d进行编码，然后一直出错'''</span><span class="token comment" spellcheck="true">#flag{47bf28da384590448e0b0d23909a25a4}</span></code></pre><p><img src="/images/image-81.png" alt="Image text"></p><h2 id="41-密码学的心声"><a href="#41-密码学的心声" class="headerlink" title="41.密码学的心声"></a>41.密码学的心声</h2><p>题目<br><img src="/images/image-82.png" alt="Image text"><br>111114157166145123145143165162151164171126145162171115165143150<br>解题过程<br>1、通过题目的提示，这是一个八进制<br>111 114 157 166 145 123 145 143 165 162 151 164 171 126 145 162 171 115 165 143 150<br>2、用Python写脚本</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'111 114 157 166 145 123 145 143 165 162 151 164 171 126 145 162 171 115 165 143 150'</span>tmp <span class="token operator">=</span> <span class="token punctuation">[</span>s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>cipher <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>    cipher <span class="token operator">+=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">"flag{"</span><span class="token operator">+</span>cipher<span class="token operator">+</span><span class="token string">"}"</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{ILoveSecurityVeryMuch}</span></code></pre><h2 id="42、RSA5"><a href="#42、RSA5" class="headerlink" title="42、RSA5"></a>42、RSA5</h2><p>题目<br>m = xxxxxxxx<br>e = 65537<br>========== n c ==========<br>n = 20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207<br>c = 974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</p><p>n = 20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759<br>c = 15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</p><p>n = 25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491<br>c = 4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</p><p>n = 21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751<br>c = 4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</p><p>n = 22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067<br>c = 15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</p><p>n = 21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369<br>c = 20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</p><p>n = 25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137<br>c = 19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</p><p>n = 22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191<br>c = 6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</p><p>n = 23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941<br>c = 5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</p><p>n = 28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491<br>c = 9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</p><p>n = 22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019<br>c = 1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</p><p>n = 27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299<br>c = 21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</p><p>n = 20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551<br>c = 14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</p><p>n = 27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987<br>c = 3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</p><p>n = 27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837<br>c = 14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</p><p>n = 25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451<br>c = 17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</p><p>n = 23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499<br>c = 10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</p><p>n = 19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973<br>c = 3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</p><p>n = 19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603<br>c = 6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</p><p>n = 26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659<br>c = 386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346<br>解密过程<br>1、类型：共模攻击<br>解密脚本</p><pre class=" language-python"><code class="language-python">n1 <span class="token operator">=</span> <span class="token number">20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span>c <span class="token operator">=</span> <span class="token number">974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span>n2 <span class="token operator">=</span> <span class="token number">20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span>c <span class="token operator">=</span> <span class="token number">15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span>n3 <span class="token operator">=</span> <span class="token number">25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span>c <span class="token operator">=</span> <span class="token number">4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span>n4 <span class="token operator">=</span> <span class="token number">21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span>c <span class="token operator">=</span> <span class="token number">4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span>n5 <span class="token operator">=</span> <span class="token number">22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span>c <span class="token operator">=</span> <span class="token number">15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span>n6 <span class="token operator">=</span> <span class="token number">21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span>c <span class="token operator">=</span> <span class="token number">20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span>n7 <span class="token operator">=</span> <span class="token number">25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span>c <span class="token operator">=</span> <span class="token number">19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span>n8 <span class="token operator">=</span> <span class="token number">22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span>c <span class="token operator">=</span> <span class="token number">6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span>n9 <span class="token operator">=</span> <span class="token number">23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span>c <span class="token operator">=</span> <span class="token number">5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span>n10 <span class="token operator">=</span> <span class="token number">28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span>c <span class="token operator">=</span> <span class="token number">9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span>n11 <span class="token operator">=</span> <span class="token number">22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span>c <span class="token operator">=</span> <span class="token number">1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span>n12 <span class="token operator">=</span> <span class="token number">27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span>c <span class="token operator">=</span> <span class="token number">21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span>n13 <span class="token operator">=</span> <span class="token number">20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span>c <span class="token operator">=</span> <span class="token number">14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span>n14 <span class="token operator">=</span> <span class="token number">27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span>c <span class="token operator">=</span> <span class="token number">3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span>n15 <span class="token operator">=</span> <span class="token number">27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span>c <span class="token operator">=</span> <span class="token number">14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span>n16 <span class="token operator">=</span> <span class="token number">25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span>c <span class="token operator">=</span> <span class="token number">17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span>n17 <span class="token operator">=</span> <span class="token number">23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span>c <span class="token operator">=</span> <span class="token number">10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span>n18 <span class="token operator">=</span> <span class="token number">19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span>c <span class="token operator">=</span> <span class="token number">3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span>n19 <span class="token operator">=</span> <span class="token number">19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span>c <span class="token operator">=</span> <span class="token number">6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span>n20 <span class="token operator">=</span> <span class="token number">26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span>c <span class="token operator">=</span> <span class="token number">386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span><span class="token keyword">import</span> gmpy2<span class="token keyword">def</span> <span class="token function">getit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>eval<span class="token punctuation">(</span><span class="token string">'n'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>eval<span class="token punctuation">(</span><span class="token string">'n'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#x=getit()#(5,18)</span>p<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>n5<span class="token punctuation">,</span>n18<span class="token punctuation">)</span>q<span class="token operator">=</span>n5<span class="token operator">//</span>pe<span class="token operator">=</span><span class="token number">65537</span>c <span class="token operator">=</span> <span class="token number">15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span>n<span class="token operator">=</span>n5<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util <span class="token keyword">import</span> number<span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">.</span>long_to_bytes<span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c<span class="token punctuation">,</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{abdcbe5fd94e23b3de429223ab9c2fdf}</span></code></pre><h2 id="43、-BJDCTF2020-这是base"><a href="#43、-BJDCTF2020-这是base" class="headerlink" title="43、[BJDCTF2020]这是base??"></a>43、[BJDCTF2020]这是base??</h2><p>题目<br>dict:{0: ‘J’, 1: ‘K’, 2: ‘L’, 3: ‘M’, 4: ‘N’, 5: ‘O’, 6: ‘x’, 7: ‘y’, 8: ‘U’, 9: ‘V’, 10: ‘z’, 11: ‘A’, 12: ‘B’, 13: ‘C’, 14: ‘D’, 15: ‘E’, 16: ‘F’, 17: ‘G’, 18: ‘H’, 19: ‘7’, 20: ‘8’, 21: ‘9’, 22: ‘P’, 23: ‘Q’, 24: ‘I’, 25: ‘a’, 26: ‘b’, 27: ‘c’, 28: ‘d’, 29: ‘e’, 30: ‘f’, 31: ‘g’, 32: ‘h’, 33: ‘i’, 34: ‘j’, 35: ‘k’, 36: ‘l’, 37: ‘m’, 38: ‘W’, 39: ‘X’, 40: ‘Y’, 41: ‘Z’, 42: ‘0’, 43: ‘1’, 44: ‘2’, 45: ‘3’, 46: ‘4’, 47: ‘5’, 48: ‘6’, 49: ‘R’, 50: ‘S’, 51: ‘T’, 52: ‘n’, 53: ‘o’, 54: ‘p’, 55: ‘q’, 56: ‘r’, 57: ‘s’, 58: ‘t’, 59: ‘u’, 60: ‘v’, 61: ‘w’, 62: ‘+’, 63: ‘/‘, 64: ‘=’}</p><p>chipertext:<br>FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw</p><p>解题过程</p><ul><li><strong>知识点：</strong>了解base编码和加密的原理<br>1、这是base的变种需要自己写脚本解题。<br>2、写脚本如下：<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'J'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'K'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">'N'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">:</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">:</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">:</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">:</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">:</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">:</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">:</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">:</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">:</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">:</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">:</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">:</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">:</span> <span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">:</span> <span class="token string">'Q'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">:</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">:</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">:</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">:</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">:</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">:</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">:</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">:</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">:</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">:</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">:</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">:</span> <span class="token string">'W'</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">:</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">:</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">:</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">:</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">:</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">:</span> <span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">:</span> <span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">:</span> <span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">:</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">:</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">:</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">:</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">:</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">:</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">:</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">:</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">:</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">:</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">:</span> <span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">:</span> <span class="token string">'='</span><span class="token punctuation">}</span>base64_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'J'</span><span class="token punctuation">,</span> <span class="token string">'K'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">,</span><span class="token string">'Q'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">]</span>cipher <span class="token operator">=</span> <span class="token string">'FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw'</span>res <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>dict<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          res <span class="token operator">+=</span> base64_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>flag <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{D0_Y0u_kNoW_Th1s_b4se_map}</span></code></pre><h2 id="44、传感器"><a href="#44、传感器" class="headerlink" title="44、传感器"></a>44、传感器</h2>题目<br>5555555595555A65556AA696AA6666666955<br>这是某压力传感器无线数据包解调后但未解码的报文(hex)</li></ul><p>已知其ID为0xFED31F，请继续将报文完整解码，提交hex。</p><p>提示1：曼联</p><p>解答过程：</p><ul><li><strong>知识点：</strong><br>1、根据题目和提示猜测是曼彻斯特密码<br>2、解题脚本<br>```python<br>cipher=’5555555595555A65556AA696AA6666666955’<br>def iee(cipher):<br>  tmp=’’<br>  for i in range(len(cipher)):<pre><code>  a=bin(eval('0x'+cipher[i]))[2:].zfill(4)  tmp=tmp+a[1]+a[3]  print(tmp)</code></pre>  plain=[hex(int(tmp[i:i+8][::-1],2))[2:] for i in range(0,len(tmp),8)]             print(‘’.join(plain).upper())</li></ul><p>iee(cipher)<br>#flag{FFFFFED31F645055F9}</p><pre><code>## 45、rot题目破解下面的密文：83 89 78 84 45 86 96 45 115 121 110 116 136 132 132 132 108 128 117 118 134 110 123 111 110 127 108 112 124 122 108 118 128 108 131 114 127 134 108 116 124 124 113 108 76 76 76 76 138 23 90 81 66 71 64 69 114 65 112 64 66 63 69 61 70 114 62 66 61 62 69 67 70 63 61 110 110 112 64 68 62 70 61 112 111 112flag格式flag{}解题过程1、ROT是一种古典密码，左边移某位，或者右边移某位，凯撒算是ROT的一种。Rot13 加密，用python脚本将每个数字减去13后，转ASCLL字符```pythona = [83,89,78,84,45,86,96,45,115,121,110,116,136,132,132,132,108,128,117,118,134,110,123,111,110,127,108,112,124,122,108,118,128,108,131,114,127,134,108,116,124,124,113,108,76,76,76,76,138,23,90,81,66,71,64,69,114,65,112,64,66,63,69,61,70,114,62,66,61,62,69,67,70,63,61,110,110,112,64,68,62,70,61,112,111,112]b = []for i in a:    i = i-13    b.append(i)for j in b:    print(chr(j),end='')#FLAG IS flag{www_shiyanbar_com_is_very_good_????}#MD5:38e4c352809e150186920aac37190cbc</code></pre><p>2、根据上面得到的flag和MD5看来还的继续写脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlibhead <span class="token operator">=</span> <span class="token string">"flag{www_shiyanbar_com_is_very_good_"</span>tail <span class="token operator">=</span> <span class="token string">"}"</span>md5 <span class="token operator">=</span> <span class="token string">"38e4c352809e150186920aac37190cbc"</span><span class="token keyword">for</span> c1 <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> c2 <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> c3 <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> c4 <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                st <span class="token operator">=</span> head <span class="token operator">+</span> chr<span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span>c2<span class="token punctuation">)</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span>c3<span class="token punctuation">)</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span>c4<span class="token punctuation">)</span> <span class="token operator">+</span> tail                a <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>                a<span class="token punctuation">.</span>update<span class="token punctuation">(</span>st<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> a<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> md5<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{www_shiyanbar_com_is_very_good_@8Mu}</span></code></pre><h2 id="46、-NCTF2019-Keyboard"><a href="#46、-NCTF2019-Keyboard" class="headerlink" title="46、[NCTF2019]Keyboard"></a>46、[NCTF2019]Keyboard</h2><p>题目<br>cipher.txt</p><pre><code>ooo yyy ii w uuu ee uuuu yyy uuuu y w uuu i i rr w i i rr rrr uuuu rrr uuuu t ii uuuu i w u rrr ee www ee yyy eee www w tt ee</code></pre><p>解密过程<br>1、所需知识点：纯脑洞。。。。。<br>2、键盘第一行字母对应到数字<br><img src="/images/image-84.png" alt="Image text"><br>3、利用九宫格键盘解密，比如o对应的数字9，且有三个o，所以找到九宫格按键9的第三个字母位y，依此类推<br><img src="/images/image-85.png" alt="Image text"><br>4、根据上面的原理用Python写脚本如下：</p><pre class=" language-python"><code class="language-python">strr <span class="token operator">=</span> <span class="token string">"ooo yyy ii w uuu ee uuuu yyy uuuu y w uuu i i rr w i i rr rrr uuuu rrr uuuu t ii uuuu i w u rrr ee www ee yyy eee www w tt ee"</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>all <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'none1'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'none2'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">:</span><span class="token string">'abc'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">:</span><span class="token string">'def'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">:</span><span class="token string">'ghi'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">:</span><span class="token string">'jkl'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">:</span><span class="token string">'mno'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">:</span><span class="token string">'pors'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">:</span><span class="token string">'tuv'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">:</span><span class="token string">'wxyz'</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> strr<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>all<span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{youaresosmartthatthisisjustapieceofcake}</span></code></pre><h2 id="47、-NCTF2019-childRSA"><a href="#47、-NCTF2019-childRSA" class="headerlink" title="47、[NCTF2019]childRSA"></a>47、[NCTF2019]childRSA</h2><p>题目</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> choice<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> isPrime<span class="token punctuation">,</span> sieve_base <span class="token keyword">as</span> primes<span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token keyword">def</span> <span class="token function">getPrime</span><span class="token punctuation">(</span>bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token number">2</span>        <span class="token keyword">while</span> n<span class="token punctuation">.</span>bit_length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> bits<span class="token punctuation">:</span>            n <span class="token operator">*=</span> choice<span class="token punctuation">(</span>primes<span class="token punctuation">)</span>        <span class="token keyword">if</span> isPrime<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token number">1</span>e <span class="token operator">=</span> <span class="token number">0x10001</span>m <span class="token operator">=</span> int<span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>flag<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>p<span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token punctuation">[</span>getPrime<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qc <span class="token operator">=</span> pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># n = 32849718197337581823002243717057659218502519004386996660885100592872201948834155543125924395614928962750579667346279456710633774501407292473006312537723894221717638059058796679686953564471994009285384798450493756900459225040360430847240975678450171551048783818642467506711424027848778367427338647282428667393241157151675410661015044633282064056800913282016363415202171926089293431012379261585078566301060173689328363696699811123592090204578098276704877408688525618732848817623879899628629300385790344366046641825507767709276622692835393219811283244303899850483748651722336996164724553364097066493953127153066970594638491950199605713033004684970381605908909693802373826516622872100822213645899846325022476318425889580091613323747640467299866189070780620292627043349618839126919699862580579994887507733838561768581933029077488033326056066378869170169389819542928899483936705521710423905128732013121538495096959944889076705471928490092476616709838980562233255542325528398956185421193665359897664110835645928646616337700617883946369110702443135980068553511927115723157704586595844927607636003501038871748639417378062348085980873502535098755568810971926925447913858894180171498580131088992227637341857123607600275137768132347158657063692388249513</span><span class="token comment" spellcheck="true"># c = 26308018356739853895382240109968894175166731283702927002165268998773708335216338997058314157717147131083296551313334042509806229853341488461087009955203854253313827608275460592785607739091992591431080342664081962030557042784864074533380701014585315663218783130162376176094773010478159362434331787279303302718098735574605469803801873109982473258207444342330633191849040553550708886593340770753064322410889048135425025715982196600650740987076486540674090923181664281515197679745907830107684777248532278645343716263686014941081417914622724906314960249945105011301731247324601620886782967217339340393853616450077105125391982689986178342417223392217085276465471102737594719932347242482670320801063191869471318313514407997326350065187904154229557706351355052446027159972546737213451422978211055778164578782156428466626894026103053360431281644645515155471301826844754338802352846095293421718249819728205538534652212984831283642472071669494851823123552827380737798609829706225744376667082534026874483482483127491533474306552210039386256062116345785870668331513725792053302188276682550672663353937781055621860101624242216671635824311412793495965628876036344731733142759495348248970313655381407241457118743532311394697763283681852908564387282605279108</span></code></pre><p>解题过程<br>1、常规解密方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token number">32849718197337581823002243717057659218502519004386996660885100592872201948834155543125924395614928962750579667346279456710633774501407292473006312537723894221717638059058796679686953564471994009285384798450493756900459225040360430847240975678450171551048783818642467506711424027848778367427338647282428667393241157151675410661015044633282064056800913282016363415202171926089293431012379261585078566301060173689328363696699811123592090204578098276704877408688525618732848817623879899628629300385790344366046641825507767709276622692835393219811283244303899850483748651722336996164724553364097066493953127153066970594638491950199605713033004684970381605908909693802373826516622872100822213645899846325022476318425889580091613323747640467299866189070780620292627043349618839126919699862580579994887507733838561768581933029077488033326056066378869170169389819542928899483936705521710423905128732013121538495096959944889076705471928490092476616709838980562233255542325528398956185421193665359897664110835645928646616337700617883946369110702443135980068553511927115723157704586595844927607636003501038871748639417378062348085980873502535098755568810971926925447913858894180171498580131088992227637341857123607600275137768132347158657063692388249513</span> p <span class="token operator">=</span> <span class="token number">178449493212694205742332078583256205058672290603652616240227340638730811945224947826121772642204629335108873832781921390308501763661154638696935732709724016546955977529088135995838497476350749621442719690722226913635772410880516639651363626821442456779009699333452616953193799328647446968707045304702547915799734431818800374360377292309248361548868909066895474518333089446581763425755389837072166970684877011663234978631869703859541876049132713490090720408351108387971577438951727337962368478059295446047962510687695047494480605473377173021467764495541590394732685140829152761532035790187269724703444386838656193674253139</span>q <span class="token operator">=</span> <span class="token number">184084121540115307597161367011014142898823526027674354555037785878481711602257307508985022577801782788769786800015984410443717799994642236194840684557538917849420967360121509675348296203886340264385224150964642958965438801864306187503790100281099130863977710204660546799128755418521327290719635075221585824217487386227004673527292281536221958961760681032293340099395863194031788435142296085219594866635192464353365034089592414809332183882423461536123972873871477755949082223830049594561329457349537703926325152949582123419049073013144325689632055433283354999265193117288252918515308767016885678802217366700376654365502867</span>e <span class="token operator">=</span> <span class="token number">65537</span>c <span class="token operator">=</span> <span class="token number">26308018356739853895382240109968894175166731283702927002165268998773708335216338997058314157717147131083296551313334042509806229853341488461087009955203854253313827608275460592785607739091992591431080342664081962030557042784864074533380701014585315663218783130162376176094773010478159362434331787279303302718098735574605469803801873109982473258207444342330633191849040553550708886593340770753064322410889048135425025715982196600650740987076486540674090923181664281515197679745907830107684777248532278645343716263686014941081417914622724906314960249945105011301731247324601620886782967217339340393853616450077105125391982689986178342417223392217085276465471102737594719932347242482670320801063191869471318313514407997326350065187904154229557706351355052446027159972546737213451422978211055778164578782156428466626894026103053360431281644645515155471301826844754338802352846095293421718249819728205538534652212984831283642472071669494851823123552827380737798609829706225744376667082534026874483482483127491533474306552210039386256062116345785870668331513725792053302188276682550672663353937781055621860101624242216671635824311412793495965628876036344731733142759495348248970313655381407241457118743532311394697763283681852908564387282605279108</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>N <span class="token operator">=</span> n<span class="token operator">-</span><span class="token punctuation">(</span>p<span class="token operator">+</span>q<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token comment" spellcheck="true"># 这个地方我还存有疑问</span>d <span class="token operator">=</span> invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>N<span class="token punctuation">)</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#NCTF{Th3r3_ar3_1ns3cure_RSA_m0duli_7hat_at_f1rst_gl4nce_appe4r_t0_be_s3cur3}</span></code></pre><p>2、我还在其他地方看到费马定理来简化求解方式，我还没有具体了解，后期补上。</p><h2 id="48、这是什么"><a href="#48、这是什么" class="headerlink" title="48、这是什么"></a>48、这是什么</h2><p>题目<br>下载文件下来是一写没有后缀的文件，用记事本打开<br><img src="/images/image-86.png" alt="Image text"><br><img src="/images/image-87.png" alt="Image text"><br>看到一串用[]+!()等符号表示的代码怀疑这是一种编码方式，从而用百度搜索得到这是jsFuck编码<br>我这里提供一个<a href="https://qqe2.com/ed/jsfuck">在线接密</a><br><img src="/images/image-88.png" alt="Image text"><br>flag{a0448fd730b62c13ca80200c4529daa2}</p><h2 id="49、-HDCTF2019-bbbbbbrsa"><a href="#49、-HDCTF2019-bbbbbbrsa" class="headerlink" title="49、[HDCTF2019]bbbbbbrsa"></a>49、[HDCTF2019]bbbbbbrsa</h2><p>题目<br>enc</p><pre><code>p = 177077389675257695042507998165006460849n = 37421829509887796274897162249367329400988647145613325367337968063341372726061c = ==gMzYDNzIjMxUTNyIzNzIjMyYTM4MDM0gTMwEjNzgTM2UTN4cjNwIjN2QzM5ADMwIDNyMTO4UzM2cTM5kDN2MTOyUTO5YDM0czM3MjM</code></pre><p>encode.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64encode <span class="token keyword">as</span> b32encode<span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> invert<span class="token punctuation">,</span>gcd<span class="token punctuation">,</span>iroot<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> binascii <span class="token keyword">import</span> a2b_hex<span class="token punctuation">,</span>b2a_hex<span class="token keyword">import</span> randomflag <span class="token operator">=</span> <span class="token string">"******************************"</span>nbit <span class="token operator">=</span> <span class="token number">128</span>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span>nbit<span class="token punctuation">)</span>q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span>nbit<span class="token punctuation">)</span>n <span class="token operator">=</span> p<span class="token operator">*</span>q<span class="token keyword">print</span> p<span class="token keyword">print</span> nphi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>e <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">,</span><span class="token number">70000</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> gcd<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        e <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>c <span class="token operator">=</span> pow<span class="token punctuation">(</span>int<span class="token punctuation">(</span>b2a_hex<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span> b32encode<span class="token punctuation">(</span>str<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 2373740699529364991763589324200093466206785561836101840381622237225512234632</span></code></pre><p>解题过程<br>1、根据第一个文件发现这是RSA加密，但是C等于的这个数字好像被base加密了而且被逆转了<br>2、第二个文件是rsa加密算法。<br>3、根据以上条件来撰写脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decode<span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> invert<span class="token punctuation">,</span>gcd<span class="token punctuation">,</span>iroot<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">177077389675257695042507998165006460849</span>n <span class="token operator">=</span> <span class="token number">37421829509887796274897162249367329400988647145613325367337968063341372726061</span>c64 <span class="token operator">=</span> <span class="token string">'==gMzYDNzIjMxUTNyIzNzIjMyYTM4MDM0gTMwEjNzgTM2UTN4cjNwIjN2QzM5ADMwIDNyMTO4UzM2cTM5kDN2MTOyUTO5YDM0czM3MjM'</span>c<span class="token operator">=</span>int<span class="token punctuation">(</span>b64decode<span class="token punctuation">(</span>str<span class="token punctuation">(</span>c64<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>q<span class="token operator">=</span>n<span class="token operator">//</span>pphi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span><span class="token keyword">for</span> e <span class="token keyword">in</span> range <span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">,</span><span class="token number">70000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> gcd<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        d<span class="token operator">=</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>        m<span class="token operator">=</span>pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>        flag<span class="token operator">=</span>str<span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'flag'</span> <span class="token keyword">in</span> flag <span class="token operator">or</span> <span class="token string">'CTF'</span> <span class="token keyword">in</span> flag <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token string">"{"</span> <span class="token keyword">in</span> flag <span class="token operator">and</span> <span class="token string">'}'</span><span class="token keyword">in</span> flag<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{rs4_1s_s1mpl3!#}</span></code></pre><h2 id="50、-MRCTF2020-古典密码知多少"><a href="#50、-MRCTF2020-古典密码知多少" class="headerlink" title="50、[MRCTF2020]古典密码知多少"></a>50、[MRCTF2020]古典密码知多少</h2><p>题目<br><img src="/images/image-89.png" alt="Image text"><br>解题过程<br>1、这张图片里包含了猪圈密码，标准银河字母+圣堂武士+猪圈变形<br><img src="/images/image-90.png" alt="Image text"><br><a href="http://www.metools.info/code/c90.html">猪圈密码</a><br><img src="/images/image-91.png" alt="Image text"><br><img src="/images/image-92.png" alt="Image text"><br>根据上图<br>fgcpflirtuasyon-&gt;FGCPFLIRTUASYON<br>然后再用<a href="https://ctftools.com/down/">栅栏解密</a><br><img src="/images/image-93.png" alt="Image text"><br>flag{CRYPTOFUN}</p><h2 id="51、-WUSTCTF2020-佛说：只能四天"><a href="#51、-WUSTCTF2020-佛说：只能四天" class="headerlink" title="51、[WUSTCTF2020]佛说：只能四天"></a>51、[WUSTCTF2020]佛说：只能四天</h2><p>题目<br>hint.txt</p><ol><li>虽然有点不环保，但hint好像是一次性的，得到后就没有利用价值了。</li><li>凯撒不是最后一步，by the way，凯撒为什么叫做凯撒？<br>题目.txt<br>尊即寂修我劫修如婆愍闍嚤婆莊愍耨羅嚴是喼婆斯吶眾喼修迦慧迦嚩喼斯願嚤摩隸所迦摩吽即塞願修咒莊波斯訶喃壽祗僧若即亦嘇蜜迦須色喼羅囉咒諦若陀喃慧愍夷羅波若劫蜜斯哆咒塞隸蜜波哆咤慧聞亦吽念彌諸嘚嚴諦咒陀叻咤叻諦缽隸祗婆諦嚩阿兜宣囉吽色缽吶諸劫婆咤咤喼愍尊寂色缽嘚闍兜阿婆若叻般壽聞彌即念若降宣空陀壽愍嚤亦喼寂僧迦色莊壽吽哆尊僧喼喃壽嘚兜我空所吶般所即諸吽薩咤諸莊囉隸般咤色空咤亦喃亦色兜哆嘇亦隸空闍修眾哆咒婆菩迦壽薩塞宣嚩缽寂夷摩所修囉菩阿伏嘚宣嚩薩塞菩波吶波菩哆若慧愍蜜訶壽色咒兜摩缽摩諦劫諸陀即壽所波咤聞如訶摩壽宣咤彌即嚩蜜叻劫嘇缽所摩闍壽波壽劫修訶如嚩嘇囉薩色嚤薩壽修闍夷闍是壽僧劫祗蜜嚴嚩我若空伏諦念降若心吽咤隸嘚耨缽伏吽色寂喃喼吽壽夷若心眾祗喃慧嚴即聞空僧須夷嚴叻心願哆波隸塞吶心須嘇摩咤壽嘚吶夷亦心亦喃若咒壽亦壽囑囑<br>题目描述.txt<br>圣经分为《旧约全书》和《新约全书》</li></ol><p>解题过程<br>1、通过题目可以看出这是佛曰加密直接<a href="http://hi.pcmoe.net/buddha.html">在线解密</a><br><img src="/images/image-94.png" alt="Image text"><br>平等文明自由友善公正自由诚信富强自由自由平等民主平等自由自由友善敬业平等公正平等富强平等自由平等民主和谐公正自由诚信平等和谐公正公正自由法治平等法治法治法治和谐和谐平等自由和谐自由自由和谐公正自由敬业自由文明和谐平等自由文明和谐平等和谐文明自由和谐自由和谐和谐平等和谐法治公正诚信平等公正诚信民主自由和谐公正民主平等平等平等平等自由和谐和谐和谐平等和谐自由诚信平等和谐自由自由友善敬业平等和谐自由友善敬业平等法治自由法治和谐和谐自由友善公正法治敬业公正友善爱国公正民主法治文明自由民主平等公正自由法治平等文明平等友善自由平等和谐自由友善自由平等文明自由民主自由平等平等敬业自由平等平等诚信富强平等友善敬业公正诚信平等公正友善敬业公正平等平等诚信平等公正自由公正诚信平等法治敬业公正诚信平等法治平等公正友善平等公正诚信自由公正友善敬业法治法治公正公正公正平等公正诚信自由公正和谐公正平等<br>这个是社会主义核心价值观编码<a href="http://ctf.ssleye.com/cvencode.html">在线解密</a><br><img src="/images/image-95.png" alt="Image text"><br>RLJDQTOVPTQ6O6duws5CD6IB5B52CC57okCaUUC3SO4OSOWG3LynarAVGRZSJRAEYEZ_ooe_doyouknowfence<br>最后fence提示这是栅栏密码，然后再用<a href="https://ctf.bugku.com/tool/railfence">栅栏解密</a><br><img src="/images/image-96.png" alt="Image text"><br>R5UALCUVJDCGD63RQISZTBOSO54JVBORP5SAT2OEQCWY6CGEO53Z67L_doyouknowCaesar_<br>再<a href="https://ctftools.com/down/">凯撒解密</a><br>O5RXIZRSGAZDA63ONFPWQYLPL54GSYLOM5PXQ2LBNZTV6ZDBL53W67I<br><img src="/images/image-97.png" alt="Image text"><br>这个在用base32解密是真的没有提示试试出来<a href="https://ctf.bugku.com/tool/base32">base32</a><br><img src="/images/image-98.png" alt="Image text"><br>wctf2020{ni_hao_xiang_xiang_da_wo}</p><h2 id="52、-BJDCTF2020-RSA"><a href="#52、-BJDCTF2020-RSA" class="headerlink" title="52、[BJDCTF2020]RSA"></a>52、[BJDCTF2020]RSA</h2><p>题目</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getPrime<span class="token punctuation">,</span>bytes_to_longflag<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token operator">=</span>getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>q<span class="token operator">=</span>getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token keyword">assert</span><span class="token punctuation">(</span>e<span class="token operator">&lt;</span><span class="token number">100000</span><span class="token punctuation">)</span>n<span class="token operator">=</span>p<span class="token operator">*</span>qm<span class="token operator">=</span>bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span> c<span class="token punctuation">,</span>n<span class="token keyword">print</span> pow<span class="token punctuation">(</span><span class="token number">294</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span>p<span class="token operator">=</span>getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>n<span class="token operator">=</span>p<span class="token operator">*</span>qm<span class="token operator">=</span>bytes_to_long<span class="token punctuation">(</span><span class="token string">"BJD"</span><span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">)</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span> c<span class="token punctuation">,</span>n<span class="token triple-quoted-string string">'''outputspan></code></pre><p>解题过程<br>1、这rsa加密中常见的共模攻击<br>2、直接写脚本如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>c1<span class="token operator">=</span><span class="token number">12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120</span>  n1<span class="token operator">=</span><span class="token number">13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037</span>c2<span class="token operator">=</span><span class="token number">979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721</span>  n2<span class="token operator">=</span><span class="token number">12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047</span>q<span class="token operator">=</span>gcd<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(q)</span><span class="token comment" spellcheck="true">#99855353761764939308265951492116976798674681282941462516956577712943717850048051273358745095906207085170915794187749954588685850452162165059831749303473106541930948723000882713453679904525655327168665295207423257922666721077747911860159181041422993030618385436504858943615630219459262419715816361781062898911</span>output<span class="token operator">=</span><span class="token number">381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res<span class="token operator">=</span>pow<span class="token punctuation">(</span><span class="token number">294</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>n1<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">==</span>output<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#print(i)</span>        <span class="token comment" spellcheck="true">#52361</span>        e<span class="token operator">=</span>i        <span class="token keyword">break</span>e<span class="token operator">=</span><span class="token number">52361</span>p<span class="token operator">=</span>n1<span class="token operator">//</span>qphi<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d<span class="token operator">=</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m<span class="token operator">=</span>pow<span class="token punctuation">(</span>c1<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n1<span class="token punctuation">)</span>flag<span class="token operator">=</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#BJD{p_is_common_divisor}</span></code></pre><h2 id="53、-MRCTF2020-天干地支-甲子"><a href="#53、-MRCTF2020-天干地支-甲子" class="headerlink" title="53、[MRCTF2020]天干地支+甲子"></a>53、[MRCTF2020]天干地支+甲子</h2><p>题目<br>得到得字符串用MRCTF{}包裹<br>一天Eki收到了一封来自Sndav的信，但是他有点迷希望您来解决一下<br>甲戌<br>甲寅<br>甲寅<br>癸卯<br>己酉<br>甲寅<br>辛丑</p><p>解题过程<br>1、<strong>知识点</strong>学习一下<a href="http://114.xixik.com/tiangandizhi/">天干地支</a><br>2、根据所学的知识进行转化<br>甲戌——11<br>甲寅——51<br>甲寅——51<br>癸卯——40<br>己酉——46<br>甲寅——51<br>辛丑——38<br>根据题目提示还得+一甲子，71、111、111、100、106、111、98，把这些ASCII码转字符就好了，我写了一个Python脚本转化</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">106</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> chr<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    flag <span class="token operator">+=</span> r<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{Goodjob}</span></code></pre><h2 id="54、-MRCTF2020-vigenere"><a href="#54、-MRCTF2020-vigenere" class="headerlink" title="54、[MRCTF2020]vigenere"></a>54、[MRCTF2020]vigenere</h2><p>题目<br><img src="/images/image-99.png" alt="文件"><br>cipher.txt</p><pre><code>g vjganxsymda ux ylt vtvjttajwsgt bl udfteyhfgtoe btlc ckjwc qnxdta vbbwwrbrtlx su gnw nrshylwmpy cgwps, lum bipee ynecgy gk jaryz frs fzwjp, x puej jgbs udfteyhfgt, gnw sil uuej su zofi. sc okzfpu bl lmi uhzmwi, x nyc dsj bl lmi enyl ys argnj yh nrgsi. nba swi cbz ojprbsw fqdam mx. cdh nsai cb ygaigroysxn jnwwi lr msylte.cw mekr tg jptpzwi kdikjsqtaz, ftv pek oj pxxkdd xd ugnj scr, yg n esqxwxw nba onxw au ywipgkj fyiuujnxn gnss xwnz onxw jnahl avhwwxn vzkjpu nrofch fvwfoh. v jwhppek lmi vyutfp hbiafp hcguj at nxw gyxyjask ib hw seihxsqpn vtvjttajwsx ds zzj xnegfsmtf egz wtrq lt mbcukj sc hy. qty wnbw ss bbxsq vxtnl ys ghrw zw cbx vt cdh vgxwtfy ssc brzzthh bl wsjdeiwricg cw mekr zjzi grgktr ib lwfv.vbbwwrbrtlx hteonj xwroj oyhg vgbigf ljtq iuk utrhrtl tj iuk ytztetwi. cdh nsai crolmig fudngxgkv ssg ekujmkrj gzvh. jk vnh cbz aszxgk qty. nba vt rdg qfta jf, tgw hd lum prdj umw aderv. hcqrxkuerr jgjw cbz dni lvzznr nbaj gsgqkjx. hd aul ylxaq lmei lum hec oaaqh xg, gk yldhmz nx lrxw f tjorah gdaylwyrgogs tgbpwhx. nba ufrcbz. ay mh nt shx ds tsyygr gfi mi txgbw xgywqj iuxgzkw baj hsaykuymkr guymday.qty wnbw ssi rtyfktq of tyg txwfx paj yfxwrxask rbtnjvhnzatr, cbx vnh nba uwipgk lmi lrgdyl ds umw qpeqwytaniwx. cdh jg ssi xtgb sje imqxjek, gzv tgnahw, de zzj ycjxayxta igiih gnsy eaeksic eeunnht baj xsrvkld qdek gwhte zzfr rbadi ft bhlfmcrj td ecl ux dsje oeushvzatrh.lum hppvs lmigr gjj tgbhdjqh nsgsk jf zzfx nba fjis gu ktpkr. egz yhr zznw rygar eh nt wcgjfk lt mcigvj sje vjjgxailx. qpae gk xwryw uvdorwrw sbt'l jbxfz. omigr zzjvt nxw wipy igsjavilx, awrxw yltek swi leuflw, lr caqp xqkfymul zzjq paj sihgryk yltz hq tyg zkssw. lr gjj jdesask dhx gbr hbiafp rbtlwerg. zznw vbbwwrpaiw bmay gjnwt niutvsvty ys iuk utrsvzatrh bl gzv lbxdi, rdg egzvh. baj bsgyj ax hxslwwicg.iqgigfvshi rbtknwif ux yvpayshxxbtk, wianzatrhuohx, ecq zztyvuz aywtyl, swvplkv qmzr g kyecqofl apik as xwr cwg su baj hsbzafngpgogsw. dhxk nw p jujqh iugl nw qbzz jzteeomigr gfi rdjnwwi, qhz ay mh aul bltek tthxry dnzt.jk swi reksymct g otvaq zzfx pyr efc tazww axgngzx eeonnpttk gw tgrpmimrr guhsgqkv gc gniw, jgdaueng ebcww, qxyolfvn sujhi, de ylfxxbt gk fxezz.bi pek uwipgofl e lbxdi awrxw frnbtw, frnjnwwi bne wctgryk mmh bx zjv qrrajjh, au efxirx zta hvtyzppe, cayldhz xjeg bl tjmct igjvrrj asxd fodjrrr uj hscsujrmil.egzv armsq gdaiwuxh bl hwserxld, imcxwxwxbt, aiicgold, qdikejri, ntv hscgkpy hd aul fteye lt yh. gnwd egr gdq fpfkv tr bnzljv, paj lmigr ok ss bnzljv wrxw.tyg vjwsxxgowx lpik ft fdqowx, wd, htdnot lum, bi rntftx dozsnr dejww fn cnqxmrnr utigpogs. at okdnikr zzfx ueue jxwvik, jravmzyicrj kjpu-vtljvtfz, ssh iuk utqbbtojea, baj lskrxffrrr caqp tzkjli. dhx aiicgolnih zgq gi svylwmqhzwi ereukx qpae gk cdhx bzvxfjahxxbtk. ylt btdd ppj zzfx pyr gzv rbtkymihkfy gjyzmwih jumqh vrtwweaye jjgdttaei xf zzj kdyjws vjyk. oj ldck oj axyr tj eqyk lt fjvrv tyg cgjymrhrsw wdyalnscf uf ylpg hsxmh. oal bi rntftx ppiwux iuk ktpjgogsw nba swi pgzwrtivty ys xzvgxi.xa zzj ycvzwi winzwx, cdh nsai ibjsd ggrgljh p ygo, ylt gkdjgdzsmsmrnzatrh ekxtvb nil, blxpn jjtjqosyih lumw sla igswivzmymda gfi mcfadyw iuk vwipzy gk ntslwwwda, csxlxamltr, bvrd, resvygs, htguizikvrdj, ecq hjfrsrok. yltfk vwipzy ezwi auo gi qbxf frtj of zw.nba swi irxjnjxrj gk cdhx gbr ruodivta, yasgt gnwd egr tsymkry as e lbxdi awrxw dsj jodq eajgqx ft vsenkgntlx. ftpgmxi nba xjeg gnwr, cdh kfyvjfz qtyg oajjejpxshmtf cayl iuk hfvtazsq vtfvgswxoodnxxry qty pek lts rbcswhal zg hscsxgsx nbajxiaikk. nr dhx otvaq, gdq xwr ywsxxzkfyw paj wctgryknscf ux mybntayc, ueue ylt qktfwxam lt xwr gfliavi, swi enxlx su n ywfqaryk bldyk, lmi vyutfp rbtnjvhnzatr ds hayw. lr issrdg ywuegnzw ylt noj ylpg iztotf ljtq iuk snv jcuf blxpn onrvf hwfx.xa iznrp, tkjrecl, ljfrrr, xmxwxn, yaskpcujj, minrq frs gnw zrxgkv xxpgkk, dsj nxw yvnvty ys lnxv tju gnw amghy gk pxokjyc ql kjjgivty lypej htwif gl ylt sxgsxxrxk tj rlhwwweniw. yltfk efc zrkh tyi gnw hscggynsc suj f wbnrd ymbr, hmy xwre onpa aul bsgx of f aderv ylpg caqp hbuf gi qygfpiirj as fxg-hwfvxam ejhxn.egzv xaijjehvtyqc doygqiir ofksgzglnsc vtvzwieowx adhrv uigcklzeir zzjqhrrnjw ql vjttdfofl ppjy, as ebrxahe paj wqwtjnwwi, iugl hppvs lt sla yhjiru olxias zzwsjtngzx iuk otvaq. zzjwt ygox adhrv iirygjj msrgk ys qr gftxwrx ashjfzjnea cxgiyrg, tg rsgr tggpt gnss txt ojtr. xa umw aderv, blpgknjv iuk zzqpa sash bne uwipgk ufr qr xwuvdqaujh paj vnwieotzxtq ofkmcvzwqc pg tg hshg. zzj kabhsq gdabwdecpk gk xwbaymx cb rgskte xwvyxekk dsje lshxdeowx xd niutqeyokm.xwryw nrreksxmctrq mshgodj ecq igqscvgd ripfajjw eyguj yh vt lmi hnsw ushvzatr pf zztwt cxwamdhy dtztey gk jgrkvtq paj kjpu-qkljvbvtsymda czt lpq zg wiyril ylt nalmsgvzajw ds jaxxpaz, msmcsujris cuojvh. jk ezwi qkuqegr umw zxezmfp hrrnjw xzsmsi ib egzv hbbwwixttld, ikrt sx at pufymchk lt gdaywsx ib egzv ghrw tzte umw fdqowx. at jodq weeksi sjeywqztf guwshf zzj tantwy wd gnsy rd btw hec nxjjwi baj yldhmzyw.lr caqp reksyi p ponnpxmglnsc bl lmi bvtv nr rlhwwweniw. ren vz tj qdek zzqpak ssh unoj ylpa zzj aderv dsje mgaigaswsxh ugnj qpqk tjjdek.xqev vy ewgis balicrxw hvnczg hvppq efr, eyksxi pqj mshteyutvt ntv hygye twerry.</code></pre><p>vigenere.py</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/bin/python3</span><span class="token keyword">from</span> ctf <span class="token keyword">import</span> source_text<span class="token punctuation">,</span> key_stringgetdiff <span class="token operator">=</span> <span class="token keyword">lambda</span> char<span class="token punctuation">:</span> ord<span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">-</span>ord<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>getchar <span class="token operator">=</span> <span class="token keyword">lambda</span> num<span class="token punctuation">:</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">vigenere</span><span class="token punctuation">(</span>src<span class="token punctuation">:</span> chr<span class="token punctuation">,</span> key<span class="token punctuation">:</span> chr<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> chr<span class="token punctuation">:</span>    <span class="token keyword">assert</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> key<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>getchar<span class="token punctuation">(</span><span class="token punctuation">(</span>getdiff<span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token operator">+</span> getdiff<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span>src <span class="token operator">=</span> source_text<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">assert</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>key_string<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>key_string<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> src<span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>vigenere<span class="token punctuation">(</span>i<span class="token punctuation">,</span> key_string<span class="token punctuation">[</span>count <span class="token operator">%</span> len<span class="token punctuation">(</span>key_string<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        count<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p>解题过程<br>1、根据题目可以得知这个是<strong>维吉尼亚加密</strong><br>2、我这里提供一个在线解密的网站<a href="https://www.guballa.de/vigenere-solver">维吉尼亚</a><br><img src="/images/image-100.png" alt="维吉尼亚"><br>根据题目中的脚本提示添加下划线和{}<br>所以flag{vigenere_crypto_crack_man}</p><h2 id="55、-BJDCTF2020-rsa-output"><a href="#55、-BJDCTF2020-rsa-output" class="headerlink" title="55、[BJDCTF2020]rsa_output"></a>55、[BJDCTF2020]rsa_output</h2><p>题目</p><pre><code>{21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111,2767}{21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111,3659}message1=20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599message2=11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227</code></pre><p>解题过程<br>1、这是rsa加密中的共模攻击<br>2、写脚本如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span><span class="token operator">*</span>n <span class="token operator">=</span> <span class="token number">21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111</span>e1 <span class="token operator">=</span> <span class="token number">2767</span>e2 <span class="token operator">=</span> <span class="token number">3659</span>c1 <span class="token operator">=</span> <span class="token number">20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599</span>c2 <span class="token operator">=</span> <span class="token number">11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227</span>s <span class="token operator">=</span> gcdext<span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#gmpy2.gcdext(),扩展欧几里得算法，返回tuple元组，满足s[1]*e1+s[2]*e2=1</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c1<span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">*</span>pow<span class="token punctuation">(</span>c2<span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">%</span>n   <span class="token comment" spellcheck="true">#获取明文m</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#BJD{r3a_C0mmoN_moD@_4ttack}</span></code></pre><h2 id="56、-ACTF新生赛2020-crypto-rsa0"><a href="#56、-ACTF新生赛2020-crypto-rsa0" class="headerlink" title="56、[ACTF新生赛2020]crypto-rsa0"></a>56、[ACTF新生赛2020]crypto-rsa0</h2><p>题目<br>ouput</p><pre><code>9018588066434206377240277162476739271386240173088676526295315163990968347022922841299128274551482926490908399237153883494964743436193853978459947060210411754700567387773825783572976003776521334003669635076632422914361317993214512213068577850406241013704363595820880569869816984729352014957260502649275174022350996206925961019415256003394743594106061473865032792073035954925875056079762626648452348856255575840166640519334862690063949316515750256545937498213476286637455803452890781264446030732369871044870359838568618176586206041055000297981733272816089806014400846392307742065559331874972274844992047849472203390350</code></pre><p><img src="/images/image-101.png" alt="题目"><br><img src="/images/image-102.png" alt="hint"><br>1、<strong>知识点</strong><a href="https://blog.csdn.net/u011377996/article/details/79286958">伪加密</a><br>2、根据前面所学的伪加密的知识用010editor打开压缩包将所有的14 00 09 00改为14 00 00 00 然后就可以得到rsa0.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> randomFLAG<span class="token operator">=</span><span class="token comment" spellcheck="true">#hidden, please solve it</span>flag<span class="token operator">=</span>int<span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>FLAG<span class="token punctuation">,</span>byteorder <span class="token operator">=</span> <span class="token string">'big'</span><span class="token punctuation">)</span>p<span class="token operator">=</span>getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>q<span class="token operator">=</span>getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>N<span class="token operator">=</span>p<span class="token operator">*</span>qe<span class="token operator">=</span><span class="token number">65537</span>enc <span class="token operator">=</span> pow<span class="token punctuation">(</span>flag<span class="token punctuation">,</span>e<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>enc<span class="token punctuation">)</span></code></pre><p>3、根据题目和rsa0.py的加密算法，写解密脚本如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">9018588066434206377240277162476739271386240173088676526295315163990968347022922841299128274551482926490908399237153883494964743436193853978459947060210411</span>q <span class="token operator">=</span> <span class="token number">7547005673877738257835729760037765213340036696350766324229143613179932145122130685778504062410137043635958208805698698169847293520149572605026492751740223</span>c <span class="token operator">=</span> <span class="token number">50996206925961019415256003394743594106061473865032792073035954925875056079762626648452348856255575840166640519334862690063949316515750256545937498213476286637455803452890781264446030732369871044870359838568618176586206041055000297981733272816089806014400846392307742065559331874972274844992047849472203390350</span>e <span class="token operator">=</span> <span class="token number">65537</span>n <span class="token operator">=</span> p<span class="token operator">*</span>q phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#actf{n0w_y0u_see_RSA}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buu 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu</title>
      <link href="2021/0715undefined.html"/>
      <url>2021/0715undefined.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="2021-7-buu-刷题"><a href="#2021-7-buu-刷题" class="headerlink" title="[2021.7]buu 刷题"></a>[2021.7]buu 刷题</h1><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h4 id="1、-GUET-CTF2019-NO-SOS"><a href="#1、-GUET-CTF2019-NO-SOS" class="headerlink" title="1、[GUET-CTF2019]NO SOS"></a><strong>1、[GUET-CTF2019]NO SOS</strong></h4><p>题目</p><p>..-.-.-.–…….–..-…-..-…–.-.-….-..-..–.-.-..-.-..—-</p><p>看着是摩斯密码但是一用在解密，解密不出来，后面发现题目中.和-不是完全正确的被人改过</p><p>所以我们应该先还原：..-.-.-.–…….–..-…-..-…–.-.-….-..-..–.-.-..-.-..—-，再通过<a href="https://ctftools.com/down/">在线解密网站</a></p><p>得到aababababbaaaaaaabbaabaaabaabaaabbababaaaabaabaabbababaababaabbbb</p><p>发现这个是培根密码再用另外一个<a href="http://ctf.ssleye.com/baconian.html">在线解密网站</a></p><p>得到flag</p><pre><code>flagisguetkkp</code></pre><h4 id="2、-QCTF2018-Xman-RSA"><a href="#2、-QCTF2018-Xman-RSA" class="headerlink" title="2、[QCTF2018]Xman-RSA"></a><strong>2、[QCTF2018]Xman-RSA</strong></h4><p>题目<br>下载下来解压有四个文件用记事本打开<br>ciphertext:</p><p>1240198b148089290e375b999569f0d53c32d356b2e95f5acee070f016b3bef243d0b5e46d9ad7aa7dfe2f21bda920d0ac7ce7b1e48f22b2de410c6f391ce7c4347c65ffc9704ecb3068005e9f35cbbb7b27e0f7a18f4f42ae572d77aaa3ee189418d6a07bab7d93beaa365c98349d8599eb68d21313795f380f05f5b3dfdc6272635ede1f83d308c0fdb2baf444b9ee138132d0d532c3c7e60efb25b9bf9cb62dba9833aa3706344229bd6045f0877661a073b6deef2763452d0ad7ab3404ba494b93fd6dfdf4c28e4fe83a72884a99ddf15ca030ace978f2da87b79b4f504f1d15b5b96c654f6cd5179b72ed5f84d3a16a8f0d5bf6774e7fd98d27bf3c9839<br>129d5d4ab3f9e8017d4e6761702467bbeb1b884b6c4f8ff397d078a8c41186a3d52977fa2307d5b6a0ad01fedfc3ba7b70f776ba3790a43444fb954e5afd64b1a3abeb6507cf70a5eb44678a886adf81cb4848a35afb4db7cd7818f566c7e6e2911f5ababdbdd2d4ff9825827e58d48d5466e021a64599b3e867840c07e29582961f81643df07f678a61a9f9027ebd34094e272dfbdc4619fa0ac60f0189af785df77e7ec784e086cf692a7bf7113a7fb8446a65efa8b431c6f72c14bcfa49c9b491fb1d87f2570059e0f13166a85bb555b40549f45f04bc5dbd09d8b858a5382be6497d88197ffb86381085756365bd757ec3cdfa8a77ba1728ec2de596c5ab</p><p>encryption.encrypted</p><pre class=" language-python"><code class="language-python">gqhb jbkl2 pbkhqw pt_kqpbdgqhb ht pbkhqw zqreahbpbkhqw urtd64adg ulwdt_wh_ezb<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">:</span>    qdwzqe pew<span class="token punctuation">(</span>u<span class="token punctuation">.</span>dexhad<span class="token punctuation">(</span><span class="token string">'mdi'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    adg ezb_wh_ulwdt<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>    u <span class="token operator">=</span> mdi<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    u <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token operator">+</span> u pg yde<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> dytd u    qdwzqe u<span class="token punctuation">.</span>adxhad<span class="token punctuation">(</span><span class="token string">'mdi'</span><span class="token punctuation">)</span>adg jdw_r_kqpbd<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    qreahb_tdda <span class="token operator">=</span> zqreahb<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    ezb <span class="token operator">=</span> ulwdt_wh_ezb<span class="token punctuation">(</span>qreahb_tdda<span class="token punctuation">)</span>        fmpyd Tqzd<span class="token punctuation">:</span>        pg pt_kqpbd<span class="token punctuation">(</span>ezb<span class="token punctuation">)</span><span class="token punctuation">:</span>            uqdrv        ezb<span class="token operator">+=</span><span class="token number">1</span>    qdwzqe ezbadg dexqlkw<span class="token punctuation">(</span>t<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">:</span>    k <span class="token operator">=</span> ulwdt_wh_ezb<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    k <span class="token operator">=</span> khf<span class="token punctuation">(</span>k<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span>    qdwzqe ezb_wh_ulwdt<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>dexhad<span class="token punctuation">(</span><span class="token string">'mdi'</span><span class="token punctuation">)</span>    adg tdkrqrwd<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>    k <span class="token operator">=</span> e <span class="token operator">%</span> <span class="token number">4</span>    w <span class="token operator">=</span> <span class="token punctuation">(</span>k<span class="token operator">*</span>k<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span>    qdwzqe w <span class="token operator">==</span> <span class="token number">1</span>    g <span class="token operator">=</span> hkde<span class="token punctuation">(</span><span class="token string">'gyrj.wiw'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">)</span>gyrj <span class="token operator">=</span> g<span class="token punctuation">.</span>qdra<span class="token punctuation">(</span><span class="token punctuation">)</span>        btj1 <span class="token operator">=</span> <span class="token string">""</span>btj2 <span class="token operator">=</span> <span class="token string">""</span>ghq p pe qrejd<span class="token punctuation">(</span>yde<span class="token punctuation">(</span>gyrj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pg tdkrqrwd<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>        btj2 <span class="token operator">+=</span> gyrj<span class="token punctuation">[</span>p<span class="token punctuation">]</span>    dytd<span class="token punctuation">:</span>        btj1 <span class="token operator">+=</span> gyrj<span class="token punctuation">[</span>p<span class="token punctuation">]</span>k1 <span class="token operator">=</span> jdw_r_kqpbd<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>k2 <span class="token operator">=</span> jdw_r_kqpbd<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>k3 <span class="token operator">=</span> jdw_r_kqpbd<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>e1 <span class="token operator">=</span> k1<span class="token operator">*</span>k2e2 <span class="token operator">=</span> k1<span class="token operator">*</span>k3d <span class="token operator">=</span> 0i1001x1 <span class="token operator">=</span> dexqlkw<span class="token punctuation">(</span>btj1<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e1<span class="token punctuation">)</span>x2 <span class="token operator">=</span> dexqlkw<span class="token punctuation">(</span>btj2<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>kqpew<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>kqpew<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>d1 <span class="token operator">=</span> 0i1001d2 <span class="token operator">=</span> 0i101k4 <span class="token operator">=</span> jdw_r_kqpbd<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>k5 <span class="token operator">=</span> jdw_r_kqpbd<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>e3 <span class="token operator">=</span> k4<span class="token operator">*</span>k5x1 <span class="token operator">=</span> ezb_wh_ulwdt<span class="token punctuation">(</span>khf<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> d1<span class="token punctuation">,</span> e3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dexhad<span class="token punctuation">(</span><span class="token string">'mdi'</span><span class="token punctuation">)</span>x2 <span class="token operator">=</span> ezb_wh_ulwdt<span class="token punctuation">(</span>khf<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> e3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dexhad<span class="token punctuation">(</span><span class="token string">'mdi'</span><span class="token punctuation">)</span>kqpew<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>kqpew<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>kqpew<span class="token punctuation">(</span>urtd64<span class="token punctuation">.</span>u64dexhad<span class="token punctuation">(</span>ezb_wh_ulwdt<span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>kqpew<span class="token punctuation">(</span>urtd64<span class="token punctuation">.</span>u64dexhad<span class="token punctuation">(</span>ezb_wh_ulwdt<span class="token punctuation">(</span>e3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>n1.encrypted</p><p>2639c28e3609a4a8c953cca9c326e8e062756305ae8aee6efcd346458aade3ee8c2106ab9dfe5f470804f366af738aa493fd2dc26cb249a922e121287f3eddec0ed8dea89747dc57aed7cd2089d75c23a69bf601f490a64f73f6a583081ae3a7ed52238c13a95d3322065adba9053ee5b12f1de1873dbad9fbf4a50a2f58088df0fddfe2ed8ca1118c81268c8c0fd5572494276f4e48b5eb424f116e6f5e9d66da1b6b3a8f102539b690c1636e82906a46f3c5434d5b04ed7938861f8d453908970eccef07bf13f723d6fdd26a61be8b9462d0ddfbedc91886df194ea022e56c1780aa6c76b9f1c7d5ea743dc75cec3c805324e90ea577fa396a1effdafa3090<br>42ff1157363d9cd10da64eb4382b6457ebb740dbef40ade9b24a174d0145adaa0115d86aa2fc2a41257f2b62486eaebb655925dac78dd8d13ab405aef5b8b8f9830094c712193500db49fb801e1368c73f88f6d8533c99c8e7259f8b9d1c926c47215ed327114f235ba8c873af7a0052aa2d32c52880db55c5615e5a1793b690c37efdd5e503f717bb8de716303e4d6c4116f62d81be852c5d36ef282a958d8c82cf3b458dcc8191dcc7b490f227d1562b1d57fbcf7bf4b78a5d90cd385fd79c8ca4688e7d62b3204aeaf9692ba4d4e44875eaa63642775846434f9ce51d138ca702d907849823b1e86896e4ea6223f93fae68b026cfe5fa5a665569a9e3948a</p><p>n2&amp;n3</p><p>PVNHb2BfGAnmxLrbKhgsYXRwWIL9eOj6K0s3I0slKHCTXTAUtZh3T0r+RoSlhpO3+77AY8P7WETYz2Jzuv5FV/mMODoFrM5fMyQsNt90VynR6J3Jv+fnPJPsm2hJ1Fqt7EKaVRwCbt6a4BdcRoHJsYN/+eh7k/X+FL5XM7viyvQxyFawQrhSV79FIoX6xfjtGW+uAeVF7DScRcl49dlwODhFD7SeLqzoYDJPIQS+VSb3YtvrDgdV+EhuS1bfWvkkXRijlJEpLrgWYmMdfsYX8u/+Ylf5xcBGn3hv1YhQrBCg77AHuUF2w/gJ/ADHFiMcH3ux3nqOsuwnbGSr7jA6Cw==<br>TmNVbWUhCXR1od3gBpM+HGMKK/4ErfIKITxomQ/QmNCZlzmmsNyPXQBiMEeUB8udO7lWjQTYGjD6k21xjThHTNDG4z6C2cNNPz73VIaNTGz0hrh6CmqDowFbyrk+rv53QSkVKPa8EZnFKwGz9B3zXimm1D+01cov7V/ZDfrHrEjsDkgK4ZlrQxPpZAPl+yqGlRK8soBKhY/PF3/GjbquRYeYKbagpUmWOhLnF4/+DP33ve/EpaSAPirZXzf8hyatL4/5tAZ0uNq9W6T4GoMG+N7aS2GeyUA2sLJMHymW4cFK5l5kUvjslRdXOHTmz5eHxqIV6TmSBQRgovUijlNamQ==</p><p>从题目来看1、3、4的文件内容都是加密后的<br>所以解密要从第二文件入手第二个文件看起来像python加密脚本，但是好像经过什么加密，经观察和尝试得知该加密是凯撒（替换）加密<br>上脚本，解密脚本如下</p><pre class=" language-python"><code class="language-python">cpdic <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">:</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">:</span> <span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"q"</span><span class="token punctuation">:</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token string">"h"</span><span class="token punctuation">:</span> <span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"u"</span><span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"t"</span><span class="token punctuation">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">:</span> <span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"k"</span><span class="token punctuation">:</span> <span class="token string">"p"</span><span class="token punctuation">,</span>    <span class="token string">"w"</span><span class="token punctuation">:</span> <span class="token string">"t"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">:</span> <span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">:</span> <span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">:</span> <span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token string">"l"</span><span class="token punctuation">:</span> <span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">:</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token string">"m"</span><span class="token punctuation">:</span> <span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"j"</span><span class="token punctuation">:</span> <span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">:</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"v"</span><span class="token punctuation">:</span> <span class="token string">"k"</span><span class="token punctuation">}</span>f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"D:\\bandzip 解压\\Downloads\\encryption.encrypted"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> data1 <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>listdata1 <span class="token operator">=</span> list<span class="token punctuation">(</span>data1<span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> strindex <span class="token keyword">in</span> listdata1<span class="token punctuation">:</span>    <span class="token keyword">if</span> strindex <span class="token keyword">in</span> cpdic<span class="token punctuation">:</span>        listdata1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cpdic<span class="token punctuation">[</span>strindex<span class="token punctuation">]</span>    i <span class="token operator">+=</span> <span class="token number">1</span>s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>listdata1<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p>运行得到解密后的第二个文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> is_prime<span class="token keyword">from</span> os <span class="token keyword">import</span> urandom<span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">bytes_to_num</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> int<span class="token punctuation">(</span>b<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">num_to_bytes</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> hex<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    b <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token operator">+</span> b <span class="token keyword">if</span> len<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> b    <span class="token keyword">return</span> b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_a_prime</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    random_seed <span class="token operator">=</span> urandom<span class="token punctuation">(</span>l<span class="token punctuation">)</span>    num <span class="token operator">=</span> bytes_to_num<span class="token punctuation">(</span>random_seed<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> is_prime<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        num<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">return</span> num<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> bytes_to_num<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    p <span class="token operator">=</span> pow<span class="token punctuation">(</span>p<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">return</span> num_to_bytes<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">separate</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">4</span>    t <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span>    <span class="token keyword">return</span> t <span class="token operator">==</span> <span class="token number">1</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'flag.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        msg1 <span class="token operator">=</span> <span class="token string">""</span>msg2 <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> separate<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>        msg2 <span class="token operator">+=</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        msg1 <span class="token operator">+=</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span>p1 <span class="token operator">=</span> get_a_prime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> get_a_prime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>p3 <span class="token operator">=</span> get_a_prime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>n1 <span class="token operator">=</span> p1<span class="token operator">*</span>p2n2 <span class="token operator">=</span> p1<span class="token operator">*</span>p3e <span class="token operator">=</span> <span class="token number">0x1001</span>c1 <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>msg1<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n1<span class="token punctuation">)</span>c2 <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>msg2<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span>e1 <span class="token operator">=</span> <span class="token number">0x1001</span>e2 <span class="token operator">=</span> <span class="token number">0x101</span>p4 <span class="token operator">=</span> get_a_prime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>p5 <span class="token operator">=</span> get_a_prime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>n3 <span class="token operator">=</span> p4<span class="token operator">*</span>p5c1 <span class="token operator">=</span> num_to_bytes<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> n3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>c2 <span class="token operator">=</span> num_to_bytes<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> n3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>num_to_bytes<span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>num_to_bytes<span class="token punctuation">(</span>n3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>经过以上文件分析<br>写出脚本如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#python 2</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">bytes_to_num</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> int<span class="token punctuation">(</span>b<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">num_to_bytes</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> hex<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    b <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token operator">+</span> b <span class="token keyword">if</span> len<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> b    <span class="token keyword">return</span> b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>b1<span class="token operator">=</span><span class="token string">"PVNHb2BfGAnmxLrbKhgsYXRwWIL9eOj6K0s3I0slKHCTXTAUtZh3T0r+RoSlhpO3+77AY8P7WETYz2Jzuv5FV/mMODoFrM5fMyQsNt90VynR6J3Jv+fnPJPsm2hJ1Fqt7EKaVRwCbt6a4BdcRoHJsYN/+eh7k/X+FL5XM7viyvQxyFawQrhSV79FIoX6xfjtGW+uAeVF7DScRcl49dlwODhFD7SeLqzoYDJPIQS+VSb3YtvrDgdV+EhuS1bfWvkkXRijlJEpLrgWYmMdfsYX8u/+Ylf5xcBGn3hv1YhQrBCg77AHuUF2w/gJ/ADHFiMcH3ux3nqOsuwnbGSr7jA6Cw=="</span>b2<span class="token operator">=</span><span class="token string">"TmNVbWUhCXR1od3gBpM+HGMKK/4ErfIKITxomQ/QmNCZlzmmsNyPXQBiMEeUB8udO7lWjQTYGjD6k21xjThHTNDG4z6C2cNNPz73VIaNTGz0hrh6CmqDowFbyrk+rv53QSkVKPa8EZnFKwGz9B3zXimm1D+01cov7V/ZDfrHrEjsDkgK4ZlrQxPpZAPl+yqGlRK8soBKhY/PF3/GjbquRYeYKbagpUmWOhLnF4/+DP33ve/EpaSAPirZXzf8hyatL4/5tAZ0uNq9W6T4GoMG+N7aS2GeyUA2sLJMHymW4cFK5l5kUvjslRdXOHTmz5eHxqIV6TmSBQRgovUijlNamQ=="</span>n2<span class="token operator">=</span>bytes_to_num<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">)</span>n3<span class="token operator">=</span>bytes_to_num<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span>cn1<span class="token operator">=</span><span class="token number">0x2639c28e3609a4a8c953cca9c326e8e062756305ae8aee6efcd346458aade3ee8c2106ab9dfe5f470804f366af738aa493fd2dc26cb249a922e121287f3eddec0ed8dea89747dc57aed7cd2089d75c23a69bf601f490a64f73f6a583081ae3a7ed52238c13a95d3322065adba9053ee5b12f1de1873dbad9fbf4a50a2f58088df0fddfe2ed8ca1118c81268c8c0fd5572494276f4e48b5eb424f116e6f5e9d66da1b6b3a8f102539b690c1636e82906a46f3c5434d5b04ed7938861f8d453908970eccef07bf13f723d6fdd26a61be8b9462d0ddfbedc91886df194ea022e56c1780aa6c76b9f1c7d5ea743dc75cec3c805324e90ea577fa396a1effdafa3090</span>cn2<span class="token operator">=</span><span class="token number">0x42ff1157363d9cd10da64eb4382b6457ebb740dbef40ade9b24a174d0145adaa0115d86aa2fc2a41257f2b62486eaebb655925dac78dd8d13ab405aef5b8b8f9830094c712193500db49fb801e1368c73f88f6d8533c99c8e7259f8b9d1c926c47215ed327114f235ba8c873af7a0052aa2d32c52880db55c5615e5a1793b690c37efdd5e503f717bb8de716303e4d6c4116f62d81be852c5d36ef282a958d8c82cf3b458dcc8191dcc7b490f227d1562b1d57fbcf7bf4b78a5d90cd385fd79c8ca4688e7d62b3204aeaf9692ba4d4e44875eaa63642775846434f9ce51d138ca702d907849823b1e86896e4ea6223f93fae68b026cfe5fa5a665569a9e3948a</span>e1 <span class="token operator">=</span> <span class="token number">0x1001</span>e2 <span class="token operator">=</span> <span class="token number">0x101</span><span class="token keyword">def</span> <span class="token function">gongmogongji</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">egcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> a<span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> egcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span>            <span class="token keyword">return</span> y<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">//</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> y    s <span class="token operator">=</span> egcd<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>    s1 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    s2 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> s1 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        s1 <span class="token operator">=</span> <span class="token operator">-</span> s1        c1 <span class="token operator">=</span> invert<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">elif</span> s2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        s2 <span class="token operator">=</span> <span class="token operator">-</span> s2        c2 <span class="token operator">=</span> invert<span class="token punctuation">(</span>c2<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> pow<span class="token punctuation">(</span>c2<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n    <span class="token keyword">return</span> mresult <span class="token operator">=</span> gongmogongji<span class="token punctuation">(</span>n3<span class="token punctuation">,</span> cn1<span class="token punctuation">,</span> cn2<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>n1<span class="token operator">=</span>resultp1<span class="token operator">=</span>gcd<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span>p2<span class="token operator">=</span>n1<span class="token operator">//</span>p1p3<span class="token operator">=</span>n2<span class="token operator">//</span>p1phi1<span class="token operator">=</span><span class="token punctuation">(</span>p1<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p2<span class="token number">-1</span><span class="token punctuation">)</span>phi2<span class="token operator">=</span><span class="token punctuation">(</span>p1<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p3<span class="token number">-1</span><span class="token punctuation">)</span>c1<span class="token operator">=</span><span class="token string">"1240198b148089290e375b999569f0d53c32d356b2e95f5acee070f016b3bef243d0b5e46d9ad7aa7dfe2f21bda920d0ac7ce7b1e48f22b2de410c6f391ce7c4347c65ffc9704ecb3068005e9f35cbbb7b27e0f7a18f4f42ae572d77aaa3ee189418d6a07bab7d93beaa365c98349d8599eb68d21313795f380f05f5b3dfdc6272635ede1f83d308c0fdb2baf444b9ee138132d0d532c3c7e60efb25b9bf9cb62dba9833aa3706344229bd6045f0877661a073b6deef2763452d0ad7ab3404ba494b93fd6dfdf4c28e4fe83a72884a99ddf15ca030ace978f2da87b79b4f504f1d15b5b96c654f6cd5179b72ed5f84d3a16a8f0d5bf6774e7fd98d27bf3c9839"</span>c2<span class="token operator">=</span><span class="token string">"129d5d4ab3f9e8017d4e6761702467bbeb1b884b6c4f8ff397d078a8c41186a3d52977fa2307d5b6a0ad01fedfc3ba7b70f776ba3790a43444fb954e5afd64b1a3abeb6507cf70a5eb44678a886adf81cb4848a35afb4db7cd7818f566c7e6e2911f5ababdbdd2d4ff9825827e58d48d5466e021a64599b3e867840c07e29582961f81643df07f678a61a9f9027ebd34094e272dfbdc4619fa0ac60f0189af785df77e7ec784e086cf692a7bf7113a7fb8446a65efa8b431c6f72c14bcfa49c9b491fb1d87f2570059e0f13166a85bb555b40549f45f04bc5dbd09d8b858a5382be6497d88197ffb86381085756365bd757ec3cdfa8a77ba1728ec2de596c5ab"</span>e <span class="token operator">=</span> <span class="token number">0x1001</span>d1<span class="token operator">=</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi1<span class="token punctuation">)</span>d2<span class="token operator">=</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi2<span class="token punctuation">)</span>cipher1<span class="token operator">=</span>bytes_to_num<span class="token punctuation">(</span>c1<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cipher2<span class="token operator">=</span>bytes_to_num<span class="token punctuation">(</span>c2<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m1<span class="token operator">=</span>long_to_bytes<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>cipher1<span class="token punctuation">,</span>d1<span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token punctuation">)</span>m2<span class="token operator">=</span>long_to_bytes<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>cipher2<span class="token punctuation">,</span>d2<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> m1<span class="token punctuation">,</span>m2flag<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag<span class="token operator">+=</span>m1<span class="token punctuation">[</span>i<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">else</span> <span class="token punctuation">:</span>        flag<span class="token operator">+=</span>m2<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">print</span> flag<span class="token comment" spellcheck="true">#XMAN{CRYPT0_I5_50_Interestingvim rsa.py}</span></code></pre><p>得到flag这道题目不简单，运用古典加密中的凯撒加密，现代加密中的rsa,真的是满满的干货。</p><h4 id="3、-NPUCTF2020-认清形势，建立信心"><a href="#3、-NPUCTF2020-认清形势，建立信心" class="headerlink" title="3、[NPUCTF2020]认清形势，建立信心"></a><strong>3、[NPUCTF2020]认清形势，建立信心</strong></h4><p>题目</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> flagp <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token comment" spellcheck="true"># Hidden</span>q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qm <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">.</span>strip<span class="token punctuation">(</span>b<span class="token string">"npuctf{"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span>b<span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c <span class="token operator">=</span> pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pow<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pow<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''169169912654178128509160179202518818742414340358553002064450'''</span></code></pre><p>这是rsa里面中建立方程来求解的题型。<br>c = 169169912654178<br>X = 2^e mod n = 128509160179202<br>Y = 4^e mod n = 518818742414340<br>Z = 8^e mod n = 358553002064450<br>根据上面的三个式子我们可以得到n和e，又因为n = p*q<br>所以解密脚本如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2<span class="token keyword">import</span> sympyc <span class="token operator">=</span> <span class="token number">169169912654178</span>x <span class="token operator">=</span> <span class="token number">128509160179202</span>y <span class="token operator">=</span> <span class="token number">518818742414340</span>z <span class="token operator">=</span> <span class="token number">358553002064450</span><span class="token keyword">print</span><span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span>y<span class="token punctuation">,</span>x<span class="token operator">*</span>y<span class="token operator">-</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span>n<span class="token operator">=</span><span class="token number">1054494004042394</span><span class="token operator">//</span><span class="token number">2</span>p<span class="token operator">=</span> <span class="token number">18195301</span>q<span class="token operator">=</span> <span class="token number">28977097</span>e<span class="token operator">=</span>sympy<span class="token punctuation">.</span>discrete_log<span class="token punctuation">(</span>n<span class="token punctuation">,</span>x<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>d<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{b'345y!}</span></code></pre><h4 id="4、-BJDCTF2020-伏羲六十四卦"><a href="#4、-BJDCTF2020-伏羲六十四卦" class="headerlink" title="4、[BJDCTF2020]伏羲六十四卦"></a><strong>4、[BJDCTF2020]伏羲六十四卦</strong></h4><p>题目<br>ciphertext.txt:</p><pre><code>这是什么，怎么看起来像是再算64卦！！！密文:升随临损巽睽颐萃小过讼艮颐小过震蛊屯未济中孚艮困恒晋升损蛊萃蛊未济巽解艮贲未济观豫损蛊晋噬嗑晋旅解大畜困未济随蒙升解睽未济井困未济旅萃未济震蒙未济师涣归妹大有嗯？为什么还有个b呢?b=7flag：请按照格式BJD{}</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#我有没有用呢？</span><span class="token comment" spellcheck="true"># -- coding:UTF-8 --</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> flag<span class="token keyword">def</span> <span class="token function">encrpyt5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    enc<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">:</span>        enc<span class="token operator">+=</span>chr<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">*</span><span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token operator">+</span><span class="token number">97</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp<span class="token operator">=</span><span class="token string">''</span>    offset<span class="token operator">=</span><span class="token number">5</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp<span class="token operator">+=</span>chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>offset<span class="token operator">-</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span></code></pre><p>通过百度查询伏羲六十四卦的卦象代表的数字用二进制表示如下所示：<br>dic={‘坤’: ‘000000’, ‘剥’: ‘000001’, ‘比’: ‘000010’, ‘观’: ‘000011’, ‘豫’: ‘000100’, ‘晋’: ‘000101’, ‘萃’: ‘000110’, ‘否’: ‘000111’, ‘谦’: ‘001000’, ‘艮’: ‘001001’, ‘蹇’: ‘001010’, ‘渐’: ‘001011’, ‘小过’: ‘001100’, ‘旅’: ‘001101’, ‘咸’: ‘001110’, ‘遁’: ‘001111’, ‘师’: ‘010000’, ‘蒙’: ‘010001’, ‘坎’: ‘010010’, ‘涣’: ‘010011’, ‘解’: ‘010100’, ‘未济’: ‘010101’, ‘困’: ‘010110’, ‘讼’: ‘010111’, ‘升’: ‘011000’, ‘蛊’: ‘011001’, ‘井’: ‘011010’, ‘巽’: ‘011011’, ‘恒’: ‘011100’, ‘鼎’: ‘011101’, ‘大过’: ‘011110’, ‘姤’: ‘011111’, ‘复’: ‘100000’, ‘颐’: ‘100001’, ‘屯’: ‘100010’, ‘益’: ‘100011’, ‘震’: ‘100100’, ‘噬嗑’: ‘100101’, ‘随’: ‘100110’, ‘无妄’: ‘100111’, ‘明夷’: ‘101000’, ‘贲’: ‘101001’, ‘既济’: ‘101010’, ‘家人’: ‘101011’, ‘丰’: ‘101100’, ‘离’: ‘101101’, ‘革’: ‘101110’, ‘同人’: ‘101111’, ‘临’: ‘110000’, ‘损’: ‘110001’, ‘节’: ‘110010’, ‘中孚’: ‘110011’, ‘归妹’: ‘110100’, ‘睽’: ‘110101’, ‘兑’: ‘110110’, ‘履’: ‘110111’, ‘泰’: ‘111000’, ‘大畜’: ‘111001’, ‘需’: ‘111010’, ‘小畜’: ‘111011’, ‘大壮’: ‘111100’, ‘大有’: ‘111101’, ‘夬’: ‘111110’, ‘乾’: ‘111111’}<br>所以解题脚如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decrypt4</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token string">''</span>    offset <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp<span class="token operator">+=</span>chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>offset<span class="token operator">+</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> temp<span class="token keyword">def</span> <span class="token function">decrypt5</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        enc <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">:</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">97</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">+</span><span class="token number">26</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token operator">%</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    enc<span class="token operator">+=</span>chr<span class="token punctuation">(</span><span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">97</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">+</span><span class="token number">26</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token operator">//</span>a<span class="token operator">+</span><span class="token number">97</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span>s<span class="token operator">=</span><span class="token string">'升随临损巽睽颐萃小过讼艮颐小过震蛊屯未济中孚艮困恒晋升损蛊萃蛊未济巽解艮贲未济观豫损蛊晋噬嗑晋旅解大畜困未济随蒙升解睽未济井困未济旅萃未济震蒙未济师涣归妹大有'</span>dic<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'坤'</span><span class="token punctuation">:</span> <span class="token string">'000000'</span><span class="token punctuation">,</span> <span class="token string">'剥'</span><span class="token punctuation">:</span> <span class="token string">'000001'</span><span class="token punctuation">,</span> <span class="token string">'比'</span><span class="token punctuation">:</span> <span class="token string">'000010'</span><span class="token punctuation">,</span> <span class="token string">'观'</span><span class="token punctuation">:</span> <span class="token string">'000011'</span><span class="token punctuation">,</span> <span class="token string">'豫'</span><span class="token punctuation">:</span> <span class="token string">'000100'</span><span class="token punctuation">,</span> <span class="token string">'晋'</span><span class="token punctuation">:</span> <span class="token string">'000101'</span><span class="token punctuation">,</span> <span class="token string">'萃'</span><span class="token punctuation">:</span> <span class="token string">'000110'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">:</span> <span class="token string">'000111'</span><span class="token punctuation">,</span> <span class="token string">'谦'</span><span class="token punctuation">:</span> <span class="token string">'001000'</span><span class="token punctuation">,</span> <span class="token string">'艮'</span><span class="token punctuation">:</span> <span class="token string">'001001'</span><span class="token punctuation">,</span> <span class="token string">'蹇'</span><span class="token punctuation">:</span> <span class="token string">'001010'</span><span class="token punctuation">,</span> <span class="token string">'渐'</span><span class="token punctuation">:</span> <span class="token string">'001011'</span><span class="token punctuation">,</span> <span class="token string">'小过'</span><span class="token punctuation">:</span> <span class="token string">'001100'</span><span class="token punctuation">,</span> <span class="token string">'旅'</span><span class="token punctuation">:</span> <span class="token string">'001101'</span><span class="token punctuation">,</span> <span class="token string">'咸'</span><span class="token punctuation">:</span> <span class="token string">'001110'</span><span class="token punctuation">,</span> <span class="token string">'遁'</span><span class="token punctuation">:</span> <span class="token string">'001111'</span><span class="token punctuation">,</span> <span class="token string">'师'</span><span class="token punctuation">:</span> <span class="token string">'010000'</span><span class="token punctuation">,</span> <span class="token string">'蒙'</span><span class="token punctuation">:</span> <span class="token string">'010001'</span><span class="token punctuation">,</span> <span class="token string">'坎'</span><span class="token punctuation">:</span> <span class="token string">'010010'</span><span class="token punctuation">,</span> <span class="token string">'涣'</span><span class="token punctuation">:</span> <span class="token string">'010011'</span><span class="token punctuation">,</span> <span class="token string">'解'</span><span class="token punctuation">:</span> <span class="token string">'010100'</span><span class="token punctuation">,</span> <span class="token string">'未济'</span><span class="token punctuation">:</span> <span class="token string">'010101'</span><span class="token punctuation">,</span> <span class="token string">'困'</span><span class="token punctuation">:</span> <span class="token string">'010110'</span><span class="token punctuation">,</span> <span class="token string">'讼'</span><span class="token punctuation">:</span> <span class="token string">'010111'</span><span class="token punctuation">,</span> <span class="token string">'升'</span><span class="token punctuation">:</span> <span class="token string">'011000'</span><span class="token punctuation">,</span> <span class="token string">'蛊'</span><span class="token punctuation">:</span> <span class="token string">'011001'</span><span class="token punctuation">,</span> <span class="token string">'井'</span><span class="token punctuation">:</span> <span class="token string">'011010'</span><span class="token punctuation">,</span> <span class="token string">'巽'</span><span class="token punctuation">:</span> <span class="token string">'011011'</span><span class="token punctuation">,</span> <span class="token string">'恒'</span><span class="token punctuation">:</span> <span class="token string">'011100'</span><span class="token punctuation">,</span> <span class="token string">'鼎'</span><span class="token punctuation">:</span> <span class="token string">'011101'</span><span class="token punctuation">,</span> <span class="token string">'大过'</span><span class="token punctuation">:</span> <span class="token string">'011110'</span><span class="token punctuation">,</span> <span class="token string">'姤'</span><span class="token punctuation">:</span> <span class="token string">'011111'</span><span class="token punctuation">,</span> <span class="token string">'复'</span><span class="token punctuation">:</span> <span class="token string">'100000'</span><span class="token punctuation">,</span> <span class="token string">'颐'</span><span class="token punctuation">:</span> <span class="token string">'100001'</span><span class="token punctuation">,</span> <span class="token string">'屯'</span><span class="token punctuation">:</span> <span class="token string">'100010'</span><span class="token punctuation">,</span> <span class="token string">'益'</span><span class="token punctuation">:</span> <span class="token string">'100011'</span><span class="token punctuation">,</span> <span class="token string">'震'</span><span class="token punctuation">:</span> <span class="token string">'100100'</span><span class="token punctuation">,</span> <span class="token string">'噬嗑'</span><span class="token punctuation">:</span> <span class="token string">'100101'</span><span class="token punctuation">,</span> <span class="token string">'随'</span><span class="token punctuation">:</span> <span class="token string">'100110'</span><span class="token punctuation">,</span> <span class="token string">'无妄'</span><span class="token punctuation">:</span> <span class="token string">'100111'</span><span class="token punctuation">,</span> <span class="token string">'明夷'</span><span class="token punctuation">:</span> <span class="token string">'101000'</span><span class="token punctuation">,</span> <span class="token string">'贲'</span><span class="token punctuation">:</span> <span class="token string">'101001'</span><span class="token punctuation">,</span> <span class="token string">'既济'</span><span class="token punctuation">:</span> <span class="token string">'101010'</span><span class="token punctuation">,</span> <span class="token string">'家人'</span><span class="token punctuation">:</span> <span class="token string">'101011'</span><span class="token punctuation">,</span> <span class="token string">'丰'</span><span class="token punctuation">:</span> <span class="token string">'101100'</span><span class="token punctuation">,</span> <span class="token string">'离'</span><span class="token punctuation">:</span> <span class="token string">'101101'</span><span class="token punctuation">,</span> <span class="token string">'革'</span><span class="token punctuation">:</span> <span class="token string">'101110'</span><span class="token punctuation">,</span> <span class="token string">'同人'</span><span class="token punctuation">:</span> <span class="token string">'101111'</span><span class="token punctuation">,</span> <span class="token string">'临'</span><span class="token punctuation">:</span> <span class="token string">'110000'</span><span class="token punctuation">,</span> <span class="token string">'损'</span><span class="token punctuation">:</span> <span class="token string">'110001'</span><span class="token punctuation">,</span> <span class="token string">'节'</span><span class="token punctuation">:</span> <span class="token string">'110010'</span><span class="token punctuation">,</span> <span class="token string">'中孚'</span><span class="token punctuation">:</span> <span class="token string">'110011'</span><span class="token punctuation">,</span> <span class="token string">'归妹'</span><span class="token punctuation">:</span> <span class="token string">'110100'</span><span class="token punctuation">,</span> <span class="token string">'睽'</span><span class="token punctuation">:</span> <span class="token string">'110101'</span><span class="token punctuation">,</span> <span class="token string">'兑'</span><span class="token punctuation">:</span> <span class="token string">'110110'</span><span class="token punctuation">,</span> <span class="token string">'履'</span><span class="token punctuation">:</span> <span class="token string">'110111'</span><span class="token punctuation">,</span> <span class="token string">'泰'</span><span class="token punctuation">:</span> <span class="token string">'111000'</span><span class="token punctuation">,</span> <span class="token string">'大畜'</span><span class="token punctuation">:</span> <span class="token string">'111001'</span><span class="token punctuation">,</span> <span class="token string">'需'</span><span class="token punctuation">:</span> <span class="token string">'111010'</span><span class="token punctuation">,</span> <span class="token string">'小畜'</span><span class="token punctuation">:</span> <span class="token string">'111011'</span><span class="token punctuation">,</span> <span class="token string">'大壮'</span><span class="token punctuation">:</span> <span class="token string">'111100'</span><span class="token punctuation">,</span> <span class="token string">'大有'</span><span class="token punctuation">:</span> <span class="token string">'111101'</span><span class="token punctuation">,</span> <span class="token string">'夬'</span><span class="token punctuation">:</span> <span class="token string">'111110'</span><span class="token punctuation">,</span> <span class="token string">'乾'</span><span class="token punctuation">:</span> <span class="token string">'111111'</span><span class="token punctuation">}</span>li<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> k <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        k<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">continue</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        t<span class="token operator">=</span><span class="token string">''</span>        t<span class="token operator">=</span>t<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>        li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>        k<span class="token operator">=</span><span class="token number">1</span>ss<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span>enc<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    enc<span class="token operator">+=</span>chr<span class="token punctuation">(</span>eval<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token operator">+</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">import</span> base64<span class="token keyword">print</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span>x<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>x<span class="token operator">=</span>decrypt4<span class="token punctuation">(</span>x<span class="token punctuation">)</span>x<span class="token operator">=</span>decrypt5<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{bjdcongratulationsongettingtheflag}</span></code></pre><h4 id="5、-NPUCTF2020-共-模-攻-击"><a href="#5、-NPUCTF2020-共-模-攻-击" class="headerlink" title="5、[NPUCTF2020]共 模 攻 击"></a><strong>5、[NPUCTF2020]共 模 攻 击</strong></h4><p>题目<br>hint:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> hintm <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>hint<span class="token punctuation">)</span>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>c <span class="token operator">=</span> pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>p<span class="token punctuation">,</span> q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> getPrime<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qe1<span class="token punctuation">,</span> e2 <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> getPrime<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>c1<span class="token punctuation">,</span> c2 <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> c1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e2<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''10731697577128434210836295494509648970890030263373452094390528365528331853570968074920062199353352337222320248097844342932931723172828149786889317114239396296822243748702335879699607136383100687844154745350337807727661713204612815792303413961 17544211690361913917173092569380359609129411092068723748264445267330306960568217317081932701517598437808947506966426597954527875473550433453487141292177232622163991 1613454015951555289711148366977297613624544025937559371784736059448454437652633847111272619248126613500028992813732842041018588707201458398726700828844249'''</span></code></pre><p>task:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> flagflag <span class="token operator">=</span> flag<span class="token punctuation">.</span>strip<span class="token punctuation">(</span>b<span class="token string">"npuctf{"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span>b<span class="token string">"}"</span><span class="token punctuation">)</span>m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>p<span class="token punctuation">,</span> q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qe1<span class="token punctuation">,</span> e2 <span class="token operator">=</span> p<span class="token punctuation">,</span> qc1<span class="token punctuation">,</span> c2 <span class="token operator">=</span> pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span> pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''128205304743751985889679351195836799434324346996129753896234917982647254577214018524580290192396070591032007818847697193260130051396080104704981594190602854241936777324431673564677900773992273463534717009587530152480725448774018550562603894883079711995434332008363470321069097619786793617099517770260029108149968606542352752022173681301950898396080375583888845227375006111212715713351239815888079940438004685290021475706555976106396809777807794948803306694663897884970467103192133762283911380219763889251713077600300584569348987715894358362613172837439516145051368403646387069144244335667820449261116399556124121341989566853166416448316408476072940703716510748416699965603380497338943730666656667456274146023583837768495637484138572090891246105018219222267465595710692705776272469703739932909158740030049375350999465338363044226512016686534246611049299981674236577960786526527933966681954486377462298197949323271904405241585'''</span></code></pre><p>由题目得知该题目是rsa加密中的共模攻击的类型，所以直接根据以上加密脚本写解密脚本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> libnum <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> sympy <span class="token keyword">import</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">107316975771284342108362954945096489708900302633734520943905283655283318535709</span>e1 <span class="token operator">=</span> <span class="token number">2303413961</span>c1 <span class="token operator">=</span> <span class="token number">1754421169036191391717309256938035960912941109206872374826444526733030696056821731708193270151759843780894750696642659795452787547355043345348714129217723</span>e2 <span class="token operator">=</span> <span class="token number">2622163991</span>c2 <span class="token operator">=</span> <span class="token number">1613454015951555289711148366977297613624544025937559371784736059448454437652633847111272619248126613500028992813732842041018588707201458398726700828844249</span>n <span class="token operator">=</span>  <span class="token number">6807492006219935335233722232024809784434293293172317282814978688931711423939629682224374870233587969960713638310068784415474535033780772766171320461281579</span>s <span class="token operator">=</span> gcdext<span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span>c <span class="token operator">=</span> pow<span class="token punctuation">(</span>c1<span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">*</span>pow<span class="token punctuation">(</span>c2<span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#c = 19384002358725759679198917686763310349050988223627625096050800369760484237557</span>m <span class="token operator">=</span> nthroot_mod<span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>n2s<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>得到b’m.bit_length() &lt; 400’,看起来这并不是答案，所以的继续，</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> libnum <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span><span class="token operator">*</span>n <span class="token operator">=</span> <span class="token number">128205304743751985889679351195836799434324346996129753896234917982647254577214018524580290192396070591032007818847697193260130051396080104704981594190602854241936777324431673564677900773992273463534717009587530152480725448774018550562603894883079711995434332008363470321069097619786793617099517770260029108149</span>c1 <span class="token operator">=</span> <span class="token number">96860654235275202217368130195089839608037558388884522737500611121271571335123981588807994043800468529002147570655597610639680977780779494880330669466389788497046710319213376228391138021976388925171307760030058456934898771589435836261317283743951614505136840364638706914424433566782044926111639955612412134198</span>c2 <span class="token operator">=</span> <span class="token number">9566853166416448316408476072940703716510748416699965603380497338943730666656667456274146023583837768495637484138572090891246105018219222267465595710692705776272469703739932909158740030049375350999465338363044226512016686534246611049299981674236577960786526527933966681954486377462298197949323271904405241585</span>a <span class="token operator">=</span> c1<span class="token operator">+</span>c2b <span class="token operator">=</span> c1<span class="token operator">*</span>c2<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a = 106427507401691650533776606268030543324548306805584488340881108460215302001780649045082140067384306297497785054794169701530927082798998717147796265177082494273319180022953309137549878052025764276170773098393102683446915458123682447310617265418188192465923366892572673596378919944244343124060963227516817375783</span><span class="token comment" spellcheck="true"># b = 926651656671911333597022401968870409343942400492881255142377951759176631494915016941991504123810265329862246592861145719213675502795378053564904818765377025096483601036025012267103260702787555612216755188521913405305861451125814149409508425602231670292131422273268728629782633354498648021859614223672123489318899205627785426402597996319440198218774038390809403281952702730883306007226797632389267386912707857093556335846269954270572920361347019614365402744026533713442449916555425678184406380167614011131702418493073759816310890056281917310110034453007210415242707924141697749818907383248545179118594511927630223830</span><span class="token comment" spellcheck="true">#注意：这里用n2s会报错，因为py3编码的缘故，你用python2的long_to_bytes()就不会报错，在网上的在线工具先转16进制再转字符串也不会报错。</span>flag <span class="token operator">=</span> <span class="token number">4242839043019782000788118887372132807371568279472499477998758466224002905442227156537788110520335652385855</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{b'verrrrrrry_345yyyyyyy_rsaaaaaaa_righttttttt?'}</span></code></pre><h4 id="6、-SUCTF2019-MT"><a href="#6、-SUCTF2019-MT" class="headerlink" title="6、[SUCTF2019]MT"></a><strong>6、[SUCTF2019]MT</strong></h4><p>题目<br>mt.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Random <span class="token keyword">import</span> random<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util <span class="token keyword">import</span> number<span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> m <span class="token operator">^</span> m <span class="token operator">>></span> <span class="token number">13</span>    m <span class="token operator">=</span> m <span class="token operator">^</span> m <span class="token operator">&lt;&lt;</span> <span class="token number">9</span> <span class="token operator">&amp;</span> <span class="token number">2029229568</span>    m <span class="token operator">=</span> m <span class="token operator">^</span> m <span class="token operator">&lt;&lt;</span> <span class="token number">17</span> <span class="token operator">&amp;</span> <span class="token number">2245263360</span>    m <span class="token operator">=</span> m <span class="token operator">^</span> m <span class="token operator">>></span> <span class="token number">19</span>    <span class="token keyword">return</span> m<span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> len<span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span>    new_message <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        block <span class="token operator">=</span> message<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">4</span> <span class="token punctuation">:</span> i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span>        block <span class="token operator">=</span> number<span class="token punctuation">.</span>bytes_to_long<span class="token punctuation">(</span>block<span class="token punctuation">)</span>        block <span class="token operator">=</span> convert<span class="token punctuation">(</span>block<span class="token punctuation">)</span>        block <span class="token operator">=</span> number<span class="token punctuation">.</span>long_to_bytes<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        new_message <span class="token operator">+=</span> block    <span class="token keyword">return</span> new_messagetransformed_flag <span class="token operator">=</span> transform<span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'transformed_flag:'</span><span class="token punctuation">,</span> transformed_flag<span class="token comment" spellcheck="true"># transformed_flag: 641460a9e3953b1aaa21f3a2</span></code></pre><p>题目告诉了我们加密算法，我们直接读懂这个脚本，然后写出解密脚本：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#python 2</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Random <span class="token keyword">import</span> random<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util <span class="token keyword">import</span> number<span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> m <span class="token operator">^</span> m <span class="token operator">>></span> <span class="token number">13</span>    m <span class="token operator">=</span> m <span class="token operator">^</span> m <span class="token operator">&lt;&lt;</span> <span class="token number">9</span> <span class="token operator">&amp;</span> <span class="token number">2029229568</span>    m <span class="token operator">=</span> m <span class="token operator">^</span> m <span class="token operator">&lt;&lt;</span> <span class="token number">17</span> <span class="token operator">&amp;</span> <span class="token number">2245263360</span>    m <span class="token operator">=</span> m <span class="token operator">^</span> m <span class="token operator">>></span> <span class="token number">19</span>    <span class="token keyword">return</span> m<span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> len<span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span>    new_message <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        block <span class="token operator">=</span> message<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">4</span> <span class="token punctuation">:</span> i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span>        block <span class="token operator">=</span> number<span class="token punctuation">.</span>bytes_to_long<span class="token punctuation">(</span>block<span class="token punctuation">)</span>        block <span class="token operator">=</span> convert<span class="token punctuation">(</span>block<span class="token punctuation">)</span>        block <span class="token operator">=</span> number<span class="token punctuation">.</span>long_to_bytes<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        new_message <span class="token operator">+=</span> block    <span class="token keyword">return</span> new_message<span class="token comment" spellcheck="true">#transformed_flag = transform(flag[5:-1].decode('hex')).encode('hex')</span><span class="token comment" spellcheck="true">#print 'transformed_flag:', transformed_flag</span><span class="token comment" spellcheck="true"># transformed_flag: 641460a9e3953b1aaa21f3a2</span>transformed_flag <span class="token operator">=</span> <span class="token string">"641460a9e3953b1aaa21f3a2"</span><span class="token keyword">def</span> <span class="token function">decodef</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> flag    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> t        t <span class="token operator">=</span> transform<span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> flag<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x            <span class="token keyword">break</span>        <span class="token keyword">print</span> decodef<span class="token punctuation">(</span>transformed_flag<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{84b45f89af22ce7e67275bdc}</span></code></pre><h4 id="7、-NCTF2019-Sore"><a href="#7、-NCTF2019-Sore" class="headerlink" title="7、[NCTF2019]Sore"></a><strong>7、[NCTF2019]Sore</strong></h4><p>题目<br>ciphertext.text<br>nsfAIHFrMuLynuCApeEstxJOzniQuyBVfAChDEznppfAiEIDcyNFBsCjsLvGlDtqztuaHvHbCmuyGNsIMhGlDtbotCoDzDjhyBzHGfHGfoHsuhlssIMvwlixBHHGfDRjoCKrapNIwqNyuxIBACQhtMwCmMCfEBpsrzEuiLGBoMipTkxrznoHfAkqwzvxuzCzDbLyApCGvjpqxkuwpgsLrqsVfCRwzlFmtlyrhuyEiivruFRpCRjkEDrqEqthyGwgsLnQvHmtzwDEznopBpsDOxvgBGIKzurFQxwQxkptutxzmfeLFQoRpJRvrpHxilwqeqMeiiIGBsQpCCvrptAlHsDnuRltmHuCGFpsBcwnsEblsswEPwerNpIADpJRCvwQxrntJltNpfAuFBwRstytoyvcepwtwqNlmmNGFsJjsQvkyvrkrstxJOzniQvNvzdDUdyJzjqzsErqxEjguyFMNwtPjsDwjoDfCdxzvftNGyzKjCEjsDxjqsjGMqFpimGpIADpJRFkovHJlpthyHnpqyBOHhmDMmoosClwiehEzmffOGMvDxDSnnyLuXFlwYEPvosQxCrRxwCpDswHopxDruvEzsOgBsXxDLvvlMpezwpnOOsjrANzHDsLCnoqLCepgtaHNHfpysNHGfOMqkyvlozxHetJGfvNuCGKjIRnoDLAbpyxnJCpqeLxuBCuwCpGpOnkEywrEPrisHrItSiDQgvtLCipyJnDzwtxBnNoKxpWuCxwuiqwDmIJxffIqSGSbzGpqlDnXvNIwqNzoxBrQoXuDRjonsAozzHeBjweTBBypDtIGnvHGDiosItqGvusGrIFzoNRjsyykrExweMvDtsLGItVbAIkxrFnuEyDmuIzxMNBIyziDJfyqLqbmjAtqOEiivnwyNgwCtmzsCgFxIfEMEiiBrFzNgxRdEEKqbHtJltIEmiNzygGfHyknVwnmJtJrxvyewNBSCTsHCnptxHlFiDnJHtohmuyKztHRkvwKxopfImuWFurIGuGRpGCcCDzntlxqevJCfEHLQoXxtIgzEynqEnCgsGztiLnHrBmDQgBEGCephprHJFtiFnHrXpJAqEwvBqlwItECpbvNuuHMvIRAwFKrZtyplMvJttFnSGhuLyuzwsHfyldhcvCjicGJzzztBvrlLBXxjHoDBlcsOGzwEuNWgkCKjdzBweDdHbwuyCHSmtIknezjqDtCeDDnfxBvHuzcDSvmlJAlFxtlIOsfCuyQoXtEJcIEznplrtsEIrtMNuIIFiIRjonsAozzHeBRltgFBMsCjCRjoHAwqpwIiCzzmhjuIsAfHyknTLFXDywevDCtxNvGsRitNtknLrZlqAyIvteeHLNvHovqjoAJxYlgAyvJChsNFBsVbHQwzAGBboyDbuNzsiuGGslbNzglpujrDjxtIvCpyHqWvQjHRokDaBXtihhuyterNFuMzoNRjsyyFepsXsqDouluGmvDqGMdkmDHoprtmrzCfhMuyKztHSrzzKnaEtqeIJCfeNzyRNzDSykyLClrtuoHvCjhyBHwSJHyknTCwbHxweFMzcevySrHelFgxDzntlxptyIJmmNGFsJjsypnLDufpfCdTWlohcHMsCuDEqDzLqbAfGkMDEilyEMvDxpQokosklFyIhuxlsvIHMsKZDSeyFDmkElttxzCpjzGBsFpsBcwEzrkrNBtEJmjkMuyGzjsgvrzMpeExweMvDoxABCBFuDypCHwAjpgJtICpemxaIMNvGCpyEYxlyNAlMvtujIESofpDLKClAmTpBtruMthlNGBsQfIFgxeznopBtruvqfAEvxGQjsGpqzFrqxtHtBTGfvSyCHSmtIknDswalktwFvCfrNFQsQfLykDtFpXCtJntJFuwCqyGHuIGpqzFCepgtnsCpteHquzKXwyvSoAmtlxXwuIEvtNBNvDxxLfyHOqbCjIhuTDfpFGBsSjrIgDDswamtJgxOzmhjuIsAfpRkmvwCQsjCIwvGfmNGIvDshFgGlKBqlssiDBCjkBGHsWuIMooSwAbTxpitrljxuFyqNosRcupLqbCjHtEAJpyLqIIFiIMqSDLjoEjsgyQtokBrLHGfGCuDzxCepiDuwCDiixyyBSntwqEvwnmtyZeuKtujIEGsRitQcsolqbyxweIvtevCtBHzgICtGlJmMwjpsuosbxMqyDQfHQkxrOqbyxDmuwzeCMnSGOmtyuoEGHlFNBeqItgmNFjvNfqCqBDGvbmtsyjCluhyCLsRttBvrpzniwtJtEAxfFOGcDTuIFgnzMpemfrkyIxztIpEsSBGCpDJGDdzsCaHDofxIBMvDbHIgnxwbepBpsBJzlmHtuHLfHMtDzxorysNYEPnpyFqNsKmHFgGlKwqEtDsEMpbxGruBXnDPgWlQkbTBxlBOsfryKNHHntgnvHsCZsDpIIvteKIGSCTsIGeupLhbDLDaxzlexBrHWKmqCqxEzrpmjCcxMthlNBPsQitPgSwDFXEhwyqdHfrNBPsQbCBukEvxtytCtxDDciHpBoMeHFgGpFCXyivoJJyulypuFQpJQgvdzntlqzetvwmeLBOBCjIgoolFBepBplAzoprwruzKuwCykJsAlFssiJosfrMuyGzusMyxzFCetxqiwwCpAHoyoSvEJqyvAwdzqshEMDfXBrHHGfrytBzMBbwxIaHOpeeHqcKzurFgnswAdzfGoKIobrxnLCTosrjoCwFbCjDnBTlcsOGzwUfDPusIGCepwzitNzoxBrLwCfpLfDswBlylIhuxlsvIHMsKxpQrvlQrkrBpsiHzliarNGHonMwBPQnpTyLaIKwbCCAAwSwtPAtlRIvlssfKIyzEFyNvDlxBuupHCqCDxnwOzhvuozCQuwCiywvAfylpntNzxeMBFroiDCdolFmFHfHsEMEpjusLoHeHFgnqsuizkutxzrphxnGvNsHCdEEamfosIsqTloCNuCBFpGBqkyQCetsvTxzEimHtQwSizGfCtKrcEmtyMvyuxItLoAuwCiywvAfylNoKClwiNBFsSuwConzACXyiCoJNlzeHLNvHovghDswHclqAovAEiiSsuzKpuDdEEACpmfsivTzvwuLuBXuwGpqEGCeprlhuIEiiLvxsVbHMxoCKqbrtIovAsfvBBLGDbCBekxwxspwIoCzjpyLvxsNorCvyzLqfDyxmuNsfwuvxbNJAJlEDLFXEhwyqdEimHxczKkJQvGlLleTxpitdrbzyuyFRpBCoyCwxcsjGdEPriLyEyUDuHMooxGAbEnrkuODTlyGICJuwCfyFyqlqkBeYHypxGnxoSzDScxJExopxweIvteMEAIKgvGPAEALqbEmxnwNrprHnMHzsIyiktFcepsplBJqbwOqxsMtwCikGwvblpxsIosfrMuyvDmsFgBsswazzIaDyDbmxVNGQbxLkxraCpDyprJDyhxIEuwMJzLqGeznkHmptICpemxvNrznCLgkCCriwjsmuNsfvynwvDexLoInGjqAtrkuOlohNBIyNvIKABpvqryyxnwClueHqJISjIMpwJznXoIDnJTzvAuANwSJHyknjGDZlsLeqMtueQuCzDPzyARFJAvFuIhEPrirIJsCTstEqxysvfDxNoKMCjhylIIVpCRioEQxrCtLnxJCtiIEuBXuwGpqdznhpuIhqIrjrAnLCTosRjyFyqAtiNoKHpbrCGQvzuNMwClAmVzzGeqGwzeLrHHFpxLikHsHXyDLhuMpBvyLIIQfpJnIrGrkrmDmuvquiLJuFCtHFgkDCnaxjneqCTteCqcADbCRkDEGxFHfHnJGJjrAGIvDsXPgkwDHativoxJxfezGyFVbGBuRFJAvFuCoMdDbmxgBsSixLiCDLjoEnCgiCpseHnHrApJEjDswAqthzeJvyekIGvoBlDLvrpyxaofBcqMCpyMrFxTtIGpDtEnQsjCsxzHbpErxoKmIFgGlQjozzCdyOEjpFFBsFpIFgBzOwezwHervnlXBrHGGfvMvyyACPsjLaLzousGruBCJLyxootjZvGDyyOmfkuANCQbxLnsvwjYlxIaHyTofOpEsStXQyolJClRtsABGEiiJnLsMuHypnxGCepwHaDypwiLLvCCzLCpDzNnolsssJJzevCtBHTosCtDswAlzkDfJCpdeLEIIRfAQqDswHtzzAdDOrfxMBuyDeIMvrpKtfytGaDTEimHtvISJHRwmvsAlFssoDOsffyAwvEpGOwsEwjtsnAeYBzutLrNHXtDymsyyFbEjHpuxtbpFLGMMfrIcxoEHmlsIscTsvrNvHuGbIPgkwDHdlAtmuLFjxynFCSpuNtyEwlqttCiDvHbCvHNWFpIQqkvwmXyDLaOdojhHGwoQfIFqErzRcpqIsEylnrBnJDXbAJqpDMmapsIhuRlzsFqjvNfqCmoALpltsvaHJFohuAxoQpJLfSHsBalrCnuvCceQyCBFJuCnDDGmXxswaFKJjjSBOKzoIRquyGFqsjIrKOsJhIANyMpLUjITLFXDoJsJOsbxMuyzNpzCfCzvjjysxcuOsfAuLMvDltNvqzAwdlwDuDylohuEIIMexLjoCturphDaJvyeeFyaCCJLGurJGDZzzAdLzmfiHGBsQfiFcDDsuiTrvoyIrusNrFzzcDSvSnGDiouGorvmmCNrFzXpJUjkEamfofutuMTxiHGBCLfpLfrzORdzyHisFlohuyFoMeLFcDDuqlzqXmIPAqsMrxHNhDRqxpPCclqAavOpsMArNCTuDDjoCwkrENsoDOqfiFyCyDjIgtolDuvotCtjCluwNHztCptQpDtFCbCjHtCzEpsGHwvQjvFvxzOJizyDfFzzqpyrMDDdxynvJLqfDtCeFNJdlInHoKzHRiEJLqbJmpvuCpsiEryDRbHIkxrEnfqNBgEDyheJCFMLzHCnpHznkTlDbqxvusMpBCNmCCzDdwyqprqeHdEtwOpBoRuJNknBMnpEnDnyIxzsJvHwNoXKgkyzxtotNoKFypAQuuHXpJPgqzAwdEtsoJDwmCIHxCHuiFgkyKFbCnHyEPoprNVNvHozgcwmMCezBsoYFypAcFQszsxRukDLDmtiFuuNEjsHQVwRoIyullvjpEmtruNEpjNuyAAvIFgupwyplxziDBxfeFBNCErJCuDtGwpEtDHuyCpzyBPsQmpQvclLDoofNwyOsulCFYBFmxQjlltnqsfIsyIEimMAyKOjrRwBpznpHwxtyIrTlyJuGOstRvIlxobnytdrPEwiLLACNeAMqutFpxyDLaOJyfxCzyKGfCQjoHwwqEtIhuGlemyFLCNnLyADswqbwqsoMItoxBrIHGfGUkxrVKXDptdCzHieNVNvNvvFvkmGDqlqAtxDDtxOszWIvHRhsyABepiIeBGtokSBOoApJRKntvwqvsDwMCluxBrBsKmIMukJaovzzLaDOEpoHBQHGfIPwDsamlyyznERHieNVNvHozydyFLrqTrHoHMJJxIyxGNnpLAzpGyipfqoKOtuEvBOHzmAgmxzOrpTxDrJJqnmMFyJDsNzqnJaClwipbEPEFzyAIzCTIPcnwsCbCfCdQxvmiSsIFHoHRcxnwRqsnCkYzGfrGvMGSipRiyovjjXfJryxpJxMsOBMzSMpDpNnoEjAlqIJcsxLuBXuwGpqTxHlFiDyEPDueLGGwRtxLioGwAvmtsy<br>task.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> string <span class="token keyword">import</span> ascii_letters<span class="token keyword">from</span> flag <span class="token keyword">import</span> flagctoi <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> ascii_letters<span class="token punctuation">.</span>index<span class="token punctuation">(</span>x<span class="token punctuation">)</span>itoc <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> ascii_letters<span class="token punctuation">[</span>x<span class="token punctuation">]</span>key <span class="token operator">=</span> flag<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'NCTF{}'</span><span class="token punctuation">)</span>len_key <span class="token operator">=</span> len<span class="token punctuation">(</span>key<span class="token punctuation">)</span>plaintext <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'plaintext.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>plain <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>p <span class="token keyword">for</span> p <span class="token keyword">in</span> plaintext <span class="token keyword">if</span> p <span class="token keyword">in</span> ascii_letters<span class="token punctuation">)</span>cipher <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span> itoc<span class="token punctuation">(</span> <span class="token punctuation">(</span> ctoi<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">+</span> ctoi<span class="token punctuation">(</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> len_key<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">52</span> <span class="token punctuation">)</span>  <span class="token keyword">for</span> i<span class="token punctuation">,</span>p <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>plain<span class="token punctuation">)</span> <span class="token punctuation">)</span>open<span class="token punctuation">(</span><span class="token string">'ciphertext.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span></code></pre><p>从题目中分析该题目是维吉尼亚密码<a href="https://www.guballa.de/vigenere-solver">Vigenere Solver</a><br>得到key = ‘vlbeunuozbpycklsjxlfpaq’<br><img src="/images/image-25.png" alt="Image text"><br>最后要区分大小写，把x改成X就是flag（。。。草）<br>至于为什么只把’x’改成大写，当然可以以ascii_letters为字母表另外写一个爆破程序，但是大可不必<br>或者通过解密，使得明文是一段有意义的文本<br>但是，其实可以耍小聪明：<br>设x为原文中的某个字符，y为key中对应于x的字符，z为cipher中对应于x的字符<br>若y为大写字母，则26&lt;=ctoi(y)&lt;=51，那么ctoi(x)+ctoi(y)大概率（至少大于50%的概率）会大于52，则ctoi(z)会小于ctoi(y)，故ctoi(z)-ctoi(y)小于0的次数较多的y极有可能是key中的大写字母<br>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> string <span class="token keyword">import</span> ascii_lettersctoi <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> ascii_letters<span class="token punctuation">.</span>index<span class="token punctuation">(</span>x<span class="token punctuation">)</span>cipher <span class="token operator">=</span> <span class="token string">'nsfAIHFrMuLynuCApeEstxJOzniQuyBVfAChDEznppfAiEIDcyNFBsCjsLvGlDtqztuaHvHbCmuyGNsIMhGlDtbotCoDzDjhyBzHGfHGfoHsuhlssIMvwlixBHHGfDRjoCKrapNIwqNyuxIBACQhtMwCmMCfEBpsrzEuiLGBoMipTkxrznoHfAkqwzvxuzCzDbLyApCGvjpqxkuwpgsLrqsVfCRwzlFmtlyrhuyEiivruFRpCRjkEDrqEqthyGwgsLnQvHmtzwDEznopBpsDOxvgBGIKzurFQxwQxkptutxzmfeLFQoRpJRvrpHxilwqeqMeiiIGBsQpCCvrptAlHsDnuRltmHuCGFpsBcwnsEblsswEPwerNpIADpJRCvwQxrntJltNpfAuFBwRstytoyvcepwtwqNlmmNGFsJjsQvkyvrkrstxJOzniQvNvzdDUdyJzjqzsErqxEjguyFMNwtPjsDwjoDfCdxzvftNGyzKjCEjsDxjqsjGMqFpimGpIADpJRFkovHJlpthyHnpqyBOHhmDMmoosClwiehEzmffOGMvDxDSnnyLuXFlwYEPvosQxCrRxwCpDswHopxDruvEzsOgBsXxDLvvlMpezwpnOOsjrANzHDsLCnoqLCepgtaHNHfpysNHGfOMqkyvlozxHetJGfvNuCGKjIRnoDLAbpyxnJCpqeLxuBCuwCpGpOnkEywrEPrisHrItSiDQgvtLCipyJnDzwtxBnNoKxpWuCxwuiqwDmIJxffIqSGSbzGpqlDnXvNIwqNzoxBrQoXuDRjonsAozzHeBjweTBBypDtIGnvHGDiosItqGvusGrIFzoNRjsyykrExweMvDtsLGItVbAIkxrFnuEyDmuIzxMNBIyziDJfyqLqbmjAtqOEiivnwyNgwCtmzsCgFxIfEMEiiBrFzNgxRdEEKqbHtJltIEmiNzygGfHyknVwnmJtJrxvyewNBSCTsHCnptxHlFiDnJHtohmuyKztHRkvwKxopfImuWFurIGuGRpGCcCDzntlxqevJCfEHLQoXxtIgzEynqEnCgsGztiLnHrBmDQgBEGCephprHJFtiFnHrXpJAqEwvBqlwItECpbvNuuHMvIRAwFKrZtyplMvJttFnSGhuLyuzwsHfyldhcvCjicGJzzztBvrlLBXxjHoDBlcsOGzwEuNWgkCKjdzBweDdHbwuyCHSmtIknezjqDtCeDDnfxBvHuzcDSvmlJAlFxtlIOsfCuyQoXtEJcIEznplrtsEIrtMNuIIFiIRjonsAozzHeBRltgFBMsCjCRjoHAwqpwIiCzzmhjuIsAfHyknTLFXDywevDCtxNvGsRitNtknLrZlqAyIvteeHLNvHovqjoAJxYlgAyvJChsNFBsVbHQwzAGBboyDbuNzsiuGGslbNzglpujrDjxtIvCpyHqWvQjHRokDaBXtihhuyterNFuMzoNRjsyyFepsXsqDouluGmvDqGMdkmDHoprtmrzCfhMuyKztHSrzzKnaEtqeIJCfeNzyRNzDSykyLClrtuoHvCjhyBHwSJHyknTCwbHxweFMzcevySrHelFgxDzntlxptyIJmmNGFsJjsypnLDufpfCdTWlohcHMsCuDEqDzLqbAfGkMDEilyEMvDxpQokosklFyIhuxlsvIHMsKZDSeyFDmkElttxzCpjzGBsFpsBcwEzrkrNBtEJmjkMuyGzjsgvrzMpeExweMvDoxABCBFuDypCHwAjpgJtICpemxaIMNvGCpyEYxlyNAlMvtujIESofpDLKClAmTpBtruMthlNGBsQfIFgxeznopBtruvqfAEvxGQjsGpqzFrqxtHtBTGfvSyCHSmtIknDswalktwFvCfrNFQsQfLykDtFpXCtJntJFuwCqyGHuIGpqzFCepgtnsCpteHquzKXwyvSoAmtlxXwuIEvtNBNvDxxLfyHOqbCjIhuTDfpFGBsSjrIgDDswamtJgxOzmhjuIsAfpRkmvwCQsjCIwvGfmNGIvDshFgGlKBqlssiDBCjkBGHsWuIMooSwAbTxpitrljxuFyqNosRcupLqbCjHtEAJpyLqIIFiIMqSDLjoEjsgyQtokBrLHGfGCuDzxCepiDuwCDiixyyBSntwqEvwnmtyZeuKtujIEGsRitQcsolqbyxweIvtevCtBHzgICtGlJmMwjpsuosbxMqyDQfHQkxrOqbyxDmuwzeCMnSGOmtyuoEGHlFNBeqItgmNFjvNfqCqBDGvbmtsyjCluhyCLsRttBvrpzniwtJtEAxfFOGcDTuIFgnzMpemfrkyIxztIpEsSBGCpDJGDdzsCaHDofxIBMvDbHIgnxwbepBpsBJzlmHtuHLfHMtDzxorysNYEPnpyFqNsKmHFgGlKwqEtDsEMpbxGruBXnDPgWlQkbTBxlBOsfryKNHHntgnvHsCZsDpIIvteKIGSCTsIGeupLhbDLDaxzlexBrHWKmqCqxEzrpmjCcxMthlNBPsQitPgSwDFXEhwyqdHfrNBPsQbCBukEvxtytCtxDDciHpBoMeHFgGpFCXyivoJJyulypuFQpJQgvdzntlqzetvwmeLBOBCjIgoolFBepBplAzoprwruzKuwCykJsAlFssiJosfrMuyGzusMyxzFCetxqiwwCpAHoyoSvEJqyvAwdzqshEMDfXBrHHGfrytBzMBbwxIaHOpeeHqcKzurFgnswAdzfGoKIobrxnLCTosrjoCwFbCjDnBTlcsOGzwUfDPusIGCepwzitNzoxBrLwCfpLfDswBlylIhuxlsvIHMsKxpQrvlQrkrBpsiHzliarNGHonMwBPQnpTyLaIKwbCCAAwSwtPAtlRIvlssfKIyzEFyNvDlxBuupHCqCDxnwOzhvuozCQuwCiywvAfylpntNzxeMBFroiDCdolFmFHfHsEMEpjusLoHeHFgnqsuizkutxzrphxnGvNsHCdEEamfosIsqTloCNuCBFpGBqkyQCetsvTxzEimHtQwSizGfCtKrcEmtyMvyuxItLoAuwCiywvAfylNoKClwiNBFsSuwConzACXyiCoJNlzeHLNvHovghDswHclqAovAEiiSsuzKpuDdEEACpmfsivTzvwuLuBXuwGpqEGCeprlhuIEiiLvxsVbHMxoCKqbrtIovAsfvBBLGDbCBekxwxspwIoCzjpyLvxsNorCvyzLqfDyxmuNsfwuvxbNJAJlEDLFXEhwyqdEimHxczKkJQvGlLleTxpitdrbzyuyFRpBCoyCwxcsjGdEPriLyEyUDuHMooxGAbEnrkuODTlyGICJuwCfyFyqlqkBeYHypxGnxoSzDScxJExopxweIvteMEAIKgvGPAEALqbEmxnwNrprHnMHzsIyiktFcepsplBJqbwOqxsMtwCikGwvblpxsIosfrMuyvDmsFgBsswazzIaDyDbmxVNGQbxLkxraCpDyprJDyhxIEuwMJzLqGeznkHmptICpemxvNrznCLgkCCriwjsmuNsfvynwvDexLoInGjqAtrkuOlohNBIyNvIKABpvqryyxnwClueHqJISjIMpwJznXoIDnJTzvAuANwSJHyknjGDZlsLeqMtueQuCzDPzyARFJAvFuIhEPrirIJsCTstEqxysvfDxNoKMCjhylIIVpCRioEQxrCtLnxJCtiIEuBXuwGpqdznhpuIhqIrjrAnLCTosRjyFyqAtiNoKHpbrCGQvzuNMwClAmVzzGeqGwzeLrHHFpxLikHsHXyDLhuMpBvyLIIQfpJnIrGrkrmDmuvquiLJuFCtHFgkDCnaxjneqCTteCqcADbCRkDEGxFHfHnJGJjrAGIvDsXPgkwDHativoxJxfezGyFVbGBuRFJAvFuCoMdDbmxgBsSixLiCDLjoEnCgiCpseHnHrApJEjDswAqthzeJvyekIGvoBlDLvrpyxaofBcqMCpyMrFxTtIGpDtEnQsjCsxzHbpErxoKmIFgGlQjozzCdyOEjpFFBsFpIFgBzOwezwHervnlXBrHGGfvMvyyACPsjLaLzousGruBCJLyxootjZvGDyyOmfkuANCQbxLnsvwjYlxIaHyTofOpEsStXQyolJClRtsABGEiiJnLsMuHypnxGCepwHaDypwiLLvCCzLCpDzNnolsssJJzevCtBHTosCtDswAlzkDfJCpdeLEIIRfAQqDswHtzzAdDOrfxMBuyDeIMvrpKtfytGaDTEimHtvISJHRwmvsAlFssoDOsffyAwvEpGOwsEwjtsnAeYBzutLrNHXtDymsyyFbEjHpuxtbpFLGMMfrIcxoEHmlsIscTsvrNvHuGbIPgkwDHdlAtmuLFjxynFCSpuNtyEwlqttCiDvHbCvHNWFpIQqkvwmXyDLaOdojhHGwoQfIFqErzRcpqIsEylnrBnJDXbAJqpDMmapsIhuRlzsFqjvNfqCmoALpltsvaHJFohuAxoQpJLfSHsBalrCnuvCceQyCBFJuCnDDGmXxswaFKJjjSBOKzoIRquyGFqsjIrKOsJhIANyMpLUjITLFXDoJsJOsbxMuyzNpzCfCzvjjysxcuOsfAuLMvDltNvqzAwdlwDuDylohuEIIMexLjoCturphDaJvyeeFyaCCJLGurJGDZzzAdLzmfiHGBsQfiFcDDsuiTrvoyIrusNrFzzcDSvSnGDiouGorvmmCNrFzXpJUjkEamfofutuMTxiHGBCLfpLfrzORdzyHisFlohuyFoMeLFcDDuqlzqXmIPAqsMrxHNhDRqxpPCclqAavOpsMArNCTuDDjoCwkrENsoDOqfiFyCyDjIgtolDuvotCtjCluwNHztCptQpDtFCbCjHtCzEpsGHwvQjvFvxzOJizyDfFzzqpyrMDDdxynvJLqfDtCeFNJdlInHoKzHRiEJLqbJmpvuCpsiEryDRbHIkxrEnfqNBgEDyheJCFMLzHCnpHznkTlDbqxvusMpBCNmCCzDdwyqprqeHdEtwOpBoRuJNknBMnpEnDnyIxzsJvHwNoXKgkyzxtotNoKFypAQuuHXpJPgqzAwdEtsoJDwmCIHxCHuiFgkyKFbCnHyEPoprNVNvHozgcwmMCezBsoYFypAcFQszsxRukDLDmtiFuuNEjsHQVwRoIyullvjpEmtruNEpjNuyAAvIFgupwyplxziDBxfeFBNCErJCuDtGwpEtDHuyCpzyBPsQmpQvclLDoofNwyOsulCFYBFmxQjlltnqsfIsyIEimMAyKOjrRwBpznpHwxtyIrTlyJuGOstRvIlxobnytdrPEwiLLACNeAMqutFpxyDLaOJyfxCzyKGfCQjoHwwqEtIhuGlemyFLCNnLyADswqbwqsoMItoxBrIHGfGUkxrVKXDptdCzHieNVNvNvvFvkmGDqlqAtxDDtxOszWIvHRhsyABepiIeBGtokSBOoApJRKntvwqvsDwMCluxBrBsKmIMukJaovzzLaDOEpoHBQHGfIPwDsamlyyznERHieNVNvHozydyFLrqTrHoHMJJxIyxGNnpLAzpGyipfqoKOtuEvBOHzmAgmxzOrpTxDrJJqnmMFyJDsNzqnJaClwipbEPEFzyAIzCTIPcnwsCbCfCdQxvmiSsIFHoHRcxnwRqsnCkYzGfrGvMGSipRiyovjjXfJryxpJxMsOBMzSMpDpNnoEjAlqIJcsxLuBXuwGpqTxHlFiDyEPDueLGGwRtxLioGwAvmtsy'</span>key <span class="token operator">=</span> <span class="token string">'vlbeunuozbpycklsjxlfpaq'</span>c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>count <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token punctuation">[</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    count<span class="token punctuation">[</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token punctuation">[</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctoi<span class="token punctuation">(</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> ctoi<span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        count<span class="token punctuation">[</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{vlbeunuozbpycklsjXlfpaq}</span></code></pre><p><a href="https://blog.csdn.net/weixin_52446095/article/details/119003999">参考博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 2021.7刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc</title>
      <link href="2021/0714undefined.html"/>
      <url>2021/0714undefined.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="1、金三胖"><a href="#1、金三胖" class="headerlink" title="1、金三胖"></a><strong>1、金三胖</strong></h3><p>下载文件下来发现是一张动态图片，一闪而过好像发现了一些什么，话不多说直接上工具StegSlove<br><img src="/images/image-26.png" alt="Image text"><br><img src="/images/image-27.png" alt="Image text"><br><img src="/images/image-28.png" alt="Image text"><br><img src="/images/image-29.png" alt="Image text"><br>从而得到flag{hello hongke}</p><h3 id="2、二维码"><a href="#2、二维码" class="headerlink" title="2、二维码"></a><strong>2、二维码</strong></h3><p>下载文件下来得到一张直接用QR research这个工具对图片进处理<img src="/images/image-30.png" alt="Image text">发现并没有发现有啥文件，然后用010 打开发现里面隐藏着压缩包、text文件，直接将文件拖入kali<img src="/images/image-31.png" alt="Image text">用binwalk 文件名 -e 提取<br><img src="/images/image-32.png" alt="Image text"><img src="/images/image-33.png" alt="Image text"><br>得到两个文件然后用zipper暴力破解的到密码7639解压得到CTF{vjpw_wnoei}</p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协会平台</title>
      <link href="2021/0616undefined.html"/>
      <url>2021/0616undefined.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="pyre"><a href="#pyre" class="headerlink" title="pyre"></a>pyre</h2><p>题目是一个pyc文件先反汇编一下，得到py文件。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Embedded file name: pyre.py</span><span class="token keyword">import</span> binasciikey <span class="token operator">=</span> <span class="token number">35</span>flag <span class="token operator">=</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>ans <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> c <span class="token keyword">in</span> flag<span class="token punctuation">:</span>    ans <span class="token operator">+=</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">^</span> key<span class="token punctuation">)</span><span class="token keyword">if</span> binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span>ans<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'1a124715424713110e464510130e171a16100e1a4011120e164045151312151a1a141242'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'you are right!!'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'incorrect!!'</span><span class="token punctuation">)</span></code></pre><p>由以上代码分析可得，flag是由键盘输入的，通过字符转16进制ord()函数再与key异或得到该’1a124715424713110e464510130e171a16100e1a4011120e164045151312151a1a141242’<br>所以解题脚本人如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> binascii<span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token operator">=</span><span class="token string">''</span>    a <span class="token operator">=</span> bytearray<span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>        x <span class="token operator">=</span> i        x <span class="token operator">=</span> x<span class="token operator">^</span><span class="token number">35</span>        s <span class="token operator">+=</span>chr<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> sb <span class="token operator">=</span> <span class="token string">'1a124715424713110e464510130e171a16100e1a4011120e164045151312151a1a141242'</span>flag<span class="token operator">=</span>decode<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#hosectf{91d6ad02-ef30-4953-9c21-5cf60169971a}</span></code></pre><h2 id="simple-bc"><a href="#simple-bc" class="headerlink" title="simple_bc"></a>simple_bc</h2><p>题目<br><img src="/images/image-103.png" alt="题目"></p><p>解题过程<br>1、这是会长从ciscn2021国赛上复现改编的一道题目，难！！！<br>2、<a href="https://www.cnblogs.com/ren-ctfnote/p/14948764.html">wp1</a>、<a href="https://blog.csdn.net/weixin_43363675/article/details/116940992">wp2</a><br>3、我还没弄懂先留在这吧！</p><h2 id="湖南科技学院2021-upx-re"><a href="#湖南科技学院2021-upx-re" class="headerlink" title="[湖南科技学院2021]upx_re"></a>[湖南科技学院2021]upx_re</h2><p>题目<br><img src="/images/image-104.png" alt="题目"></p><p>1、<strong>知识点</strong>：先学习一下ELF文件<a href="https://www.cnblogs.com/cdcode/p/5551649.html">linux-ELF</a><br>2、先用程序进行查壳，发现有upx壳<br>百度网盘下载链接: <a href="https://pan.baidu.com/s/1i4Z5frn">https://pan.baidu.com/s/1i4Z5frn</a> 密码: wwyf<br><img src="/images/image-105.png" alt="查壳"><br>3、尝试拖入ida64查看程序结构，发现函数很少：<br><img src="/images/image-106.png" alt="ida"><br>原本想Alt+t在16进制文本搜索一下发现找不到flag<br>4、还是老老实实脱壳吧<br>UPX 软件的 <a href="https://github.com/upx/upx/releases/tag/v3.96">Github下载地址</a>，拿来即可食用：<br><img src="/images/image-107.png" alt="upx"><br>还Cmder的安装教程<a href="https://www.cnblogs.com/dxqNet/p/11388209.html">教程</a><a href="https://cmder.net/">下载地址</a><br>然后利用工具进行脱壳<br><img src="/images/image-108.png" alt="脱壳"><br>再将脱壳完的文件拖入ida一眼就可以看到flag了<br><img src="/images/image-109.png" alt="ida"><br>husectf{791802a8-4e1d-4b78-8233-769e59097f03}</p>]]></content>
      
      
      <categories>
          
          <category> 协会平台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界(crypto)</title>
      <link href="2021/0603undefined.html"/>
      <url>2021/0603undefined.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="bsae64"><a href="#bsae64" class="headerlink" title="bsae64"></a>bsae64</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=crypto&amp;number=5&amp;grade=0&amp;id=5109&amp;page=1">题目链接</a><br>题目内容：<br>Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9<br>直接在线解密<a href="http://ctf.ssleye.com/base64.html">base编码</a><br><img src="/images/image-16.png" alt="image text"></p><h2 id="Caesar"><a href="#Caesar" class="headerlink" title="Caesar"></a>Caesar</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=crypto&amp;number=5&amp;grade=0&amp;id=5110&amp;page=1">题目链接</a><br>题目内容：<br>oknqdbqmoq{kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz}<br>猜测是凯撒加密或者栅栏加密<br><a href="https://www.qqxiuzi.cn/bianma/kaisamima.php?ivk_sa=1024320u">凯撒密码加密解密</a><br>cyberpeace{you_have_learned_caesar_encryption}<br>偏移量为12<br>或者用下面的脚本解密个人比较喜欢用脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">casearDecrypt</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> source_char<span class="token punctuation">,</span> destination_char<span class="token punctuation">,</span> list_all<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> list_all <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> offset <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            convertChar<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        offset <span class="token operator">=</span>  ord<span class="token punctuation">(</span>destination_char<span class="token punctuation">)</span> <span class="token operator">-</span> ord<span class="token punctuation">(</span>source_char<span class="token punctuation">)</span>        convertChar<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">convertChar</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">:</span>    chars <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz"</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> ciphertext<span class="token punctuation">:</span>                 is_upper_flag <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> char<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            char <span class="token operator">=</span> char<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>            is_upper_flag <span class="token operator">=</span> <span class="token number">1</span>                 <span class="token keyword">if</span> char <span class="token operator">not</span> <span class="token keyword">in</span> chars<span class="token punctuation">:</span>            outputChar<span class="token punctuation">(</span>is_upper_flag<span class="token punctuation">,</span> char<span class="token punctuation">)</span>            <span class="token keyword">continue</span>                 tempchar_ascii <span class="token operator">=</span> ord<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">+</span> offset        tempchar <span class="token operator">=</span>chr<span class="token punctuation">(</span>tempchar_ascii<span class="token punctuation">)</span>        <span class="token keyword">if</span> tempchar <span class="token operator">not</span> <span class="token keyword">in</span> chars<span class="token punctuation">:</span>            <span class="token keyword">if</span> offset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                tempchar_ascii <span class="token operator">+=</span> len<span class="token punctuation">(</span>chars<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tempchar_ascii <span class="token operator">-=</span> len<span class="token punctuation">(</span>chars<span class="token punctuation">)</span>        tempchar <span class="token operator">=</span> chr<span class="token punctuation">(</span>tempchar_ascii<span class="token punctuation">)</span>        outputChar<span class="token punctuation">(</span>is_upper_flag<span class="token punctuation">,</span> tempchar<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">outputChar</span><span class="token punctuation">(</span>is_upper_flag<span class="token punctuation">,</span> char<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> is_upper_flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>char<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>ciphertext <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Please input ciphertext:\n"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    operation <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"List all results?y/n:"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> operation <span class="token operator">==</span> <span class="token string">'y'</span> <span class="token operator">or</span> operation <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">:</span>        casearDecrypt<span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">elif</span> operation <span class="token operator">==</span> <span class="token string">'n'</span> <span class="token operator">or</span> operation <span class="token operator">==</span> <span class="token string">'N'</span><span class="token punctuation">:</span>        des_char <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Please input destination_char:\n"</span><span class="token punctuation">)</span>        sors_char <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Please input source_char:\n"</span><span class="token punctuation">)</span>        casearDecrypt<span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> sors_char<span class="token punctuation">,</span> des_char<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Input error! Please input y/n:"</span><span class="token punctuation">)</span></code></pre><h2 id="Morse"><a href="#Morse" class="headerlink" title="Morse"></a>Morse</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=crypto&amp;number=5&amp;grade=0&amp;id=5111&amp;page=1">题目链接</a><br>题目内容：<br>11 111 010 000 0 1010 111 100 0 00 000 000 111 00 10 1 0 010 0 000 1 00 10 110<br>由题目可知这是摩斯密码，所以<a href="http://www.txttool.com/t/?id=Mzg1">摩斯密码</a><br><img src="/images/image-17.png" alt="image text"><br>再把字母转小写就行了</p><h2 id="幂数加密"><a href="#幂数加密" class="headerlink" title="幂数加密"></a>幂数加密</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=crypto&amp;number=5&amp;grade=0&amp;id=5120&amp;page=1">题目链接</a><br>题目内容：<br>8842101220480224404014224202480122<br>先百度了解下什么是幂数加密<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%B9%82%E6%95%B0%E5%8A%A0%E5%AF%86%E6%B3%95/2410151?fr=aladdin">幂数加密</a></p><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"88421"</span><span class="token punctuation">,</span><span class="token string">"0122"</span><span class="token punctuation">,</span><span class="token string">"048"</span><span class="token punctuation">,</span><span class="token string">"02244"</span><span class="token punctuation">,</span><span class="token string">"04"</span><span class="token punctuation">,</span><span class="token string">"0142242"</span><span class="token punctuation">,</span><span class="token string">"0248"</span><span class="token punctuation">,</span><span class="token string">"0122"</span><span class="token punctuation">]</span> flag<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     str <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span>     list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>     sum<span class="token operator">=</span><span class="token number">0</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> str<span class="token punctuation">:</span>         list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>         length <span class="token operator">=</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>         sum<span class="token operator">+=</span>int<span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     flag<span class="token operator">+=</span>chr<span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">+</span>sum<span class="token punctuation">)</span> <span class="token keyword">print</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#WELLDONE</span></code></pre><h2 id="Railfence"><a href="#Railfence" class="headerlink" title="Railfence"></a>Railfence</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=crypto&amp;number=5&amp;grade=0&amp;id=5112&amp;page=1">题目连接</a><br>题目内容：<br>ccehgyaefnpeoobe{lcirg}epriec_ora_g<br>猜测是凯撒密码或者栅栏密码<br><img src="/images/image-18.png" alt="image text"><br>但是用脚本没有得到相应的结果<br>所以又跑去用栅栏加密脚本</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#   e = </span><span class="token triple-quoted-string string">'''KYsd3js2E{a2jda}'''</span><span class="token keyword">def</span> <span class="token function">zhalan</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>    elen <span class="token operator">=</span> len<span class="token punctuation">(</span>e<span class="token punctuation">)</span>    field<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>elen<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>elen<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            field<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> f <span class="token keyword">in</span> field<span class="token punctuation">:</span>        b <span class="token operator">=</span> elen <span class="token operator">/</span> f        result <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token string">''</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>elen<span class="token punctuation">)</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> i <span class="token operator">%</span> b<span class="token punctuation">;</span>            result<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span>result<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        d <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>            d <span class="token operator">=</span> d <span class="token operator">+</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">print</span> d<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    e <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">"please input the strings:\n"</span><span class="token punctuation">)</span>    zhalan<span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p>发现还是不对但是在栅栏密码中发现了像flag的字符串，百度搜了下原来还有栅栏密码的变种w形式的栅栏密码<br><a href="www.atoolbox.net/Tool.php?Id=777.com">W形式栅栏密码</a><br>栏目为5<br><img src="/images/image-19.png" alt="image text"></p><h2 id="不仅仅是Morse"><a href="#不仅仅是Morse" class="headerlink" title="不仅仅是Morse"></a>不仅仅是Morse</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=crypto&amp;number=5&amp;grade=0&amp;id=5117&amp;page=1">题目连接</a><br>题目内容：<br>–/.-/-.–/..–.-/-…/./..–.-/…./.-/…-/./..–.-/.-/-./—/-/…././.-./..–.-/-.././-.-./—/-.././…./…./…./…./.-/.-/.-/.-/.-/-…/.-/.-/-…/-…/-…/.-/.-/-…/-…/.-/.-/.-/.-/.-/.-/.-/.-/-…/.-/.-/-…/.-/-…/.-/.-/.-/.-/.-/.-/.-/-…/-…/.-/-…/.-/.-/.-/-…/-…/.-/.-/.-/-…/-…/.-/.-/-…/.-/.-/.-/.-/-…/.-/-…/.-/.-/-…/.-/.-/.-/-…/-…/.-/-…/.-/.-/.-/-…/.-/.-/.-/-…/.-/.-/-…/.-/-…/-…/.-/.-/-…/-…/-…/.-/-…/.-/.-/.-/-…/.-/-…/.-/-…/-…/.-/.-/.-/-…/-…/.-/-…/.-/.-/.-/-…/.-/.-/-…/.-/.-/-…/.-/.-/.-/.-/-…/-…/.-/-…/-…/.-/.-/-…/-…/.-/.-/-…/.-/.-/-…/.-/.-/.-/-…/.-/.-/-…/.-/.-/-…/.-/.-/-…/.-/-…/.-/.-/-…/-…/.-/-…/.-/.-/.-/.-/-…/-…/.-/-…/.-/.-/-…/-…/.-<br><a href="http://www.txttool.com/t/?id=Mzg1">摩斯密码</a><br><img src="/images/image-20.png" alt="image text"><br>发现还存在一个加密从形式上可以看出是培根密码<a href="http://ctf.ssleye.com/baconian.html">Baconian Cipher</a><br><img src="/images/image-21.png" alt="image text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc</title>
      <link href="2021/0602undefined.html"/>
      <url>2021/0602undefined.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="湖南科技学院2021-lsb"><a href="#湖南科技学院2021-lsb" class="headerlink" title="[湖南科技学院2021]lsb"></a>[湖南科技学院2021]lsb</h2><p>题目<br><img src="/images/lsb.png" alt="lsb"><br>把题目文件下载下来，直接拖入Stegsolve<br><img src="/images/image-23.png" alt="Image text"><br>然后用010editor查看的到flag<br><img src="/images/image-24.png" alt="Image text"></p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA</title>
      <link href="2021/0602undefined.html"/>
      <url>2021/0602undefined.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-公钥解析，签名加密"><a href="#1-公钥解析，签名加密" class="headerlink" title="1.公钥解析，签名加密"></a>1.公钥解析，签名加密</h2><p>如果题目给了文件后缀名pem或者题干文件带有KEY的文件，就可以使用Linux自带的工具openssl,提取出n和e。</p><pre><code>openssl rsa -pubin -text -modulus -in warmup -in pubkey.pem</code></pre><p>还有一个就是用在线的公钥解析<a href="http://ctf.ssleye.com/pub_asys.html">公钥解析</a><br>得到n和e之后，用在线分解的网站<a href="http://www.factordb.com/index.php">factordb</a><br>得到p,q<br>然后密文c可能是一个flag.enc的文件直接用winhex或者010把密文转化成16进制。<br>一般解题脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span>n <span class="token operator">=</span>e <span class="token operator">=</span>c <span class="token operator">=</span> p <span class="token operator">=</span>q <span class="token operator">=</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#计算出私钥</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#计算出明文m</span>flag<span class="token operator">=</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><p>2021萌新赛–凛冬以至</p><h2 id="2-利用公约数求解"><a href="#2-利用公约数求解" class="headerlink" title="2.利用公约数求解"></a>2.利用公约数求解</h2><p>如果题目提供两次公钥解密过程使用的n1和n2具有相同的素数因子，可以利用欧几里得算法的到一个公约数p，然后就可以把n1和n2分解了</p><pre class=" language-python"><code class="language-python">p<span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#gmpy2的gcd，用于求最大公约数。</span></code></pre><p>自定义函数gcd()欧几里得算法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a<span class="token operator">&lt;</span>b<span class="token punctuation">:</span>        a<span class="token punctuation">,</span>b <span class="token operator">=</span> b<span class="token punctuation">,</span>a    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> a<span class="token operator">%</span>b        a <span class="token operator">=</span> b        b <span class="token operator">=</span> temp    <span class="token keyword">return</span> a</code></pre><h2 id="3-分解N得到多个相同的P"><a href="#3-分解N得到多个相同的P" class="headerlink" title="3.分解N得到多个相同的P"></a>3.分解N得到多个相同的P</h2><p>1.欧拉函数的性质：<br>p为素数，n=p^a 所以 φ(n)=(p−1)∗p^(a−1)=p^a−p^(a−1)<br>φ(n)=(p1-1) * (p2-1)* (p3-1)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes n<span class="token operator">=</span> e<span class="token operator">=</span> c<span class="token operator">=</span> p1 <span class="token operator">=</span> p2 <span class="token operator">=</span> p3 <span class="token operator">=</span> phi <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p2<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p3<span class="token number">-1</span><span class="token punctuation">)</span>  d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>  m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token keyword">print</span> （long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> RSA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>古典密码</title>
      <link href="2021/0601undefined.html"/>
      <url>2021/0601undefined.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p>]]></content>
      
      
      <categories>
          
          <category> 古典密码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古典密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凛冬以至</title>
      <link href="2021/0531undefined.html"/>
      <url>2021/0531undefined.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a><strong>签到</strong></h2><p>  题目：NTQ1NjcwNTg1MjMwNGU2MTRkN2E0ZTUwNTQ2YzU2NTg1NDdhNGU1NDRlMzAzNTQ3NTc0NTU5MzI0ZTQ2NTI0YjU0NTQ1NjU2NTM0NTZiMzM1MzU0MzAzZA%3D%3D<br>  %3D在URL里面为=<br>  所以这是一个base64加密下面一个在线解密的网站:<br>  <a href="http://ctf.ssleye.com/base64.html">base64</a><br>  <img src="/images/image-13.png" alt="Image text"><br>  得到一串16进制字符串5456705852304e614d7a4e50546c5658547a4e544e303547574559324e46524b5454565653456b335354303d<br>  然后用16进制转字符串在线网站<br>  <a href="https://zixuephp.net/tool-str-hex.html">16进制字符串</a><br>  <img src="/images/image-14.png" alt="Image text"><br>  得到TVpXR0NaMzNPTlVXTzNTN05GWEY2NFRKTTVVSEk3ST0=然后在base64，在base32都到flag{sign_in_right}</p><h2 id="rsa256"><a href="#rsa256" class="headerlink" title="rsa256"></a><strong>rsa256</strong></h2><p>  下载得到一个压缩包直接上脚本</p><pre class=" language-python"><code class="language-python">c1 <span class="token operator">=</span> <span class="token number">0x0B39CC1B6127D3BBED2BC045148C911D467985A94B147EDE80750F95A360D47A</span>c2 <span class="token operator">=</span> <span class="token number">0x9AFB1CDC1986D3BB53A3425B396C83618EFAAA81C14C965C813415E5C54FCE4B</span>c3 <span class="token operator">=</span> <span class="token number">0x0F04B3B67EF230F80BB518D26DED38AF84B6C8D87BA80C09EBF1D865123082FA</span>n <span class="token operator">=</span> <span class="token number">98432079271513130981267919056149161631892822707167177858831841699521774310891</span>p <span class="token operator">=</span> <span class="token number">302825536744096741518546212761194311477</span>q <span class="token operator">=</span> <span class="token number">325045504186436346209877301320131277983</span>e <span class="token operator">=</span> <span class="token number">65537</span><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>phi<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(d)</span>m1 <span class="token operator">=</span> pow<span class="token punctuation">(</span>c1<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>m2 <span class="token operator">=</span> pow<span class="token punctuation">(</span>c2<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>m3 <span class="token operator">=</span> pow<span class="token punctuation">(</span>c3<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{3b6d3806-4b2b-11e7-95a0-000c29d7e93d}</span></code></pre><h2 id="big-exponent"><a href="#big-exponent" class="headerlink" title="big exponent"></a><strong>big exponent</strong></h2><p>题目一个压缩包里面有三个公钥文件、一个py文件、一个flag.enc文件<br><img src="/images/image-15.png" alt="image text"><br>然后三个公钥文件直接在线解密<br><a href="http://ctf.ssleye.com/pub_asys.html">公钥解析</a><br>然后得到<br>e1 = 1602756013062112843744042848696751291734328877359431629694202442970213958619662519632912193714465417475466815521066706941763237747867361186913306445129211826325418293180840491906582168046775011902187128141553876554027713566535166942445716391472657244732048178191442990104179346452453955565791601538034168571296789315804768285499137885434524729333086995652263390337079371130206550240700066939844703584472188151540022021010493776597423277845220640999153544739230286588525750509153214472224408941595500917168173154237309301590704927373355915044693214928571732630774782699886200158926633708423762013924971588111846040637913518589837132640710389683172084726417372521165973166248965018352226577610296331263536718335546936698363703546273609914679582318416258368128209310517101158271088467767872409470829124988064340805991237546597067227179804849995209190941225949426623192206566609053871819997087958681298608926214864605144946630018633964330698142294342646806166413223615564901058200767400412658431809514870082489588903686687244605745555051646530519595510577875446720832450864212827938087056696786030988058247078944886916082594200248708750492466227915219311120228702916717634212959658361246513056518215813568863758319903741132911625511</p><p>n 1= </p><pre class=" language-python"><code class="language-python"><span class="token number">1038997220248847443438564705725653697094452215469936659327465900</span><span class="token number">6962946119149578322524182527610365274630374823513225511576566970</span><span class="token number">0842197265711121714987654684549920920320989687915812513639812733</span><span class="token number">3535171636602639550913775792032068470548425607104716490965949335</span><span class="token number">2078954931917152094605722917224289566534793783961520549197586345</span><span class="token number">5506878996650717808257188103959553347748525290176681466341888363</span><span class="token number">8071830555234712073859315649908120135977221104650051416219748315</span><span class="token number">1522501404569451950489266441212978454319065210389542615479438368</span><span class="token number">3058397628437202621595196747392141094607350146897968465061107886</span><span class="token number">8318449094865132316130315506605346747085923431120000484502980083</span><span class="token number">4717834050659163269482118990403483214933192284752677787379935884</span><span class="token number">7448292980557245985856226017202068372494261479321030720827948410</span><span class="token number">3571579213942209374398373184610887478901904548713015544238556778</span><span class="token number">3453353134728022801984465689809769641368264999340835632297409830</span><span class="token number">8690388953028828327997137590326248817774960535402880287516147947</span><span class="token number">9791086931289611280730945368726194963218905927025387729495682354</span><span class="token number">4426958058484838008690369213989176715919832284260911094734592168</span><span class="token number">2602990217846020997412112817363494815388349894694169404503065689</span><span class="token number">9591169150440666299010443827956197750797179041705612561156982050</span><span class="token number">2961491952589</span></code></pre><p>e2 = 2904058618957347796124806709844284214100347303482285059334842732156837427829028418920870968317177518028202483477549514212955602692003773329471277987963666941967413171313415800413419035946782664102531583332702813106576020585616653743371004518451826620196955977231854966488359561580200233096295646666641174918511109948768573194092566999584870294045886424642762432262548742357989212451404702164775093450442502101704487267578537521568104803212351617897518360418816225241353834568549073742928755460051553731472149086328300601631382240404345064443429825021218866893595330304773327331625471097046963602134853969990771813467918989638459534586121489116502696806243321935512681823926215427247490383579587683616800665676470585563938390230514312532088869777318211152869729889605399179012809125224288902698315984031292176410078299624068706977744884534372985229093509461309044283036222251451629256507078267852271542419681478299549238667404075635069223260077018992991699204691169927302219293706248235790806563798411283016548214931544796004828252360169451578597816847440083848623571457419977424379075036672826539077109974259972227306009381651363948380296783778147092953371690519222478858048155676852084473468114026565915661459803106941095015763</p><p>n 2=  </p><pre class=" language-python"><code class="language-python"><span class="token number">2947099132768432239262140325489012008136562359786164146900132065</span><span class="token number">8749438743102148451478865489139274928976381180800827334647598716</span><span class="token number">1097216166109639313571126720848946609299157496083280390743239382</span><span class="token number">2522054842671146687216826758961986352293587044309465017950910137</span><span class="token number">1425848147532465131964502204205438062565226241230114203012053778</span><span class="token number">2743980709058687150290447690092273119094192260249147234169109994</span><span class="token number">8406959589435264602346525356951434483133228448982018806919026427</span><span class="token number">7962387019530493740432404270651143799124007614018353822316441648</span><span class="token number">9092720922904542023283887701490105957077106395100234966794823868</span><span class="token number">4003020817629602614271587804803350183809313620245659299022506108</span><span class="token number">1994229430097099961625355563665863640712070306243527891650126904</span><span class="token number">8172692641065498810900329484294939222325516926525604023033377754</span><span class="token number">0771236826373527806129949567064986986248005230506249577950447427</span><span class="token number">2554161971619449782256952809438129767318694173596497173782086247</span><span class="token number">4394925076326970969559125934976698580151627209910973224093497012</span><span class="token number">9506348663036316833397070269529278378508785318832239680957227443</span><span class="token number">2080245224918137683065479557191975153136010911375315466804487257</span><span class="token number">6198908105116969808540334406913795516807039999674325041930176306</span><span class="token number">2376596262269956472939379607564392703925189842964212071831556905</span><span class="token number">393561597209</span></code></pre><p>e3 = 65537</p><p>n3 =</p><pre class=" language-python"><code class="language-python"><span class="token number">1492295977578406649931652893531632582514001120887183062765319154</span><span class="token number">9546959775167708525042423039865322548420928571524120743831693550</span><span class="token number">1235634939817979509128958934762004470833865493533360868990649218</span><span class="token number">7858207434679132010410613996501048061487959235779305334257785076</span><span class="token number">1108944086318475849882440272688246818022209356852924215237481460</span><span class="token number">2293775442972249838870266692228859873230823240446458830709162434</span><span class="token number">3952180970267429546925372361667724576224249447858780740268847417</span><span class="token number">6102093482019417118703747411862420536240611089529331148684440513</span><span class="token number">9346094128849410916515948615306060869821748624617396047053544165</span><span class="token number">87503836130151492937714365614194583664241</span></code></pre><p>p = 101762447604961968347497011921099322367324119881977823223715806843654916018223203152717441386396615480134613864942068489600487206751473112264495957512819776729786840027245275219664091321087832913341367749452671938119115622233015167030327196487127307195872792552039408988207189866115101567965404039921455793363</p><p>q =146645055489569596158773422326511843870914610026045288623162173369449741025994927278359852181645222010216728295790096211969513458244344811852179454305768973973420398459241985170762812039623053792853389316411927678494740679905048052776274447299638217155556426312374908963757267001415016478005573936685580868907</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token number">14922959775784066499316528935316325825140011208871830627653191549546959775167708525042423039865322548420928571524120743831693550123563493981797950912895893476200447083386549353336086899064921878582074346791320104106139965010480614879592357793053342577850761108944086318475849882440272688246818022209356852924215237481460229377544297224983887026669222885987323082324044645883070916243439521809702674295469253723616677245762242494478587807402688474176102093482019417118703747411862420536240611089529331148684440513934609412884941091651594861530606086982174862461739604705354416587503836130151492937714365614194583664241</span>e <span class="token operator">=</span> <span class="token number">65537</span>p <span class="token operator">=</span> <span class="token number">101762447604961968347497011921099322367324119881977823223715806843654916018223203152717441386396615480134613864942068489600487206751473112264495957512819776729786840027245275219664091321087832913341367749452671938119115622233015167030327196487127307195872792552039408988207189866115101567965404039921455793363</span>q <span class="token operator">=</span> <span class="token number">146645055489569596158773422326511843870914610026045288623162173369449741025994927278359852181645222010216728295790096211969513458244344811852179454305768973973420398459241985170762812039623053792853389316411927678494740679905048052776274447299638217155556426312374908963757267001415016478005573936685580868907</span>c <span class="token operator">=</span> <span class="token number">0x6BA3E02E5B09958B082962C011D7EEC896FC61A34020E2D3AB2550CCA700943ED7FC330BA185BA5D487C75DD0E2796C4E273BCF4D294D7C9197CCFF7FAE38198CDAA190DDDC47C9DA4C418DAFE71A4F233EFBF36FBA23C8A31D0C9AC8F3E44AF6194224E4F5AFFF1D8933EEA38D932945D07A5B3766C3EA165F2CB52DD5873BF47B5E96FCE855D1BD2A96E9BA3A2C7A40BCAF1E7367354E21B4D1EAF1729DA9F9435340CBA17EC59B25255480D4C4C8E4528644C780B2FC24DB5D25C7B45FF0FEC0F4D6345A14D650CAEFA212CB887EC7F3FD8CCBCBBAB0E0B7091AC8BEB110A2550E6D5BF51DB68DB4269FF32DE71BD53B907F16A452F382B1D59801FCD70FD</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{welcome_to_2th_compettion_2021}</span></code></pre><h2 id="字符串和字节"><a href="#字符串和字节" class="headerlink" title="字符串和字节"></a>字符串和字节</h2><p>题目文件的到两组二进数<br>010101100100010101110101010001010100010001000101010101100100011001010110011001000100010001000110011001100110010001100100010101100100010001010101010101010101010101000110 </p><p>101010101001101111011001101101011011011101000100100100110110010010010101001101101010011101000011010101010101010000110111100001000101101010000110101010011000101001001111</p><p>这道密码学题，在比赛中一直没有思路直到看了题解才知道怎么写原来是这两组数据的奇数位和偶数位分别相加，用Python写的脚本如下：</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'010101100100010101110101010001010100010001000101010101100100011001010110011001000100010001000110011001100110010001100100010101100100010001010101010101010101010101000110'</span>t <span class="token operator">=</span> <span class="token string">'101010101001101111011001101101011011011101000100100100110110010010010101001101101010011101000011010101010101010000110111100001000101101010000110101010011000101001001111'</span><span class="token keyword">import</span> binasciiflag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">print</span> binascii<span class="token punctuation">.</span>a2b_hex<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>int<span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag{ce3e502c-48c9-4d50-9990-5b81db6fcbf0}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 萌新比赛题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 凛冬以至(crypto) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界</title>
      <link href="2021/0530undefined.html"/>
      <url>2021/0530undefined.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h1><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="新手练习区"><a href="#新手练习区" class="headerlink" title="新手练习区"></a>新手练习区</h3><h2 id="instanity"><a href="#instanity" class="headerlink" title="instanity"></a><strong>instanity</strong></h2><p>直接把题目文件拖入IDA用shift+F12就看到flag了</p><p><img src="/images/image-3.png" alt="Image text"></p><h2 id="python-trade"><a href="#python-trade" class="headerlink" title="python-trade"></a><strong>python-trade</strong></h2><p>题目是一个pyc文件，我用的是Easy Python Decompiler是它变成py文件，用python IDE 打开如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Embedded file name: 1.py</span><span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> message<span class="token punctuation">:</span>        x <span class="token operator">=</span> ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">32</span>        x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">16</span>        s <span class="token operator">+=</span> chr<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>s<span class="token punctuation">)</span>correct <span class="token operator">=</span> <span class="token string">'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">print</span> <span class="token string">'Input flag:'</span>flag <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> encode<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">==</span> correct<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'correct'</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'wrong'</span></code></pre><p>一看这是一个简单的逻辑运算加密，解密脚本如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>    imessage <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> imessage<span class="token punctuation">:</span>        x <span class="token operator">=</span>  i<span class="token operator">-</span> <span class="token number">16</span>        x <span class="token operator">=</span> x <span class="token operator">^</span> <span class="token number">32</span>        s <span class="token operator">+=</span> chr<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> scorrect <span class="token operator">=</span> <span class="token string">'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'</span>flag <span class="token operator">=</span> decode<span class="token punctuation">(</span>correct<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#nctf{d3c0mpil1n9_PyC}</span></code></pre><h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a><strong>re1</strong></h2><p>题目是一个EXE可执行文件，常规题目直接拖入IDA进行分析</p><p><img src="/images/image-4.png" alt="Image text"></p><p>用IDA打开是选择binary file，在此模式下不会进行反汇编</p><p><img src="/images/image-5.png" alt="Image text"></p><h2 id="game"><a href="#game" class="headerlink" title="game"></a><strong>game</strong></h2><p>题目又是一个exe可执行文件，打开一看</p><p><img src="/images/image-6.png" alt="Image text"></p><p>话不多说直接拖入IDA</p><p><img src="/images/image-7.png" alt="Image text"></p><p>通过这里看大只有灯全部亮了，才回跳转到sub_457AB4()<br><img src="/images/image-8.png" alt="Image text"></p><p>得到这个flag的ASCII码，但是要有一个简单的逻辑运算，编写一个脚本转化</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span>        <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span>        <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span>        <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span>        <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>str <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    b<span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">+</span> i<span class="token punctuation">]</span>    b<span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">0x13</span>    str <span class="token operator">=</span> str <span class="token operator">+</span> chr<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#zsctf{T9is_tOpic_1s_v5ry_int7resting_b6t_others_are_n0t}</span></code></pre><p>还有一个方法就是玩这个游戏使得它灯全部变亮就会出现flag了</p><h2 id="Hello-CTF"><a href="#Hello-CTF" class="headerlink" title="Hello, CTF"></a><strong>Hello, CTF</strong></h2><p>题目也是一个可执行文件EXE,打开一看</p><p><img src="/images/image-9.png" alt="Image text"></p><p>用IDA打开，再用shift+F12的到</p><p><img src="/images/image-10.png" alt="Image text"></p><p>再根据上边exe打开要求的答案是字符串所以将IDA里面的16进制转字符串<a href="https://www.sojson.com/hexadecimal.html">16进制转字符</a></p><p><img src="/images/image-11.png" alt="Image text"></p><p><img src="/images/image-12.png" alt="Image text"></p><p>所做flag是CrackMeJustForFun</p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>G1CTF</title>
      <link href="2021/0527undefined.html"/>
      <url>2021/0527undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="G1CTF-协会内部测试"><a href="#G1CTF-协会内部测试" class="headerlink" title="G1CTF(协会内部测试)"></a>G1CTF(协会内部测试)</h1><p>[TOC]</p><h2 id="Deal-Breaking"><a href="#Deal-Breaking" class="headerlink" title="Deal Breaking"></a>Deal Breaking</h2><p>题目</p><p>cnenprgnzbysbeurnqnpur </p><p>解题</p><p> [在线ROT加密] (<a href="https://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php">https://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php</a>) </p><p> <img src="/images/image-1.png" alt="Image text"></p><p> 在MD5编码就得到flag</p><p>MD5 在线加密网站<a href="https://md5jiami.bmcx.com/">md5</a></p><p><img src="/images/image-2.png" alt="Image text"></p><h2 id="baby-rsa"><a href="#baby-rsa" class="headerlink" title="baby_rsa"></a>baby_rsa</h2><p>普通的RSA加密但多了一次pow 运算</p><p>解密脚本如下</p><pre class=" language-python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">18166111488983638423176654225038910650374178404043258136863317940757240374883045318227630220114908148002528619687208976201483203446705228237820608531034600157346418730110800833894198105113069673034318791074080878803821797374439187892933762426303490171060652425319592687318992422979831460606780689490127157122450326817694644127955168509718422226505201308410281564018832558025316135527711604948983206569045881358071837726506411561445950018434181828539749068924458242255898899889941894373420604283541696070823346969159662074221543706652525690955057870664198106495869582165707721782854117610672456879034154898769471938117</span>e <span class="token operator">=</span> <span class="token number">65537</span>c <span class="token operator">=</span> <span class="token number">16557540364154395713558646669072741937615342260542036031952182998548657011824978776677484944354752850867643908247704032511389420321541306432748843707416654616686046776804432102455821985542337552330254302403535524234293479604198963438410959320502344078024576646316377856554837978984863667052517437922967926155676374386985386995490935331458679889799199387332376735566839929210890931308968597230699243910342515468179185950859704753759493976488271753912140439374347388198468842216991965867366259721821413872154269673724400345270897275549939948544776957761650034569256088810092045614520316608497052245790834163200510667772</span>p <span class="token operator">=</span><span class="token number">130456283857645025762691023898845608928710362686294851221450093824533197549806631148867242691844441160576320773904432512838379590127986113818416101086695539425149571612979342889778360825402727498529748702035429662584726706609716114370652011043194792995908818094170934656989995629482678233000685983090325365549</span>q <span class="token operator">=</span><span class="token number">139250566947059823453625463016686669261826444361819002282335838853816828667839799789393680821194880353192071200076880361361848345889074292932450446910930443112614763933390287115641256150843558712707320218852675477962227409197464100372762134803009018827495653979157431219931338408129724157546988493768646375033</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2phi<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m<span class="token operator">=</span>pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(long_to_bytes(m))</span><span class="token comment" spellcheck="true">#没有加后面的pow</span>a<span class="token operator">=</span>pow<span class="token punctuation">(</span><span class="token number">0x1337</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x18a39cb09e40671788a6b9221371e3f5455bbde2aff984e491c85f4f3ad309613</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="easyRSA"><a href="#easyRSA" class="headerlink" title="easyRSA"></a>easyRSA</h2><p>这道题主要考察扩展欧几里得算法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a<span class="token operator">&lt;</span>b<span class="token punctuation">:</span>        a<span class="token punctuation">,</span>b <span class="token operator">=</span> b<span class="token punctuation">,</span>a    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> a<span class="token operator">%</span>b        a <span class="token operator">=</span> b        b <span class="token operator">=</span> temp    <span class="token keyword">return</span> a</code></pre><p>解题代码如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2<span class="token keyword">import</span> libnum<span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a<span class="token operator">&lt;</span>b<span class="token punctuation">:</span>        a<span class="token punctuation">,</span>b <span class="token operator">=</span> b<span class="token punctuation">,</span>a    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> a<span class="token operator">%</span>b        a <span class="token operator">=</span> b        b <span class="token operator">=</span> temp    <span class="token keyword">return</span> an1 <span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">14343453794367092515497895137902168386296417319247146730459319881802140334698737189342973812146465828660342012946910653192803473600595707696472591504951198563603709181626005658184116684367802758344031386496658458264959969692044879175628783605186867276515694784082482043436473458055894723810140516689141599152195984714148210638833797638255124702611899073506190942745515704802064433300261613781916198106074829630095538317067848424354570246167013526201728488570271571071978289748473886089178585249674489547064957622989808178007470483946536987289341591847349128538928294808117443145097551386826012131775390678998400121889</span><span class="token punctuation">)</span>n2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">20308195943065789251817446829863883469272602304751753219641822206296872340042055615695828234875654938558065292577939692476866300109337008636927498617655004089261030659132847752508448477243753135984370110439693105967818735745420000128069178972088161949286955900852997852216281385776262449633762670014571643311788609943581805728189446261833834354199480558854660930835489848639377800962143545608517015172667287024378681310097239827666867592226542748876958241795640727126418223939447294264460580825913526549434716100031432143671503937393640601052321015919112419872256052688412078974604159554387677255024728801489704260363</span><span class="token punctuation">)</span>c1 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">7060913174371289769309763235647638447135191122575239829016360331184038730172940927388867110734381358453407989806140634011350721798160713053621896705641720212112551788757319365520015847374673960320334248580560205413153114427654784961710348834514336159373193900583620653085765067165174133038800649323672785585501521017885631280303551697739951014696330327670228229605047676440962916067564193271247936974843751339372847625153953559941840547748375919498892051841063000432368600158512968060459462404612866403066205167176313042517873197370743936042865113128112591367582742396193149320607077649094903691975739181219359076265</span><span class="token punctuation">)</span>c2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span> <span class="token number">20148610260208170593289118672038891818770076647095364134619069654881479351996793675661468921299369828610961411535098751945943055486021096222646490248098261096267277133140141311947840921090893680970207588861087220137922905797128028172779716663247976566807484416436273763735289602135279810958841816837092253309070217739840320870090502512130142015671736882941916450932012952894134313348115440744061809508935802755106889882605495521669026118538807594430799171795521056652204797565525565412195933084030518258900930049905119086640401568596910662117008862676917676436361632490924908191898958534522611573541581472875515834526</span><span class="token punctuation">)</span>e<span class="token operator">=</span><span class="token number">65537</span>p<span class="token operator">=</span>gcd<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span>q<span class="token operator">=</span>n1<span class="token operator">//</span>pphi<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d1 <span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m1 <span class="token operator">=</span> pow<span class="token punctuation">(</span>c1<span class="token punctuation">,</span>d1<span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="Asymmetric-task"><a href="#Asymmetric-task" class="headerlink" title="Asymmetric task"></a>Asymmetric task</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>sysos<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">import</span> base64<span class="token keyword">from</span> libnum <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSAflag<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">'enc_flag.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>keys<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'public_private.enc'</span><span class="token punctuation">,</span><span class="token string">'rt'</span><span class="token punctuation">)</span>public<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>keys<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>private<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>keys<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>key<span class="token operator">=</span>RSA<span class="token punctuation">.</span>import_key<span class="token punctuation">(</span>private<span class="token punctuation">)</span>c<span class="token operator">=</span>s2n<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>m<span class="token operator">=</span>pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>key<span class="token punctuation">.</span>d<span class="token punctuation">,</span>key<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>n2s<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>参考着ctftime的<a href="https://szymanski.ninja/en/ctfwriteups/2021/securebug-odin/asymmetricjob/">wp</a></p><h2 id="ONE-Piece"><a href="#ONE-Piece" class="headerlink" title="ONE Piece"></a>ONE Piece</h2><p><a href="https://en.wikipedia.org/wiki/International_maritime_signal_flags">解题网站</a><br>flag{0n1_p1ece}</p><p>##[G1CTF2021]sign_in<br>题目是一个可执行文件直接用IDA打开分析的<br><img src="/images/image-22.png" alt="Image text"><br>然后直接上python脚本</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'sdhfuiasdfhxckjcxklvjzidsoifujoa'</span>str2 <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x34</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x2b</span><span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0xe</span><span class="token punctuation">,</span><span class="token number">0x5f</span><span class="token punctuation">,</span><span class="token number">0xc</span><span class="token punctuation">,</span><span class="token number">0x1e</span><span class="token punctuation">,</span><span class="token number">0x4</span><span class="token punctuation">,</span><span class="token number">0x5c</span><span class="token punctuation">,</span><span class="token number">0xe</span><span class="token punctuation">,</span><span class="token number">0x5</span><span class="token punctuation">,</span><span class="token number">0x1f</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span><span class="token number">0x5</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x1d</span><span class="token punctuation">,</span><span class="token number">0x3</span><span class="token punctuation">,</span><span class="token number">0xf</span><span class="token punctuation">,</span><span class="token number">0x1f</span><span class="token punctuation">,</span><span class="token number">0x1c</span><span class="token punctuation">,</span><span class="token number">0xd</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x5c</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x1c</span><span class="token punctuation">]</span>flag<span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token operator">=</span>ord<span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span>str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    flag<span class="token operator">+=</span>chr<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#G1CTF{sfj9dfg7dfg8dszgjklsd7667}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 协会测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
